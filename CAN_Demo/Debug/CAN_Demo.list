
CAN_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000493c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08004a48  08004a48  00014a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b30  08004b30  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004b30  08004b30  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b30  08004b30  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b30  08004b30  00014b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b34  08004b34  00014b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004b38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  20000070  08004ba8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  08004ba8  000202c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ed20  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002752  00000000  00000000  0002edfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec8  00000000  00000000  00031550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b6d  00000000  00000000  00032418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019594  00000000  00000000  00032f85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001152f  00000000  00000000  0004c519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008eaa9  00000000  00000000  0005da48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000044b4  00000000  00000000  000ec4f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000f09a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004a30 	.word	0x08004a30

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004a30 	.word	0x08004a30

0800014c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000150:	4b27      	ldr	r3, [pc, #156]	; (80001f0 <MX_CAN_Init+0xa4>)
 8000152:	4a28      	ldr	r2, [pc, #160]	; (80001f4 <MX_CAN_Init+0xa8>)
 8000154:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000156:	4b26      	ldr	r3, [pc, #152]	; (80001f0 <MX_CAN_Init+0xa4>)
 8000158:	2204      	movs	r2, #4
 800015a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800015c:	4b24      	ldr	r3, [pc, #144]	; (80001f0 <MX_CAN_Init+0xa4>)
 800015e:	2200      	movs	r2, #0
 8000160:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000162:	4b23      	ldr	r3, [pc, #140]	; (80001f0 <MX_CAN_Init+0xa4>)
 8000164:	2200      	movs	r2, #0
 8000166:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000168:	4b21      	ldr	r3, [pc, #132]	; (80001f0 <MX_CAN_Init+0xa4>)
 800016a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800016e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000170:	4b1f      	ldr	r3, [pc, #124]	; (80001f0 <MX_CAN_Init+0xa4>)
 8000172:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000176:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000178:	4b1d      	ldr	r3, [pc, #116]	; (80001f0 <MX_CAN_Init+0xa4>)
 800017a:	2200      	movs	r2, #0
 800017c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800017e:	4b1c      	ldr	r3, [pc, #112]	; (80001f0 <MX_CAN_Init+0xa4>)
 8000180:	2200      	movs	r2, #0
 8000182:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000184:	4b1a      	ldr	r3, [pc, #104]	; (80001f0 <MX_CAN_Init+0xa4>)
 8000186:	2200      	movs	r2, #0
 8000188:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800018a:	4b19      	ldr	r3, [pc, #100]	; (80001f0 <MX_CAN_Init+0xa4>)
 800018c:	2200      	movs	r2, #0
 800018e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000190:	4b17      	ldr	r3, [pc, #92]	; (80001f0 <MX_CAN_Init+0xa4>)
 8000192:	2200      	movs	r2, #0
 8000194:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000196:	4b16      	ldr	r3, [pc, #88]	; (80001f0 <MX_CAN_Init+0xa4>)
 8000198:	2200      	movs	r2, #0
 800019a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800019c:	4814      	ldr	r0, [pc, #80]	; (80001f0 <MX_CAN_Init+0xa4>)
 800019e:	f000 fd17 	bl	8000bd0 <HAL_CAN_Init>
 80001a2:	4603      	mov	r3, r0
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d001      	beq.n	80001ac <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80001a8:	f000 fa71 	bl	800068e <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
#ifdef Board0
  CAN_Init(&mCAN, &hcan, Node1_TX_ID);
 80001ac:	f240 1203 	movw	r2, #259	; 0x103
 80001b0:	490f      	ldr	r1, [pc, #60]	; (80001f0 <MX_CAN_Init+0xa4>)
 80001b2:	4811      	ldr	r0, [pc, #68]	; (80001f8 <MX_CAN_Init+0xac>)
 80001b4:	f000 f8a4 	bl	8000300 <CAN_Init>
  CAN_Config_Filtering(&mCAN, Node2_TX_ID);
 80001b8:	f240 3101 	movw	r1, #769	; 0x301
 80001bc:	480e      	ldr	r0, [pc, #56]	; (80001f8 <MX_CAN_Init+0xac>)
 80001be:	f000 f8b5 	bl	800032c <CAN_Config_Filtering>
  printf("Set Node_1's ID!\r\n");
 80001c2:	480e      	ldr	r0, [pc, #56]	; (80001fc <MX_CAN_Init+0xb0>)
 80001c4:	f003 fdc4 	bl	8003d50 <puts>
#else
  CAN_Init(&mCAN, &hcan, Node2_TX_ID);
  CAN_Config_Filtering(&mCAN, Node1_TX_ID);
  printf("Set Node_2's ID!\r\n");
#endif
  if (HAL_CAN_ActivateNotification(&hcan,
 80001c8:	f248 0103 	movw	r1, #32771	; 0x8003
 80001cc:	4808      	ldr	r0, [pc, #32]	; (80001f0 <MX_CAN_Init+0xa4>)
 80001ce:	f001 f8f7 	bl	80013c0 <HAL_CAN_ActivateNotification>
 80001d2:	4603      	mov	r3, r0
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d001      	beq.n	80001dc <MX_CAN_Init+0x90>
  CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_ERROR)
      != HAL_OK)
  {
    Error_Handler();
 80001d8:	f000 fa59 	bl	800068e <Error_Handler>
  }
  // Start CAN communication
  if (HAL_CAN_Start(&hcan) != HAL_OK)
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <MX_CAN_Init+0xa4>)
 80001de:	f000 febb 	bl	8000f58 <HAL_CAN_Start>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d001      	beq.n	80001ec <MX_CAN_Init+0xa0>
  {
    Error_Handler();
 80001e8:	f000 fa51 	bl	800068e <Error_Handler>
  }
  // Activate the notification
  /* USER CODE END CAN_Init 2 */

}
 80001ec:	bf00      	nop
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	200000b4 	.word	0x200000b4
 80001f4:	40006400 	.word	0x40006400
 80001f8:	200000ac 	.word	0x200000ac
 80001fc:	08004a48 	.word	0x08004a48

08000200 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef *canHandle)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b08a      	sub	sp, #40	; 0x28
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000208:	f107 0314 	add.w	r3, r7, #20
 800020c:	2200      	movs	r2, #0
 800020e:	601a      	str	r2, [r3, #0]
 8000210:	605a      	str	r2, [r3, #4]
 8000212:	609a      	str	r2, [r3, #8]
 8000214:	60da      	str	r2, [r3, #12]
  if (canHandle->Instance == CAN1)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	4a35      	ldr	r2, [pc, #212]	; (80002f0 <HAL_CAN_MspInit+0xf0>)
 800021c:	4293      	cmp	r3, r2
 800021e:	d163      	bne.n	80002e8 <HAL_CAN_MspInit+0xe8>
  {
#ifdef Board0
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000220:	4b34      	ldr	r3, [pc, #208]	; (80002f4 <HAL_CAN_MspInit+0xf4>)
 8000222:	69db      	ldr	r3, [r3, #28]
 8000224:	4a33      	ldr	r2, [pc, #204]	; (80002f4 <HAL_CAN_MspInit+0xf4>)
 8000226:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800022a:	61d3      	str	r3, [r2, #28]
 800022c:	4b31      	ldr	r3, [pc, #196]	; (80002f4 <HAL_CAN_MspInit+0xf4>)
 800022e:	69db      	ldr	r3, [r3, #28]
 8000230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000234:	613b      	str	r3, [r7, #16]
 8000236:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000238:	4b2e      	ldr	r3, [pc, #184]	; (80002f4 <HAL_CAN_MspInit+0xf4>)
 800023a:	699b      	ldr	r3, [r3, #24]
 800023c:	4a2d      	ldr	r2, [pc, #180]	; (80002f4 <HAL_CAN_MspInit+0xf4>)
 800023e:	f043 0308 	orr.w	r3, r3, #8
 8000242:	6193      	str	r3, [r2, #24]
 8000244:	4b2b      	ldr	r3, [pc, #172]	; (80002f4 <HAL_CAN_MspInit+0xf4>)
 8000246:	699b      	ldr	r3, [r3, #24]
 8000248:	f003 0308 	and.w	r3, r3, #8
 800024c:	60fb      	str	r3, [r7, #12]
 800024e:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
     PB8     ------> CAN_RX
     PB9     ------> CAN_TX
     */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000250:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000256:	2300      	movs	r3, #0
 8000258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800025a:	2300      	movs	r3, #0
 800025c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800025e:	f107 0314 	add.w	r3, r7, #20
 8000262:	4619      	mov	r1, r3
 8000264:	4824      	ldr	r0, [pc, #144]	; (80002f8 <HAL_CAN_MspInit+0xf8>)
 8000266:	f001 fc8f 	bl	8001b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800026a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800026e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000270:	2302      	movs	r3, #2
 8000272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000274:	2303      	movs	r3, #3
 8000276:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000278:	f107 0314 	add.w	r3, r7, #20
 800027c:	4619      	mov	r1, r3
 800027e:	481e      	ldr	r0, [pc, #120]	; (80002f8 <HAL_CAN_MspInit+0xf8>)
 8000280:	f001 fc82 	bl	8001b88 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000284:	4b1d      	ldr	r3, [pc, #116]	; (80002fc <HAL_CAN_MspInit+0xfc>)
 8000286:	685b      	ldr	r3, [r3, #4]
 8000288:	627b      	str	r3, [r7, #36]	; 0x24
 800028a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800028c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000290:	627b      	str	r3, [r7, #36]	; 0x24
 8000292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000294:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000298:	627b      	str	r3, [r7, #36]	; 0x24
 800029a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800029c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002a0:	627b      	str	r3, [r7, #36]	; 0x24
 80002a2:	4a16      	ldr	r2, [pc, #88]	; (80002fc <HAL_CAN_MspInit+0xfc>)
 80002a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002a6:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 15, 0);
 80002a8:	2200      	movs	r2, #0
 80002aa:	210f      	movs	r1, #15
 80002ac:	2013      	movs	r0, #19
 80002ae:	f001 fb82 	bl	80019b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 15, 0);
 80002b2:	2200      	movs	r2, #0
 80002b4:	210f      	movs	r1, #15
 80002b6:	2014      	movs	r0, #20
 80002b8:	f001 fb7d 	bl	80019b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 15, 0);
 80002bc:	2200      	movs	r2, #0
 80002be:	210f      	movs	r1, #15
 80002c0:	2015      	movs	r0, #21
 80002c2:	f001 fb78 	bl	80019b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 15, 0);
 80002c6:	2200      	movs	r2, #0
 80002c8:	210f      	movs	r1, #15
 80002ca:	2016      	movs	r0, #22
 80002cc:	f001 fb73 	bl	80019b6 <HAL_NVIC_SetPriority>

    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80002d0:	2013      	movs	r0, #19
 80002d2:	f001 fb8c 	bl	80019ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80002d6:	2014      	movs	r0, #20
 80002d8:	f001 fb89 	bl	80019ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80002dc:	2015      	movs	r0, #21
 80002de:	f001 fb86 	bl	80019ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80002e2:	2016      	movs	r0, #22
 80002e4:	f001 fb83 	bl	80019ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);

#endif
  }
}
 80002e8:	bf00      	nop
 80002ea:	3728      	adds	r7, #40	; 0x28
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	40006400 	.word	0x40006400
 80002f4:	40021000 	.word	0x40021000
 80002f8:	40010c00 	.word	0x40010c00
 80002fc:	40010000 	.word	0x40010000

08000300 <CAN_Init>:
}

/* USER CODE BEGIN 1 */
HAL_StatusTypeDef CAN_Init(CAN_HandlerStruct *Canhandler,
    CAN_HandleTypeDef *hcan, uint16_t ID)
{
 8000300:	b480      	push	{r7}
 8000302:	b085      	sub	sp, #20
 8000304:	af00      	add	r7, sp, #0
 8000306:	60f8      	str	r0, [r7, #12]
 8000308:	60b9      	str	r1, [r7, #8]
 800030a:	4613      	mov	r3, r2
 800030c:	80fb      	strh	r3, [r7, #6]
  Canhandler->hcan = hcan;
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	68ba      	ldr	r2, [r7, #8]
 8000312:	601a      	str	r2, [r3, #0]
  Canhandler->SenderID = ID;
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	88fa      	ldrh	r2, [r7, #6]
 8000318:	809a      	strh	r2, [r3, #4]
  Canhandler->FilterBank = 0;
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	2200      	movs	r2, #0
 800031e:	80da      	strh	r2, [r3, #6]
  return HAL_OK;
 8000320:	2300      	movs	r3, #0
}
 8000322:	4618      	mov	r0, r3
 8000324:	3714      	adds	r7, #20
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr

0800032c <CAN_Config_Filtering>:

HAL_StatusTypeDef CAN_Config_Filtering(CAN_HandlerStruct *Canhandler,
    uint16_t NodeID)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b08c      	sub	sp, #48	; 0x30
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	460b      	mov	r3, r1
 8000336:	807b      	strh	r3, [r7, #2]
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000338:	2301      	movs	r3, #1
 800033a:	62bb      	str	r3, [r7, #40]	; 0x28
  canfilterconfig.FilterBank = 0; // which filter bank to use from the assigned ones
 800033c:	2300      	movs	r3, #0
 800033e:	61fb      	str	r3, [r7, #28]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000340:	2300      	movs	r3, #0
 8000342:	61bb      	str	r3, [r7, #24]
#ifdef Board0
  canfilterconfig.FilterIdHigh = 0x0000; //Node2_TX_ID << 5;
 8000344:	2300      	movs	r3, #0
 8000346:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterIdLow = 0x0000;
 8000348:	2300      	movs	r3, #0
 800034a:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMaskIdHigh = 0x0000; //Node2_TX_ID << 5;
 800034c:	2300      	movs	r3, #0
 800034e:	613b      	str	r3, [r7, #16]
#else
  canfilterconfig.FilterIdHigh = 0x0000; //Node1_TX_ID << 5;
  canfilterconfig.FilterIdLow = 0x0000;
  canfilterconfig.FilterMaskIdHigh = 0x0000; //Node1_TX_ID << 5;
#endif
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8000350:	2300      	movs	r3, #0
 8000352:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000354:	2300      	movs	r3, #0
 8000356:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000358:	2301      	movs	r3, #1
 800035a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_CAN_ConfigFilter(&hcan, &canfilterconfig) != HAL_OK)
 800035c:	f107 0308 	add.w	r3, r7, #8
 8000360:	4619      	mov	r1, r3
 8000362:	4806      	ldr	r0, [pc, #24]	; (800037c <CAN_Config_Filtering+0x50>)
 8000364:	f000 fd2f 	bl	8000dc6 <HAL_CAN_ConfigFilter>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <CAN_Config_Filtering+0x46>
  {
    Error_Handler();
 800036e:	f000 f98e 	bl	800068e <Error_Handler>
  }
  return HAL_OK;
 8000372:	2300      	movs	r3, #0
}
 8000374:	4618      	mov	r0, r3
 8000376:	3730      	adds	r7, #48	; 0x30
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	200000b4 	.word	0x200000b4

08000380 <CAN_Send_Test>:

uint8_t CAN_Send_Test(CAN_HandlerStruct *Canhandler)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  CAN_Tx_Header.DLC = 8;  // data length
 8000388:	4b17      	ldr	r3, [pc, #92]	; (80003e8 <CAN_Send_Test+0x68>)
 800038a:	2208      	movs	r2, #8
 800038c:	611a      	str	r2, [r3, #16]
  CAN_Tx_Header.IDE = CAN_ID_STD;
 800038e:	4b16      	ldr	r3, [pc, #88]	; (80003e8 <CAN_Send_Test+0x68>)
 8000390:	2200      	movs	r2, #0
 8000392:	609a      	str	r2, [r3, #8]
  CAN_Tx_Header.RTR = CAN_RTR_DATA;
 8000394:	4b14      	ldr	r3, [pc, #80]	; (80003e8 <CAN_Send_Test+0x68>)
 8000396:	2200      	movs	r2, #0
 8000398:	60da      	str	r2, [r3, #12]

  CAN_CNT++;
 800039a:	4b14      	ldr	r3, [pc, #80]	; (80003ec <CAN_Send_Test+0x6c>)
 800039c:	881b      	ldrh	r3, [r3, #0]
 800039e:	3301      	adds	r3, #1
 80003a0:	b29a      	uxth	r2, r3
 80003a2:	4b12      	ldr	r3, [pc, #72]	; (80003ec <CAN_Send_Test+0x6c>)
 80003a4:	801a      	strh	r2, [r3, #0]
  CAN_TX_Buffer[0] = CAN_CNT >> 8;
 80003a6:	4b11      	ldr	r3, [pc, #68]	; (80003ec <CAN_Send_Test+0x6c>)
 80003a8:	881b      	ldrh	r3, [r3, #0]
 80003aa:	0a1b      	lsrs	r3, r3, #8
 80003ac:	b29b      	uxth	r3, r3
 80003ae:	b2da      	uxtb	r2, r3
 80003b0:	4b0f      	ldr	r3, [pc, #60]	; (80003f0 <CAN_Send_Test+0x70>)
 80003b2:	701a      	strb	r2, [r3, #0]
  CAN_TX_Buffer[1] = CAN_CNT & 0xFF;
 80003b4:	4b0d      	ldr	r3, [pc, #52]	; (80003ec <CAN_Send_Test+0x6c>)
 80003b6:	881b      	ldrh	r3, [r3, #0]
 80003b8:	b2da      	uxtb	r2, r3
 80003ba:	4b0d      	ldr	r3, [pc, #52]	; (80003f0 <CAN_Send_Test+0x70>)
 80003bc:	705a      	strb	r2, [r3, #1]

#ifdef Board0
  CAN_Tx_Header.StdId = Node1_TX_ID;  // ID
 80003be:	4b0a      	ldr	r3, [pc, #40]	; (80003e8 <CAN_Send_Test+0x68>)
 80003c0:	f240 1203 	movw	r2, #259	; 0x103
 80003c4:	601a      	str	r2, [r3, #0]
#else
  CAN_Tx_Header.StdId = Node2_TX_ID;  // ID
#endif

  if (HAL_CAN_AddTxMessage(Canhandler->hcan, &CAN_Tx_Header, CAN_TX_Buffer,
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	6818      	ldr	r0, [r3, #0]
 80003ca:	4b0a      	ldr	r3, [pc, #40]	; (80003f4 <CAN_Send_Test+0x74>)
 80003cc:	4a08      	ldr	r2, [pc, #32]	; (80003f0 <CAN_Send_Test+0x70>)
 80003ce:	4906      	ldr	r1, [pc, #24]	; (80003e8 <CAN_Send_Test+0x68>)
 80003d0:	f000 fe06 	bl	8000fe0 <HAL_CAN_AddTxMessage>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <CAN_Send_Test+0x5e>
      &CAN_Mailbox) != HAL_OK)
  {
    Error_Handler();
 80003da:	f000 f958 	bl	800068e <Error_Handler>
  }
}
 80003de:	bf00      	nop
 80003e0:	4618      	mov	r0, r3
 80003e2:	3708      	adds	r7, #8
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	20000094 	.word	0x20000094
 80003ec:	2000008c 	.word	0x2000008c
 80003f0:	20000000 	.word	0x20000000
 80003f4:	20000090 	.word	0x20000090

080003f8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  }
  return HAL_OK;
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80003f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003fa:	b093      	sub	sp, #76	; 0x4c
 80003fc:	af06      	add	r7, sp, #24
 80003fe:	6078      	str	r0, [r7, #4]
  CAN_RxHeaderTypeDef RxHeader;
  uint8_t rcv[8];
  if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, rcv) != HAL_OK)
 8000400:	f107 030c 	add.w	r3, r7, #12
 8000404:	f107 0214 	add.w	r2, r7, #20
 8000408:	1d38      	adds	r0, r7, #4
 800040a:	2100      	movs	r1, #0
 800040c:	f000 feb7 	bl	800117e <HAL_CAN_GetRxMessage>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
  {
    Error_Handler();
 8000416:	f000 f93a 	bl	800068e <Error_Handler>
  }
  printf("messsage: %x %x %x %x %x %x %x %x\r\n", rcv[0], rcv[1], rcv[2],
 800041a:	7b3b      	ldrb	r3, [r7, #12]
 800041c:	461d      	mov	r5, r3
 800041e:	7b7b      	ldrb	r3, [r7, #13]
 8000420:	461e      	mov	r6, r3
 8000422:	7bbb      	ldrb	r3, [r7, #14]
 8000424:	469c      	mov	ip, r3
      rcv[3], rcv[4], rcv[5], rcv[6], rcv[7]);
 8000426:	7bfb      	ldrb	r3, [r7, #15]
 8000428:	7c3a      	ldrb	r2, [r7, #16]
 800042a:	7c79      	ldrb	r1, [r7, #17]
 800042c:	7cb8      	ldrb	r0, [r7, #18]
 800042e:	7cfc      	ldrb	r4, [r7, #19]
  printf("messsage: %x %x %x %x %x %x %x %x\r\n", rcv[0], rcv[1], rcv[2],
 8000430:	9404      	str	r4, [sp, #16]
 8000432:	9003      	str	r0, [sp, #12]
 8000434:	9102      	str	r1, [sp, #8]
 8000436:	9201      	str	r2, [sp, #4]
 8000438:	9300      	str	r3, [sp, #0]
 800043a:	4663      	mov	r3, ip
 800043c:	4632      	mov	r2, r6
 800043e:	4629      	mov	r1, r5
 8000440:	4803      	ldr	r0, [pc, #12]	; (8000450 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8000442:	f003 fc1f 	bl	8003c84 <iprintf>
}
 8000446:	bf00      	nop
 8000448:	3734      	adds	r7, #52	; 0x34
 800044a:	46bd      	mov	sp, r7
 800044c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800044e:	bf00      	nop
 8000450:	08004a64 	.word	0x08004a64

08000454 <HAL_CAN_RxFifo1MsgPendingCallback>:
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	b093      	sub	sp, #76	; 0x4c
 8000458:	af06      	add	r7, sp, #24
 800045a:	6078      	str	r0, [r7, #4]
  CAN_RxHeaderTypeDef RxHeader;
  uint8_t rcv[8];
  if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, rcv) != HAL_OK)
 800045c:	f107 030c 	add.w	r3, r7, #12
 8000460:	f107 0214 	add.w	r2, r7, #20
 8000464:	1d38      	adds	r0, r7, #4
 8000466:	2100      	movs	r1, #0
 8000468:	f000 fe89 	bl	800117e <HAL_CAN_GetRxMessage>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <HAL_CAN_RxFifo1MsgPendingCallback+0x22>
  {
    Error_Handler();
 8000472:	f000 f90c 	bl	800068e <Error_Handler>
  }
  printf("messsage: %x %x %x %x %x %x %x %x\r\n", rcv[0], rcv[1], rcv[2],
 8000476:	7b3b      	ldrb	r3, [r7, #12]
 8000478:	461d      	mov	r5, r3
 800047a:	7b7b      	ldrb	r3, [r7, #13]
 800047c:	461e      	mov	r6, r3
 800047e:	7bbb      	ldrb	r3, [r7, #14]
 8000480:	469c      	mov	ip, r3
      rcv[3], rcv[4], rcv[5], rcv[6], rcv[7]);
 8000482:	7bfb      	ldrb	r3, [r7, #15]
 8000484:	7c3a      	ldrb	r2, [r7, #16]
 8000486:	7c79      	ldrb	r1, [r7, #17]
 8000488:	7cb8      	ldrb	r0, [r7, #18]
 800048a:	7cfc      	ldrb	r4, [r7, #19]
  printf("messsage: %x %x %x %x %x %x %x %x\r\n", rcv[0], rcv[1], rcv[2],
 800048c:	9404      	str	r4, [sp, #16]
 800048e:	9003      	str	r0, [sp, #12]
 8000490:	9102      	str	r1, [sp, #8]
 8000492:	9201      	str	r2, [sp, #4]
 8000494:	9300      	str	r3, [sp, #0]
 8000496:	4663      	mov	r3, ip
 8000498:	4632      	mov	r2, r6
 800049a:	4629      	mov	r1, r5
 800049c:	4803      	ldr	r0, [pc, #12]	; (80004ac <HAL_CAN_RxFifo1MsgPendingCallback+0x58>)
 800049e:	f003 fbf1 	bl	8003c84 <iprintf>
}
 80004a2:	bf00      	nop
 80004a4:	3734      	adds	r7, #52	; 0x34
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004aa:	bf00      	nop
 80004ac:	08004a64 	.word	0x08004a64

080004b0 <HAL_CAN_TxMailbox0CompleteCallback>:
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  printf("messsage 1: send\r\n");
 80004b8:	4803      	ldr	r0, [pc, #12]	; (80004c8 <HAL_CAN_TxMailbox0CompleteCallback+0x18>)
 80004ba:	f003 fc49 	bl	8003d50 <puts>

}
 80004be:	bf00      	nop
 80004c0:	3708      	adds	r7, #8
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	08004a88 	.word	0x08004a88

080004cc <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  printf("messsage 2: send\r\n");
 80004d4:	4803      	ldr	r0, [pc, #12]	; (80004e4 <HAL_CAN_TxMailbox1CompleteCallback+0x18>)
 80004d6:	f003 fc3b 	bl	8003d50 <puts>

}
 80004da:	bf00      	nop
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	08004a9c 	.word	0x08004a9c

080004e8 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  printf("messsage 3: send\r\n");
 80004f0:	4803      	ldr	r0, [pc, #12]	; (8000500 <HAL_CAN_TxMailbox2CompleteCallback+0x18>)
 80004f2:	f003 fc2d 	bl	8003d50 <puts>

}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	08004ab0 	.word	0x08004ab0

08000504 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b088      	sub	sp, #32
 8000508:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050a:	f107 0310 	add.w	r3, r7, #16
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000518:	4b24      	ldr	r3, [pc, #144]	; (80005ac <MX_GPIO_Init+0xa8>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	4a23      	ldr	r2, [pc, #140]	; (80005ac <MX_GPIO_Init+0xa8>)
 800051e:	f043 0310 	orr.w	r3, r3, #16
 8000522:	6193      	str	r3, [r2, #24]
 8000524:	4b21      	ldr	r3, [pc, #132]	; (80005ac <MX_GPIO_Init+0xa8>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	f003 0310 	and.w	r3, r3, #16
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000530:	4b1e      	ldr	r3, [pc, #120]	; (80005ac <MX_GPIO_Init+0xa8>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	4a1d      	ldr	r2, [pc, #116]	; (80005ac <MX_GPIO_Init+0xa8>)
 8000536:	f043 0320 	orr.w	r3, r3, #32
 800053a:	6193      	str	r3, [r2, #24]
 800053c:	4b1b      	ldr	r3, [pc, #108]	; (80005ac <MX_GPIO_Init+0xa8>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	f003 0320 	and.w	r3, r3, #32
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000548:	4b18      	ldr	r3, [pc, #96]	; (80005ac <MX_GPIO_Init+0xa8>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	4a17      	ldr	r2, [pc, #92]	; (80005ac <MX_GPIO_Init+0xa8>)
 800054e:	f043 0304 	orr.w	r3, r3, #4
 8000552:	6193      	str	r3, [r2, #24]
 8000554:	4b15      	ldr	r3, [pc, #84]	; (80005ac <MX_GPIO_Init+0xa8>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	f003 0304 	and.w	r3, r3, #4
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <MX_GPIO_Init+0xa8>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	4a11      	ldr	r2, [pc, #68]	; (80005ac <MX_GPIO_Init+0xa8>)
 8000566:	f043 0308 	orr.w	r3, r3, #8
 800056a:	6193      	str	r3, [r2, #24]
 800056c:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <MX_GPIO_Init+0xa8>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	f003 0308 	and.w	r3, r3, #8
 8000574:	603b      	str	r3, [r7, #0]
 8000576:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_OnBoard_GPIO_Port, LED_OnBoard_Pin, GPIO_PIN_RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800057e:	480c      	ldr	r0, [pc, #48]	; (80005b0 <MX_GPIO_Init+0xac>)
 8000580:	f001 fc86 	bl	8001e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_OnBoard_Pin;
 8000584:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000588:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058a:	2301      	movs	r3, #1
 800058c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	2300      	movs	r3, #0
 8000590:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000592:	2302      	movs	r3, #2
 8000594:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_OnBoard_GPIO_Port, &GPIO_InitStruct);
 8000596:	f107 0310 	add.w	r3, r7, #16
 800059a:	4619      	mov	r1, r3
 800059c:	4804      	ldr	r0, [pc, #16]	; (80005b0 <MX_GPIO_Init+0xac>)
 800059e:	f001 faf3 	bl	8001b88 <HAL_GPIO_Init>

}
 80005a2:	bf00      	nop
 80005a4:	3720      	adds	r7, #32
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40021000 	.word	0x40021000
 80005b0:	40011000 	.word	0x40011000

080005b4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  if (htim->Instance == htim3.Instance)
  {
    //HAL_GPIO_TogglePin(LED_OnBoard_GPIO_Port, LED_OnBoard_Pin);
    //CAN_Send_Test(&mCAN);
  }
}
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bc80      	pop	{r7}
 80005c4:	4770      	bx	lr
	...

080005c8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005cc:	f000 fa9e 	bl	8000b0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d0:	f000 f818 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d4:	f7ff ff96 	bl	8000504 <MX_GPIO_Init>
  MX_CAN_Init();
 80005d8:	f7ff fdb8 	bl	800014c <MX_CAN_Init>
  MX_TIM3_Init();
 80005dc:	f000 f96c 	bl	80008b8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80005e0:	f000 f9de 	bl	80009a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80005e4:	4804      	ldr	r0, [pc, #16]	; (80005f8 <main+0x30>)
 80005e6:	f002 f8cb 	bl	8002780 <HAL_TIM_Base_Start_IT>
  printf("Init done!\r\n");
 80005ea:	4804      	ldr	r0, [pc, #16]	; (80005fc <main+0x34>)
 80005ec:	f003 fbb0 	bl	8003d50 <puts>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    //HAL_GPIO_TogglePin(LED_OnBoard_GPIO_Port, LED_OnBoard_Pin);
    //HAL_Delay(500);
    CAN_Send_Test(&mCAN);
 80005f0:	4803      	ldr	r0, [pc, #12]	; (8000600 <main+0x38>)
 80005f2:	f7ff fec5 	bl	8000380 <CAN_Send_Test>
 80005f6:	e7fb      	b.n	80005f0 <main+0x28>
 80005f8:	200000e0 	.word	0x200000e0
 80005fc:	08004ac4 	.word	0x08004ac4
 8000600:	200000ac 	.word	0x200000ac

08000604 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b090      	sub	sp, #64	; 0x40
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800060a:	f107 0318 	add.w	r3, r7, #24
 800060e:	2228      	movs	r2, #40	; 0x28
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f003 fc7c 	bl	8003f10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
 8000624:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000626:	2301      	movs	r3, #1
 8000628:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800062a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800062e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000634:	2301      	movs	r3, #1
 8000636:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000638:	2302      	movs	r3, #2
 800063a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000640:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000642:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000646:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000648:	f107 0318 	add.w	r3, r7, #24
 800064c:	4618      	mov	r0, r3
 800064e:	f001 fc37 	bl	8001ec0 <HAL_RCC_OscConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000658:	f000 f819 	bl	800068e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800065c:	230f      	movs	r3, #15
 800065e:	607b      	str	r3, [r7, #4]
      | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000660:	2302      	movs	r3, #2
 8000662:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000668:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800066c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	2102      	movs	r1, #2
 8000676:	4618      	mov	r0, r3
 8000678:	f001 fea4 	bl	80023c4 <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000682:	f000 f804 	bl	800068e <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	3740      	adds	r7, #64	; 0x40
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000692:	b672      	cpsid	i
}
 8000694:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000696:	e7fe      	b.n	8000696 <Error_Handler+0x8>

08000698 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <HAL_MspInit+0x40>)
 80006a0:	699b      	ldr	r3, [r3, #24]
 80006a2:	4a0d      	ldr	r2, [pc, #52]	; (80006d8 <HAL_MspInit+0x40>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	6193      	str	r3, [r2, #24]
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <HAL_MspInit+0x40>)
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b6:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <HAL_MspInit+0x40>)
 80006b8:	69db      	ldr	r3, [r3, #28]
 80006ba:	4a07      	ldr	r2, [pc, #28]	; (80006d8 <HAL_MspInit+0x40>)
 80006bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c0:	61d3      	str	r3, [r2, #28]
 80006c2:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <HAL_MspInit+0x40>)
 80006c4:	69db      	ldr	r3, [r3, #28]
 80006c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr
 80006d8:	40021000 	.word	0x40021000

080006dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <NMI_Handler+0x4>

080006e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <HardFault_Handler+0x4>

080006e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <MemManage_Handler+0x4>

080006ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <BusFault_Handler+0x4>

080006f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <UsageFault_Handler+0x4>

080006fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	46bd      	mov	sp, r7
 8000702:	bc80      	pop	{r7}
 8000704:	4770      	bx	lr

08000706 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr

08000712 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr

0800071e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000722:	f000 fa39 	bl	8000b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
	...

0800072c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000730:	4802      	ldr	r0, [pc, #8]	; (800073c <TIM3_IRQHandler+0x10>)
 8000732:	f002 f877 	bl	8002824 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200000e0 	.word	0x200000e0

08000740 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000744:	4802      	ldr	r0, [pc, #8]	; (8000750 <USART2_IRQHandler+0x10>)
 8000746:	f002 fc9d 	bl	8003084 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000128 	.word	0x20000128

08000754 <USB_HP_CAN1_TX_IRQHandler>:

/* USER CODE BEGIN 1 */
void CAN1_TX_IRQHandler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  HAL_CAN_IRQHandler(&hcan);
 8000758:	4802      	ldr	r0, [pc, #8]	; (8000764 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 800075a:	f000 fe56 	bl	800140a <HAL_CAN_IRQHandler>
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	200000b4 	.word	0x200000b4

08000768 <CAN1_RX1_IRQHandler>:
void CAN1_RX1_IRQHandler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  HAL_CAN_IRQHandler(&hcan);
 800076c:	4802      	ldr	r0, [pc, #8]	; (8000778 <CAN1_RX1_IRQHandler+0x10>)
 800076e:	f000 fe4c 	bl	800140a <HAL_CAN_IRQHandler>
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200000b4 	.word	0x200000b4

0800077c <USB_LP_CAN1_RX0_IRQHandler>:
void CAN1_RX0_IRQHandler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  HAL_CAN_IRQHandler(&hcan);
 8000780:	4802      	ldr	r0, [pc, #8]	; (800078c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000782:	f000 fe42 	bl	800140a <HAL_CAN_IRQHandler>
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	200000b4 	.word	0x200000b4

08000790 <CAN1_SCE_IRQHandler>:
void CAN1_SCE_IRQHandler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  HAL_CAN_IRQHandler(&hcan);
 8000794:	4802      	ldr	r0, [pc, #8]	; (80007a0 <CAN1_SCE_IRQHandler+0x10>)
 8000796:	f000 fe38 	bl	800140a <HAL_CAN_IRQHandler>
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200000b4 	.word	0x200000b4

080007a4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
 80007b4:	e00a      	b.n	80007cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007b6:	f3af 8000 	nop.w
 80007ba:	4601      	mov	r1, r0
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	1c5a      	adds	r2, r3, #1
 80007c0:	60ba      	str	r2, [r7, #8]
 80007c2:	b2ca      	uxtb	r2, r1
 80007c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	3301      	adds	r3, #1
 80007ca:	617b      	str	r3, [r7, #20]
 80007cc:	697a      	ldr	r2, [r7, #20]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	dbf0      	blt.n	80007b6 <_read+0x12>
  }

  return len;
 80007d4:	687b      	ldr	r3, [r7, #4]
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3718      	adds	r7, #24
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <_close>:
  }
  return len;
}

int _close(int file)
{
 80007de:	b480      	push	{r7}
 80007e0:	b083      	sub	sp, #12
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80007e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr

080007f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000804:	605a      	str	r2, [r3, #4]
  return 0;
 8000806:	2300      	movs	r3, #0
}
 8000808:	4618      	mov	r0, r3
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr

08000812 <_isatty>:

int _isatty(int file)
{
 8000812:	b480      	push	{r7}
 8000814:	b083      	sub	sp, #12
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800081a:	2301      	movs	r3, #1
}
 800081c:	4618      	mov	r0, r3
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	bc80      	pop	{r7}
 8000824:	4770      	bx	lr

08000826 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000826:	b480      	push	{r7}
 8000828:	b085      	sub	sp, #20
 800082a:	af00      	add	r7, sp, #0
 800082c:	60f8      	str	r0, [r7, #12]
 800082e:	60b9      	str	r1, [r7, #8]
 8000830:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000832:	2300      	movs	r3, #0
}
 8000834:	4618      	mov	r0, r3
 8000836:	3714      	adds	r7, #20
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr
	...

08000840 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000848:	4a14      	ldr	r2, [pc, #80]	; (800089c <_sbrk+0x5c>)
 800084a:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <_sbrk+0x60>)
 800084c:	1ad3      	subs	r3, r2, r3
 800084e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000854:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <_sbrk+0x64>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d102      	bne.n	8000862 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800085c:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <_sbrk+0x64>)
 800085e:	4a12      	ldr	r2, [pc, #72]	; (80008a8 <_sbrk+0x68>)
 8000860:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000862:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <_sbrk+0x64>)
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4413      	add	r3, r2
 800086a:	693a      	ldr	r2, [r7, #16]
 800086c:	429a      	cmp	r2, r3
 800086e:	d207      	bcs.n	8000880 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000870:	f003 fb9c 	bl	8003fac <__errno>
 8000874:	4603      	mov	r3, r0
 8000876:	220c      	movs	r2, #12
 8000878:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800087a:	f04f 33ff 	mov.w	r3, #4294967295
 800087e:	e009      	b.n	8000894 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000880:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <_sbrk+0x64>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000886:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <_sbrk+0x64>)
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4413      	add	r3, r2
 800088e:	4a05      	ldr	r2, [pc, #20]	; (80008a4 <_sbrk+0x64>)
 8000890:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000892:	68fb      	ldr	r3, [r7, #12]
}
 8000894:	4618      	mov	r0, r3
 8000896:	3718      	adds	r7, #24
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20005000 	.word	0x20005000
 80008a0:	00000400 	.word	0x00000400
 80008a4:	200000dc 	.word	0x200000dc
 80008a8:	200002c0 	.word	0x200002c0

080008ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr

080008b8 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008be:	f107 0308 	add.w	r3, r7, #8
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008cc:	463b      	mov	r3, r7
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008d4:	4b1d      	ldr	r3, [pc, #116]	; (800094c <MX_TIM3_Init+0x94>)
 80008d6:	4a1e      	ldr	r2, [pc, #120]	; (8000950 <MX_TIM3_Init+0x98>)
 80008d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80008da:	4b1c      	ldr	r3, [pc, #112]	; (800094c <MX_TIM3_Init+0x94>)
 80008dc:	2247      	movs	r2, #71	; 0x47
 80008de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e0:	4b1a      	ldr	r3, [pc, #104]	; (800094c <MX_TIM3_Init+0x94>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = Timer_Period -1;
 80008e6:	4b19      	ldr	r3, [pc, #100]	; (800094c <MX_TIM3_Init+0x94>)
 80008e8:	f241 3287 	movw	r2, #4999	; 0x1387
 80008ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ee:	4b17      	ldr	r3, [pc, #92]	; (800094c <MX_TIM3_Init+0x94>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f4:	4b15      	ldr	r3, [pc, #84]	; (800094c <MX_TIM3_Init+0x94>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008fa:	4814      	ldr	r0, [pc, #80]	; (800094c <MX_TIM3_Init+0x94>)
 80008fc:	f001 fef0 	bl	80026e0 <HAL_TIM_Base_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000906:	f7ff fec2 	bl	800068e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800090a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800090e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000910:	f107 0308 	add.w	r3, r7, #8
 8000914:	4619      	mov	r1, r3
 8000916:	480d      	ldr	r0, [pc, #52]	; (800094c <MX_TIM3_Init+0x94>)
 8000918:	f002 f88c 	bl	8002a34 <HAL_TIM_ConfigClockSource>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000922:	f7ff feb4 	bl	800068e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000926:	2300      	movs	r3, #0
 8000928:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800092e:	463b      	mov	r3, r7
 8000930:	4619      	mov	r1, r3
 8000932:	4806      	ldr	r0, [pc, #24]	; (800094c <MX_TIM3_Init+0x94>)
 8000934:	f002 fa62 	bl	8002dfc <HAL_TIMEx_MasterConfigSynchronization>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800093e:	f7ff fea6 	bl	800068e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	3718      	adds	r7, #24
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	200000e0 	.word	0x200000e0
 8000950:	40000400 	.word	0x40000400

08000954 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a0d      	ldr	r2, [pc, #52]	; (8000998 <HAL_TIM_Base_MspInit+0x44>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d113      	bne.n	800098e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000966:	4b0d      	ldr	r3, [pc, #52]	; (800099c <HAL_TIM_Base_MspInit+0x48>)
 8000968:	69db      	ldr	r3, [r3, #28]
 800096a:	4a0c      	ldr	r2, [pc, #48]	; (800099c <HAL_TIM_Base_MspInit+0x48>)
 800096c:	f043 0302 	orr.w	r3, r3, #2
 8000970:	61d3      	str	r3, [r2, #28]
 8000972:	4b0a      	ldr	r3, [pc, #40]	; (800099c <HAL_TIM_Base_MspInit+0x48>)
 8000974:	69db      	ldr	r3, [r3, #28]
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2100      	movs	r1, #0
 8000982:	201d      	movs	r0, #29
 8000984:	f001 f817 	bl	80019b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000988:	201d      	movs	r0, #29
 800098a:	f001 f830 	bl	80019ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800098e:	bf00      	nop
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40000400 	.word	0x40000400
 800099c:	40021000 	.word	0x40021000

080009a0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009a6:	4a12      	ldr	r2, [pc, #72]	; (80009f0 <MX_USART2_UART_Init+0x50>)
 80009a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009c6:	220c      	movs	r2, #12
 80009c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009d8:	f002 fa80 	bl	8002edc <HAL_UART_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009e2:	f7ff fe54 	bl	800068e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000128 	.word	0x20000128
 80009f0:	40004400 	.word	0x40004400

080009f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b088      	sub	sp, #32
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	f107 0310 	add.w	r3, r7, #16
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a1f      	ldr	r2, [pc, #124]	; (8000a8c <HAL_UART_MspInit+0x98>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d137      	bne.n	8000a84 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a14:	4b1e      	ldr	r3, [pc, #120]	; (8000a90 <HAL_UART_MspInit+0x9c>)
 8000a16:	69db      	ldr	r3, [r3, #28]
 8000a18:	4a1d      	ldr	r2, [pc, #116]	; (8000a90 <HAL_UART_MspInit+0x9c>)
 8000a1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a1e:	61d3      	str	r3, [r2, #28]
 8000a20:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <HAL_UART_MspInit+0x9c>)
 8000a22:	69db      	ldr	r3, [r3, #28]
 8000a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2c:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <HAL_UART_MspInit+0x9c>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	4a17      	ldr	r2, [pc, #92]	; (8000a90 <HAL_UART_MspInit+0x9c>)
 8000a32:	f043 0304 	orr.w	r3, r3, #4
 8000a36:	6193      	str	r3, [r2, #24]
 8000a38:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <HAL_UART_MspInit+0x9c>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	f003 0304 	and.w	r3, r3, #4
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a44:	2304      	movs	r3, #4
 8000a46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a50:	f107 0310 	add.w	r3, r7, #16
 8000a54:	4619      	mov	r1, r3
 8000a56:	480f      	ldr	r0, [pc, #60]	; (8000a94 <HAL_UART_MspInit+0xa0>)
 8000a58:	f001 f896 	bl	8001b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a5c:	2308      	movs	r3, #8
 8000a5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a68:	f107 0310 	add.w	r3, r7, #16
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4809      	ldr	r0, [pc, #36]	; (8000a94 <HAL_UART_MspInit+0xa0>)
 8000a70:	f001 f88a 	bl	8001b88 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2100      	movs	r1, #0
 8000a78:	2026      	movs	r0, #38	; 0x26
 8000a7a:	f000 ff9c 	bl	80019b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a7e:	2026      	movs	r0, #38	; 0x26
 8000a80:	f000 ffb5 	bl	80019ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a84:	bf00      	nop
 8000a86:	3720      	adds	r7, #32
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40004400 	.word	0x40004400
 8000a90:	40021000 	.word	0x40021000
 8000a94:	40010800 	.word	0x40010800

08000a98 <_write>:
}

/* USER CODE BEGIN 1 */
#if defined(__GNUC__)
int _write(int fd, char *ptr, int len)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, UART_Delay);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	b29a      	uxth	r2, r3
 8000aa8:	230a      	movs	r3, #10
 8000aaa:	68b9      	ldr	r1, [r7, #8]
 8000aac:	4803      	ldr	r0, [pc, #12]	; (8000abc <_write+0x24>)
 8000aae:	f002 fa65 	bl	8002f7c <HAL_UART_Transmit>
  return len;
 8000ab2:	687b      	ldr	r3, [r7, #4]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000128 	.word	0x20000128

08000ac0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ac0:	f7ff fef4 	bl	80008ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
   ldr r0, =_sdata
 8000ac4:	480b      	ldr	r0, [pc, #44]	; (8000af4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ac6:	490c      	ldr	r1, [pc, #48]	; (8000af8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ac8:	4a0c      	ldr	r2, [pc, #48]	; (8000afc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000acc:	e002      	b.n	8000ad4 <LoopCopyDataInit>

08000ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad2:	3304      	adds	r3, #4

08000ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad8:	d3f9      	bcc.n	8000ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ada:	4a09      	ldr	r2, [pc, #36]	; (8000b00 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000adc:	4c09      	ldr	r4, [pc, #36]	; (8000b04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae0:	e001      	b.n	8000ae6 <LoopFillZerobss>

08000ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae4:	3204      	adds	r2, #4

08000ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae8:	d3fb      	bcc.n	8000ae2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aea:	f003 fa65 	bl	8003fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aee:	f7ff fd6b 	bl	80005c8 <main>
  bx lr
 8000af2:	4770      	bx	lr
   ldr r0, =_sdata
 8000af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000afc:	08004b38 	.word	0x08004b38
  ldr r2, =_sbss
 8000b00:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b04:	200002c0 	.word	0x200002c0

08000b08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b08:	e7fe      	b.n	8000b08 <ADC1_2_IRQHandler>
	...

08000b0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <HAL_Init+0x28>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a07      	ldr	r2, [pc, #28]	; (8000b34 <HAL_Init+0x28>)
 8000b16:	f043 0310 	orr.w	r3, r3, #16
 8000b1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b1c:	2003      	movs	r0, #3
 8000b1e:	f000 ff3f 	bl	80019a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b22:	200f      	movs	r0, #15
 8000b24:	f000 f808 	bl	8000b38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b28:	f7ff fdb6 	bl	8000698 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40022000 	.word	0x40022000

08000b38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <HAL_InitTick+0x54>)
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <HAL_InitTick+0x58>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b56:	4618      	mov	r0, r3
 8000b58:	f000 ff57 	bl	8001a0a <HAL_SYSTICK_Config>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	e00e      	b.n	8000b84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2b0f      	cmp	r3, #15
 8000b6a:	d80a      	bhi.n	8000b82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	6879      	ldr	r1, [r7, #4]
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	f000 ff1f 	bl	80019b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b78:	4a06      	ldr	r2, [pc, #24]	; (8000b94 <HAL_InitTick+0x5c>)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	e000      	b.n	8000b84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000008 	.word	0x20000008
 8000b90:	20000010 	.word	0x20000010
 8000b94:	2000000c 	.word	0x2000000c

08000b98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b9c:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <HAL_IncTick+0x1c>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <HAL_IncTick+0x20>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	4a03      	ldr	r2, [pc, #12]	; (8000bb8 <HAL_IncTick+0x20>)
 8000baa:	6013      	str	r3, [r2, #0]
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr
 8000bb4:	20000010 	.word	0x20000010
 8000bb8:	20000170 	.word	0x20000170

08000bbc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc0:	4b02      	ldr	r3, [pc, #8]	; (8000bcc <HAL_GetTick+0x10>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr
 8000bcc:	20000170 	.word	0x20000170

08000bd0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d101      	bne.n	8000be2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	e0ed      	b.n	8000dbe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d102      	bne.n	8000bf4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f7ff fb06 	bl	8000200 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f042 0201 	orr.w	r2, r2, #1
 8000c02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c04:	f7ff ffda 	bl	8000bbc <HAL_GetTick>
 8000c08:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c0a:	e012      	b.n	8000c32 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c0c:	f7ff ffd6 	bl	8000bbc <HAL_GetTick>
 8000c10:	4602      	mov	r2, r0
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	2b0a      	cmp	r3, #10
 8000c18:	d90b      	bls.n	8000c32 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c1e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2205      	movs	r2, #5
 8000c2a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e0c5      	b.n	8000dbe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f003 0301 	and.w	r3, r3, #1
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d0e5      	beq.n	8000c0c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f022 0202 	bic.w	r2, r2, #2
 8000c4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c50:	f7ff ffb4 	bl	8000bbc <HAL_GetTick>
 8000c54:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c56:	e012      	b.n	8000c7e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c58:	f7ff ffb0 	bl	8000bbc <HAL_GetTick>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	2b0a      	cmp	r3, #10
 8000c64:	d90b      	bls.n	8000c7e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c6a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2205      	movs	r2, #5
 8000c76:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e09f      	b.n	8000dbe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f003 0302 	and.w	r3, r3, #2
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d1e5      	bne.n	8000c58 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	7e1b      	ldrb	r3, [r3, #24]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d108      	bne.n	8000ca6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	e007      	b.n	8000cb6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000cb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	7e5b      	ldrb	r3, [r3, #25]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d108      	bne.n	8000cd0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	e007      	b.n	8000ce0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000cde:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	7e9b      	ldrb	r3, [r3, #26]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d108      	bne.n	8000cfa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f042 0220 	orr.w	r2, r2, #32
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	e007      	b.n	8000d0a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f022 0220 	bic.w	r2, r2, #32
 8000d08:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	7edb      	ldrb	r3, [r3, #27]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d108      	bne.n	8000d24 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f022 0210 	bic.w	r2, r2, #16
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	e007      	b.n	8000d34 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f042 0210 	orr.w	r2, r2, #16
 8000d32:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	7f1b      	ldrb	r3, [r3, #28]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d108      	bne.n	8000d4e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f042 0208 	orr.w	r2, r2, #8
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	e007      	b.n	8000d5e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f022 0208 	bic.w	r2, r2, #8
 8000d5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	7f5b      	ldrb	r3, [r3, #29]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d108      	bne.n	8000d78 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f042 0204 	orr.w	r2, r2, #4
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	e007      	b.n	8000d88 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f022 0204 	bic.w	r2, r2, #4
 8000d86:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	689a      	ldr	r2, [r3, #8]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	431a      	orrs	r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	691b      	ldr	r3, [r3, #16]
 8000d96:	431a      	orrs	r2, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	695b      	ldr	r3, [r3, #20]
 8000d9c:	ea42 0103 	orr.w	r1, r2, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	1e5a      	subs	r2, r3, #1
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	430a      	orrs	r2, r1
 8000dac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2200      	movs	r2, #0
 8000db2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2201      	movs	r2, #1
 8000db8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	b087      	sub	sp, #28
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
 8000dce:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ddc:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000dde:	7cfb      	ldrb	r3, [r7, #19]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d003      	beq.n	8000dec <HAL_CAN_ConfigFilter+0x26>
 8000de4:	7cfb      	ldrb	r3, [r7, #19]
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	f040 80aa 	bne.w	8000f40 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000df2:	f043 0201 	orr.w	r2, r3, #1
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	695b      	ldr	r3, [r3, #20]
 8000e00:	f003 031f 	and.w	r3, r3, #31
 8000e04:	2201      	movs	r2, #1
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	43db      	mvns	r3, r3
 8000e16:	401a      	ands	r2, r3
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	69db      	ldr	r3, [r3, #28]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d123      	bne.n	8000e6e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	401a      	ands	r2, r3
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e44:	683a      	ldr	r2, [r7, #0]
 8000e46:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000e48:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	3248      	adds	r2, #72	; 0x48
 8000e4e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e62:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e64:	6979      	ldr	r1, [r7, #20]
 8000e66:	3348      	adds	r3, #72	; 0x48
 8000e68:	00db      	lsls	r3, r3, #3
 8000e6a:	440b      	add	r3, r1
 8000e6c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	69db      	ldr	r3, [r3, #28]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d122      	bne.n	8000ebc <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	431a      	orrs	r2, r3
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e92:	683a      	ldr	r2, [r7, #0]
 8000e94:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e96:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	3248      	adds	r2, #72	; 0x48
 8000e9c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000eb0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000eb2:	6979      	ldr	r1, [r7, #20]
 8000eb4:	3348      	adds	r3, #72	; 0x48
 8000eb6:	00db      	lsls	r3, r3, #3
 8000eb8:	440b      	add	r3, r1
 8000eba:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d109      	bne.n	8000ed8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	401a      	ands	r2, r3
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000ed6:	e007      	b.n	8000ee8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	431a      	orrs	r2, r3
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	691b      	ldr	r3, [r3, #16]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d109      	bne.n	8000f04 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	401a      	ands	r2, r3
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000f02:	e007      	b.n	8000f14 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	431a      	orrs	r2, r3
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	6a1b      	ldr	r3, [r3, #32]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d107      	bne.n	8000f2c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	431a      	orrs	r2, r3
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f32:	f023 0201 	bic.w	r2, r3, #1
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	e006      	b.n	8000f4e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f44:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
  }
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	371c      	adds	r7, #28
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr

08000f58 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d12e      	bne.n	8000fca <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2202      	movs	r2, #2
 8000f70:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f022 0201 	bic.w	r2, r2, #1
 8000f82:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000f84:	f7ff fe1a 	bl	8000bbc <HAL_GetTick>
 8000f88:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f8a:	e012      	b.n	8000fb2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f8c:	f7ff fe16 	bl	8000bbc <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	2b0a      	cmp	r3, #10
 8000f98:	d90b      	bls.n	8000fb2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2205      	movs	r2, #5
 8000faa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e012      	b.n	8000fd8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d1e5      	bne.n	8000f8c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	e006      	b.n	8000fd8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
  }
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b089      	sub	sp, #36	; 0x24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
 8000fec:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ff4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ffe:	7ffb      	ldrb	r3, [r7, #31]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d003      	beq.n	800100c <HAL_CAN_AddTxMessage+0x2c>
 8001004:	7ffb      	ldrb	r3, [r7, #31]
 8001006:	2b02      	cmp	r3, #2
 8001008:	f040 80ad 	bne.w	8001166 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d10a      	bne.n	800102c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800101c:	2b00      	cmp	r3, #0
 800101e:	d105      	bne.n	800102c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001026:	2b00      	cmp	r3, #0
 8001028:	f000 8095 	beq.w	8001156 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	0e1b      	lsrs	r3, r3, #24
 8001030:	f003 0303 	and.w	r3, r3, #3
 8001034:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001036:	2201      	movs	r2, #1
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	409a      	lsls	r2, r3
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d10d      	bne.n	8001064 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001052:	68f9      	ldr	r1, [r7, #12]
 8001054:	6809      	ldr	r1, [r1, #0]
 8001056:	431a      	orrs	r2, r3
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	3318      	adds	r3, #24
 800105c:	011b      	lsls	r3, r3, #4
 800105e:	440b      	add	r3, r1
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	e00f      	b.n	8001084 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800106e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001074:	68f9      	ldr	r1, [r7, #12]
 8001076:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001078:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	3318      	adds	r3, #24
 800107e:	011b      	lsls	r3, r3, #4
 8001080:	440b      	add	r3, r1
 8001082:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	6819      	ldr	r1, [r3, #0]
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	691a      	ldr	r2, [r3, #16]
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	3318      	adds	r3, #24
 8001090:	011b      	lsls	r3, r3, #4
 8001092:	440b      	add	r3, r1
 8001094:	3304      	adds	r3, #4
 8001096:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	7d1b      	ldrb	r3, [r3, #20]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d111      	bne.n	80010c4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	3318      	adds	r3, #24
 80010a8:	011b      	lsls	r3, r3, #4
 80010aa:	4413      	add	r3, r2
 80010ac:	3304      	adds	r3, #4
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	6811      	ldr	r1, [r2, #0]
 80010b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	3318      	adds	r3, #24
 80010bc:	011b      	lsls	r3, r3, #4
 80010be:	440b      	add	r3, r1
 80010c0:	3304      	adds	r3, #4
 80010c2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3307      	adds	r3, #7
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	061a      	lsls	r2, r3, #24
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3306      	adds	r3, #6
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	041b      	lsls	r3, r3, #16
 80010d4:	431a      	orrs	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3305      	adds	r3, #5
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	021b      	lsls	r3, r3, #8
 80010de:	4313      	orrs	r3, r2
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	3204      	adds	r2, #4
 80010e4:	7812      	ldrb	r2, [r2, #0]
 80010e6:	4610      	mov	r0, r2
 80010e8:	68fa      	ldr	r2, [r7, #12]
 80010ea:	6811      	ldr	r1, [r2, #0]
 80010ec:	ea43 0200 	orr.w	r2, r3, r0
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	011b      	lsls	r3, r3, #4
 80010f4:	440b      	add	r3, r1
 80010f6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80010fa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3303      	adds	r3, #3
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	061a      	lsls	r2, r3, #24
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3302      	adds	r3, #2
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	041b      	lsls	r3, r3, #16
 800110c:	431a      	orrs	r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3301      	adds	r3, #1
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	021b      	lsls	r3, r3, #8
 8001116:	4313      	orrs	r3, r2
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	7812      	ldrb	r2, [r2, #0]
 800111c:	4610      	mov	r0, r2
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	6811      	ldr	r1, [r2, #0]
 8001122:	ea43 0200 	orr.w	r2, r3, r0
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	011b      	lsls	r3, r3, #4
 800112a:	440b      	add	r3, r1
 800112c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001130:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	3318      	adds	r3, #24
 800113a:	011b      	lsls	r3, r3, #4
 800113c:	4413      	add	r3, r2
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	6811      	ldr	r1, [r2, #0]
 8001144:	f043 0201 	orr.w	r2, r3, #1
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	3318      	adds	r3, #24
 800114c:	011b      	lsls	r3, r3, #4
 800114e:	440b      	add	r3, r1
 8001150:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001152:	2300      	movs	r3, #0
 8001154:	e00e      	b.n	8001174 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e006      	b.n	8001174 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
  }
}
 8001174:	4618      	mov	r0, r3
 8001176:	3724      	adds	r7, #36	; 0x24
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr

0800117e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800117e:	b480      	push	{r7}
 8001180:	b087      	sub	sp, #28
 8001182:	af00      	add	r7, sp, #0
 8001184:	60f8      	str	r0, [r7, #12]
 8001186:	60b9      	str	r1, [r7, #8]
 8001188:	607a      	str	r2, [r7, #4]
 800118a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001192:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001194:	7dfb      	ldrb	r3, [r7, #23]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d003      	beq.n	80011a2 <HAL_CAN_GetRxMessage+0x24>
 800119a:	7dfb      	ldrb	r3, [r7, #23]
 800119c:	2b02      	cmp	r3, #2
 800119e:	f040 8103 	bne.w	80013a8 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d10e      	bne.n	80011c6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	f003 0303 	and.w	r3, r3, #3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d116      	bne.n	80011e4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e0f7      	b.n	80013b6 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	691b      	ldr	r3, [r3, #16]
 80011cc:	f003 0303 	and.w	r3, r3, #3
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d107      	bne.n	80011e4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e0e8      	b.n	80013b6 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	331b      	adds	r3, #27
 80011ec:	011b      	lsls	r3, r3, #4
 80011ee:	4413      	add	r3, r2
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0204 	and.w	r2, r3, #4
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d10c      	bne.n	800121c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	331b      	adds	r3, #27
 800120a:	011b      	lsls	r3, r3, #4
 800120c:	4413      	add	r3, r2
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	0d5b      	lsrs	r3, r3, #21
 8001212:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	e00b      	b.n	8001234 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	331b      	adds	r3, #27
 8001224:	011b      	lsls	r3, r3, #4
 8001226:	4413      	add	r3, r2
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	08db      	lsrs	r3, r3, #3
 800122c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	331b      	adds	r3, #27
 800123c:	011b      	lsls	r3, r3, #4
 800123e:	4413      	add	r3, r2
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0202 	and.w	r2, r3, #2
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	331b      	adds	r3, #27
 8001252:	011b      	lsls	r3, r3, #4
 8001254:	4413      	add	r3, r2
 8001256:	3304      	adds	r3, #4
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0308 	and.w	r3, r3, #8
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2208      	movs	r2, #8
 8001266:	611a      	str	r2, [r3, #16]
 8001268:	e00b      	b.n	8001282 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	331b      	adds	r3, #27
 8001272:	011b      	lsls	r3, r3, #4
 8001274:	4413      	add	r3, r2
 8001276:	3304      	adds	r3, #4
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 020f 	and.w	r2, r3, #15
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	331b      	adds	r3, #27
 800128a:	011b      	lsls	r3, r3, #4
 800128c:	4413      	add	r3, r2
 800128e:	3304      	adds	r3, #4
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	0a1b      	lsrs	r3, r3, #8
 8001294:	b2da      	uxtb	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	331b      	adds	r3, #27
 80012a2:	011b      	lsls	r3, r3, #4
 80012a4:	4413      	add	r3, r2
 80012a6:	3304      	adds	r3, #4
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	0c1b      	lsrs	r3, r3, #16
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	011b      	lsls	r3, r3, #4
 80012ba:	4413      	add	r3, r2
 80012bc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	011b      	lsls	r3, r3, #4
 80012d0:	4413      	add	r3, r2
 80012d2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	0a1a      	lsrs	r2, r3, #8
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	3301      	adds	r3, #1
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	011b      	lsls	r3, r3, #4
 80012ea:	4413      	add	r3, r2
 80012ec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	0c1a      	lsrs	r2, r3, #16
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	3302      	adds	r3, #2
 80012f8:	b2d2      	uxtb	r2, r2
 80012fa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	011b      	lsls	r3, r3, #4
 8001304:	4413      	add	r3, r2
 8001306:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	0e1a      	lsrs	r2, r3, #24
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	3303      	adds	r3, #3
 8001312:	b2d2      	uxtb	r2, r2
 8001314:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	011b      	lsls	r3, r3, #4
 800131e:	4413      	add	r3, r2
 8001320:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	3304      	adds	r3, #4
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	011b      	lsls	r3, r3, #4
 8001336:	4413      	add	r3, r2
 8001338:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	0a1a      	lsrs	r2, r3, #8
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	3305      	adds	r3, #5
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	011b      	lsls	r3, r3, #4
 8001350:	4413      	add	r3, r2
 8001352:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	0c1a      	lsrs	r2, r3, #16
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	3306      	adds	r3, #6
 800135e:	b2d2      	uxtb	r2, r2
 8001360:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	011b      	lsls	r3, r3, #4
 800136a:	4413      	add	r3, r2
 800136c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	0e1a      	lsrs	r2, r3, #24
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	3307      	adds	r3, #7
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d108      	bne.n	8001394 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	68da      	ldr	r2, [r3, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f042 0220 	orr.w	r2, r2, #32
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	e007      	b.n	80013a4 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	691a      	ldr	r2, [r3, #16]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f042 0220 	orr.w	r2, r2, #32
 80013a2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80013a4:	2300      	movs	r3, #0
 80013a6:	e006      	b.n	80013b6 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
  }
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	371c      	adds	r7, #28
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr

080013c0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013d0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d002      	beq.n	80013de <HAL_CAN_ActivateNotification+0x1e>
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d109      	bne.n	80013f2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	6959      	ldr	r1, [r3, #20]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	430a      	orrs	r2, r1
 80013ec:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80013ee:	2300      	movs	r3, #0
 80013f0:	e006      	b.n	8001400 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
  }
}
 8001400:	4618      	mov	r0, r3
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr

0800140a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b08a      	sub	sp, #40	; 0x28
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001412:	2300      	movs	r3, #0
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	695b      	ldr	r3, [r3, #20]
 800141c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001446:	6a3b      	ldr	r3, [r7, #32]
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	2b00      	cmp	r3, #0
 800144e:	d07c      	beq.n	800154a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	2b00      	cmp	r3, #0
 8001458:	d023      	beq.n	80014a2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2201      	movs	r2, #1
 8001460:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d003      	beq.n	8001474 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff f81f 	bl	80004b0 <HAL_CAN_TxMailbox0CompleteCallback>
 8001472:	e016      	b.n	80014a2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	f003 0304 	and.w	r3, r3, #4
 800147a:	2b00      	cmp	r3, #0
 800147c:	d004      	beq.n	8001488 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
 8001486:	e00c      	b.n	80014a2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	2b00      	cmp	r3, #0
 8001490:	d004      	beq.n	800149c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
 800149a:	e002      	b.n	80014a2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f000 f96b 	bl	8001778 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d024      	beq.n	80014f6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d003      	beq.n	80014c8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff f803 	bl	80004cc <HAL_CAN_TxMailbox1CompleteCallback>
 80014c6:	e016      	b.n	80014f6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d004      	beq.n	80014dc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80014d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
 80014da:	e00c      	b.n	80014f6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d004      	beq.n	80014f0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80014e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
 80014ee:	e002      	b.n	80014f6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f000 f94a 	bl	800178a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d024      	beq.n	800154a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001508:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d003      	beq.n	800151c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7fe ffe7 	bl	80004e8 <HAL_CAN_TxMailbox2CompleteCallback>
 800151a:	e016      	b.n	800154a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d004      	beq.n	8001530 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001528:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
 800152e:	e00c      	b.n	800154a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d004      	beq.n	8001544 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
 8001542:	e002      	b.n	800154a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f000 f929 	bl	800179c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800154a:	6a3b      	ldr	r3, [r7, #32]
 800154c:	f003 0308 	and.w	r3, r3, #8
 8001550:	2b00      	cmp	r3, #0
 8001552:	d00c      	beq.n	800156e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	f003 0310 	and.w	r3, r3, #16
 800155a:	2b00      	cmp	r3, #0
 800155c:	d007      	beq.n	800156e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800155e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001560:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001564:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2210      	movs	r2, #16
 800156c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800156e:	6a3b      	ldr	r3, [r7, #32]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	2b00      	cmp	r3, #0
 8001576:	d00b      	beq.n	8001590 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	f003 0308 	and.w	r3, r3, #8
 800157e:	2b00      	cmp	r3, #0
 8001580:	d006      	beq.n	8001590 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2208      	movs	r2, #8
 8001588:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f000 f90f 	bl	80017ae <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001590:	6a3b      	ldr	r3, [r7, #32]
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d009      	beq.n	80015ae <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	f003 0303 	and.w	r3, r3, #3
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d002      	beq.n	80015ae <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7fe ff25 	bl	80003f8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80015ae:	6a3b      	ldr	r3, [r7, #32]
 80015b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d00c      	beq.n	80015d2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	f003 0310 	and.w	r3, r3, #16
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d007      	beq.n	80015d2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2210      	movs	r2, #16
 80015d0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80015d2:	6a3b      	ldr	r3, [r7, #32]
 80015d4:	f003 0320 	and.w	r3, r3, #32
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d00b      	beq.n	80015f4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	f003 0308 	and.w	r3, r3, #8
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d006      	beq.n	80015f4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2208      	movs	r2, #8
 80015ec:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 f8e6 	bl	80017c0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80015f4:	6a3b      	ldr	r3, [r7, #32]
 80015f6:	f003 0310 	and.w	r3, r3, #16
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d009      	beq.n	8001612 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	691b      	ldr	r3, [r3, #16]
 8001604:	f003 0303 	and.w	r3, r3, #3
 8001608:	2b00      	cmp	r3, #0
 800160a:	d002      	beq.n	8001612 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7fe ff21 	bl	8000454 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001612:	6a3b      	ldr	r3, [r7, #32]
 8001614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d00b      	beq.n	8001634 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	f003 0310 	and.w	r3, r3, #16
 8001622:	2b00      	cmp	r3, #0
 8001624:	d006      	beq.n	8001634 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2210      	movs	r2, #16
 800162c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f000 f8cf 	bl	80017d2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001634:	6a3b      	ldr	r3, [r7, #32]
 8001636:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d00b      	beq.n	8001656 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	f003 0308 	and.w	r3, r3, #8
 8001644:	2b00      	cmp	r3, #0
 8001646:	d006      	beq.n	8001656 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2208      	movs	r2, #8
 800164e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f000 f8c7 	bl	80017e4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001656:	6a3b      	ldr	r3, [r7, #32]
 8001658:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d07b      	beq.n	8001758 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	2b00      	cmp	r3, #0
 8001668:	d072      	beq.n	8001750 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800166a:	6a3b      	ldr	r3, [r7, #32]
 800166c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001670:	2b00      	cmp	r3, #0
 8001672:	d008      	beq.n	8001686 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001686:	6a3b      	ldr	r3, [r7, #32]
 8001688:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800168c:	2b00      	cmp	r3, #0
 800168e:	d008      	beq.n	80016a2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	f043 0302 	orr.w	r3, r3, #2
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80016a2:	6a3b      	ldr	r3, [r7, #32]
 80016a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d008      	beq.n	80016be <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80016b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b8:	f043 0304 	orr.w	r3, r3, #4
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80016be:	6a3b      	ldr	r3, [r7, #32]
 80016c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d043      	beq.n	8001750 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d03e      	beq.n	8001750 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80016d8:	2b60      	cmp	r3, #96	; 0x60
 80016da:	d02b      	beq.n	8001734 <HAL_CAN_IRQHandler+0x32a>
 80016dc:	2b60      	cmp	r3, #96	; 0x60
 80016de:	d82e      	bhi.n	800173e <HAL_CAN_IRQHandler+0x334>
 80016e0:	2b50      	cmp	r3, #80	; 0x50
 80016e2:	d022      	beq.n	800172a <HAL_CAN_IRQHandler+0x320>
 80016e4:	2b50      	cmp	r3, #80	; 0x50
 80016e6:	d82a      	bhi.n	800173e <HAL_CAN_IRQHandler+0x334>
 80016e8:	2b40      	cmp	r3, #64	; 0x40
 80016ea:	d019      	beq.n	8001720 <HAL_CAN_IRQHandler+0x316>
 80016ec:	2b40      	cmp	r3, #64	; 0x40
 80016ee:	d826      	bhi.n	800173e <HAL_CAN_IRQHandler+0x334>
 80016f0:	2b30      	cmp	r3, #48	; 0x30
 80016f2:	d010      	beq.n	8001716 <HAL_CAN_IRQHandler+0x30c>
 80016f4:	2b30      	cmp	r3, #48	; 0x30
 80016f6:	d822      	bhi.n	800173e <HAL_CAN_IRQHandler+0x334>
 80016f8:	2b10      	cmp	r3, #16
 80016fa:	d002      	beq.n	8001702 <HAL_CAN_IRQHandler+0x2f8>
 80016fc:	2b20      	cmp	r3, #32
 80016fe:	d005      	beq.n	800170c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001700:	e01d      	b.n	800173e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	f043 0308 	orr.w	r3, r3, #8
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800170a:	e019      	b.n	8001740 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	f043 0310 	orr.w	r3, r3, #16
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001714:	e014      	b.n	8001740 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	f043 0320 	orr.w	r3, r3, #32
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800171e:	e00f      	b.n	8001740 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001722:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001728:	e00a      	b.n	8001740 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001732:	e005      	b.n	8001740 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800173c:	e000      	b.n	8001740 <HAL_CAN_IRQHandler+0x336>
            break;
 800173e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	699a      	ldr	r2, [r3, #24]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800174e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2204      	movs	r2, #4
 8001756:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	2b00      	cmp	r3, #0
 800175c:	d008      	beq.n	8001770 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	431a      	orrs	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 f843 	bl	80017f6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001770:	bf00      	nop
 8001772:	3728      	adds	r7, #40	; 0x28
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr

0800178a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr

0800179c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr

080017ae <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b083      	sub	sp, #12
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr

080017d2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b083      	sub	sp, #12
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr

080017e4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr

080017f6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr

08001808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <__NVIC_SetPriorityGrouping+0x44>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001824:	4013      	ands	r3, r2
 8001826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001830:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800183a:	4a04      	ldr	r2, [pc, #16]	; (800184c <__NVIC_SetPriorityGrouping+0x44>)
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	60d3      	str	r3, [r2, #12]
}
 8001840:	bf00      	nop
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001854:	4b04      	ldr	r3, [pc, #16]	; (8001868 <__NVIC_GetPriorityGrouping+0x18>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	0a1b      	lsrs	r3, r3, #8
 800185a:	f003 0307 	and.w	r3, r3, #7
}
 800185e:	4618      	mov	r0, r3
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187a:	2b00      	cmp	r3, #0
 800187c:	db0b      	blt.n	8001896 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	f003 021f 	and.w	r2, r3, #31
 8001884:	4906      	ldr	r1, [pc, #24]	; (80018a0 <__NVIC_EnableIRQ+0x34>)
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188a:	095b      	lsrs	r3, r3, #5
 800188c:	2001      	movs	r0, #1
 800188e:	fa00 f202 	lsl.w	r2, r0, r2
 8001892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr
 80018a0:	e000e100 	.word	0xe000e100

080018a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	6039      	str	r1, [r7, #0]
 80018ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	db0a      	blt.n	80018ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	490c      	ldr	r1, [pc, #48]	; (80018f0 <__NVIC_SetPriority+0x4c>)
 80018be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c2:	0112      	lsls	r2, r2, #4
 80018c4:	b2d2      	uxtb	r2, r2
 80018c6:	440b      	add	r3, r1
 80018c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018cc:	e00a      	b.n	80018e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	4908      	ldr	r1, [pc, #32]	; (80018f4 <__NVIC_SetPriority+0x50>)
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	3b04      	subs	r3, #4
 80018dc:	0112      	lsls	r2, r2, #4
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	440b      	add	r3, r1
 80018e2:	761a      	strb	r2, [r3, #24]
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	e000e100 	.word	0xe000e100
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b089      	sub	sp, #36	; 0x24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	f1c3 0307 	rsb	r3, r3, #7
 8001912:	2b04      	cmp	r3, #4
 8001914:	bf28      	it	cs
 8001916:	2304      	movcs	r3, #4
 8001918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	3304      	adds	r3, #4
 800191e:	2b06      	cmp	r3, #6
 8001920:	d902      	bls.n	8001928 <NVIC_EncodePriority+0x30>
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	3b03      	subs	r3, #3
 8001926:	e000      	b.n	800192a <NVIC_EncodePriority+0x32>
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800192c:	f04f 32ff 	mov.w	r2, #4294967295
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	43da      	mvns	r2, r3
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	401a      	ands	r2, r3
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001940:	f04f 31ff 	mov.w	r1, #4294967295
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	fa01 f303 	lsl.w	r3, r1, r3
 800194a:	43d9      	mvns	r1, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001950:	4313      	orrs	r3, r2
         );
}
 8001952:	4618      	mov	r0, r3
 8001954:	3724      	adds	r7, #36	; 0x24
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr

0800195c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3b01      	subs	r3, #1
 8001968:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800196c:	d301      	bcc.n	8001972 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800196e:	2301      	movs	r3, #1
 8001970:	e00f      	b.n	8001992 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001972:	4a0a      	ldr	r2, [pc, #40]	; (800199c <SysTick_Config+0x40>)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3b01      	subs	r3, #1
 8001978:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800197a:	210f      	movs	r1, #15
 800197c:	f04f 30ff 	mov.w	r0, #4294967295
 8001980:	f7ff ff90 	bl	80018a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001984:	4b05      	ldr	r3, [pc, #20]	; (800199c <SysTick_Config+0x40>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800198a:	4b04      	ldr	r3, [pc, #16]	; (800199c <SysTick_Config+0x40>)
 800198c:	2207      	movs	r2, #7
 800198e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	e000e010 	.word	0xe000e010

080019a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7ff ff2d 	bl	8001808 <__NVIC_SetPriorityGrouping>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b086      	sub	sp, #24
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	4603      	mov	r3, r0
 80019be:	60b9      	str	r1, [r7, #8]
 80019c0:	607a      	str	r2, [r7, #4]
 80019c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019c8:	f7ff ff42 	bl	8001850 <__NVIC_GetPriorityGrouping>
 80019cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	68b9      	ldr	r1, [r7, #8]
 80019d2:	6978      	ldr	r0, [r7, #20]
 80019d4:	f7ff ff90 	bl	80018f8 <NVIC_EncodePriority>
 80019d8:	4602      	mov	r2, r0
 80019da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019de:	4611      	mov	r1, r2
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff ff5f 	bl	80018a4 <__NVIC_SetPriority>
}
 80019e6:	bf00      	nop
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b082      	sub	sp, #8
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	4603      	mov	r3, r0
 80019f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ff35 	bl	800186c <__NVIC_EnableIRQ>
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff ffa2 	bl	800195c <SysTick_Config>
 8001a18:	4603      	mov	r3, r0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b085      	sub	sp, #20
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d008      	beq.n	8001a4c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2204      	movs	r2, #4
 8001a3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e020      	b.n	8001a8e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 020e 	bic.w	r2, r2, #14
 8001a5a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 0201 	bic.w	r2, r2, #1
 8001a6a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a74:	2101      	movs	r1, #1
 8001a76:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3714      	adds	r7, #20
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr

08001a98 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d005      	beq.n	8001abc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2204      	movs	r2, #4
 8001ab4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	73fb      	strb	r3, [r7, #15]
 8001aba:	e051      	b.n	8001b60 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 020e 	bic.w	r2, r2, #14
 8001aca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 0201 	bic.w	r2, r2, #1
 8001ada:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a22      	ldr	r2, [pc, #136]	; (8001b6c <HAL_DMA_Abort_IT+0xd4>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d029      	beq.n	8001b3a <HAL_DMA_Abort_IT+0xa2>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a21      	ldr	r2, [pc, #132]	; (8001b70 <HAL_DMA_Abort_IT+0xd8>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d022      	beq.n	8001b36 <HAL_DMA_Abort_IT+0x9e>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a1f      	ldr	r2, [pc, #124]	; (8001b74 <HAL_DMA_Abort_IT+0xdc>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d01a      	beq.n	8001b30 <HAL_DMA_Abort_IT+0x98>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a1e      	ldr	r2, [pc, #120]	; (8001b78 <HAL_DMA_Abort_IT+0xe0>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d012      	beq.n	8001b2a <HAL_DMA_Abort_IT+0x92>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a1c      	ldr	r2, [pc, #112]	; (8001b7c <HAL_DMA_Abort_IT+0xe4>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d00a      	beq.n	8001b24 <HAL_DMA_Abort_IT+0x8c>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a1b      	ldr	r2, [pc, #108]	; (8001b80 <HAL_DMA_Abort_IT+0xe8>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d102      	bne.n	8001b1e <HAL_DMA_Abort_IT+0x86>
 8001b18:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b1c:	e00e      	b.n	8001b3c <HAL_DMA_Abort_IT+0xa4>
 8001b1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b22:	e00b      	b.n	8001b3c <HAL_DMA_Abort_IT+0xa4>
 8001b24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b28:	e008      	b.n	8001b3c <HAL_DMA_Abort_IT+0xa4>
 8001b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b2e:	e005      	b.n	8001b3c <HAL_DMA_Abort_IT+0xa4>
 8001b30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b34:	e002      	b.n	8001b3c <HAL_DMA_Abort_IT+0xa4>
 8001b36:	2310      	movs	r3, #16
 8001b38:	e000      	b.n	8001b3c <HAL_DMA_Abort_IT+0xa4>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	4a11      	ldr	r2, [pc, #68]	; (8001b84 <HAL_DMA_Abort_IT+0xec>)
 8001b3e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d003      	beq.n	8001b60 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	4798      	blx	r3
    } 
  }
  return status;
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40020008 	.word	0x40020008
 8001b70:	4002001c 	.word	0x4002001c
 8001b74:	40020030 	.word	0x40020030
 8001b78:	40020044 	.word	0x40020044
 8001b7c:	40020058 	.word	0x40020058
 8001b80:	4002006c 	.word	0x4002006c
 8001b84:	40020000 	.word	0x40020000

08001b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b08b      	sub	sp, #44	; 0x2c
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b92:	2300      	movs	r3, #0
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b96:	2300      	movs	r3, #0
 8001b98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b9a:	e169      	b.n	8001e70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	69fa      	ldr	r2, [r7, #28]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	f040 8158 	bne.w	8001e6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	4a9a      	ldr	r2, [pc, #616]	; (8001e28 <HAL_GPIO_Init+0x2a0>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d05e      	beq.n	8001c82 <HAL_GPIO_Init+0xfa>
 8001bc4:	4a98      	ldr	r2, [pc, #608]	; (8001e28 <HAL_GPIO_Init+0x2a0>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d875      	bhi.n	8001cb6 <HAL_GPIO_Init+0x12e>
 8001bca:	4a98      	ldr	r2, [pc, #608]	; (8001e2c <HAL_GPIO_Init+0x2a4>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d058      	beq.n	8001c82 <HAL_GPIO_Init+0xfa>
 8001bd0:	4a96      	ldr	r2, [pc, #600]	; (8001e2c <HAL_GPIO_Init+0x2a4>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d86f      	bhi.n	8001cb6 <HAL_GPIO_Init+0x12e>
 8001bd6:	4a96      	ldr	r2, [pc, #600]	; (8001e30 <HAL_GPIO_Init+0x2a8>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d052      	beq.n	8001c82 <HAL_GPIO_Init+0xfa>
 8001bdc:	4a94      	ldr	r2, [pc, #592]	; (8001e30 <HAL_GPIO_Init+0x2a8>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d869      	bhi.n	8001cb6 <HAL_GPIO_Init+0x12e>
 8001be2:	4a94      	ldr	r2, [pc, #592]	; (8001e34 <HAL_GPIO_Init+0x2ac>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d04c      	beq.n	8001c82 <HAL_GPIO_Init+0xfa>
 8001be8:	4a92      	ldr	r2, [pc, #584]	; (8001e34 <HAL_GPIO_Init+0x2ac>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d863      	bhi.n	8001cb6 <HAL_GPIO_Init+0x12e>
 8001bee:	4a92      	ldr	r2, [pc, #584]	; (8001e38 <HAL_GPIO_Init+0x2b0>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d046      	beq.n	8001c82 <HAL_GPIO_Init+0xfa>
 8001bf4:	4a90      	ldr	r2, [pc, #576]	; (8001e38 <HAL_GPIO_Init+0x2b0>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d85d      	bhi.n	8001cb6 <HAL_GPIO_Init+0x12e>
 8001bfa:	2b12      	cmp	r3, #18
 8001bfc:	d82a      	bhi.n	8001c54 <HAL_GPIO_Init+0xcc>
 8001bfe:	2b12      	cmp	r3, #18
 8001c00:	d859      	bhi.n	8001cb6 <HAL_GPIO_Init+0x12e>
 8001c02:	a201      	add	r2, pc, #4	; (adr r2, 8001c08 <HAL_GPIO_Init+0x80>)
 8001c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c08:	08001c83 	.word	0x08001c83
 8001c0c:	08001c5d 	.word	0x08001c5d
 8001c10:	08001c6f 	.word	0x08001c6f
 8001c14:	08001cb1 	.word	0x08001cb1
 8001c18:	08001cb7 	.word	0x08001cb7
 8001c1c:	08001cb7 	.word	0x08001cb7
 8001c20:	08001cb7 	.word	0x08001cb7
 8001c24:	08001cb7 	.word	0x08001cb7
 8001c28:	08001cb7 	.word	0x08001cb7
 8001c2c:	08001cb7 	.word	0x08001cb7
 8001c30:	08001cb7 	.word	0x08001cb7
 8001c34:	08001cb7 	.word	0x08001cb7
 8001c38:	08001cb7 	.word	0x08001cb7
 8001c3c:	08001cb7 	.word	0x08001cb7
 8001c40:	08001cb7 	.word	0x08001cb7
 8001c44:	08001cb7 	.word	0x08001cb7
 8001c48:	08001cb7 	.word	0x08001cb7
 8001c4c:	08001c65 	.word	0x08001c65
 8001c50:	08001c79 	.word	0x08001c79
 8001c54:	4a79      	ldr	r2, [pc, #484]	; (8001e3c <HAL_GPIO_Init+0x2b4>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d013      	beq.n	8001c82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c5a:	e02c      	b.n	8001cb6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	623b      	str	r3, [r7, #32]
          break;
 8001c62:	e029      	b.n	8001cb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	3304      	adds	r3, #4
 8001c6a:	623b      	str	r3, [r7, #32]
          break;
 8001c6c:	e024      	b.n	8001cb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	3308      	adds	r3, #8
 8001c74:	623b      	str	r3, [r7, #32]
          break;
 8001c76:	e01f      	b.n	8001cb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	330c      	adds	r3, #12
 8001c7e:	623b      	str	r3, [r7, #32]
          break;
 8001c80:	e01a      	b.n	8001cb8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d102      	bne.n	8001c90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c8a:	2304      	movs	r3, #4
 8001c8c:	623b      	str	r3, [r7, #32]
          break;
 8001c8e:	e013      	b.n	8001cb8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d105      	bne.n	8001ca4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c98:	2308      	movs	r3, #8
 8001c9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	69fa      	ldr	r2, [r7, #28]
 8001ca0:	611a      	str	r2, [r3, #16]
          break;
 8001ca2:	e009      	b.n	8001cb8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ca4:	2308      	movs	r3, #8
 8001ca6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69fa      	ldr	r2, [r7, #28]
 8001cac:	615a      	str	r2, [r3, #20]
          break;
 8001cae:	e003      	b.n	8001cb8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	623b      	str	r3, [r7, #32]
          break;
 8001cb4:	e000      	b.n	8001cb8 <HAL_GPIO_Init+0x130>
          break;
 8001cb6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	2bff      	cmp	r3, #255	; 0xff
 8001cbc:	d801      	bhi.n	8001cc2 <HAL_GPIO_Init+0x13a>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	e001      	b.n	8001cc6 <HAL_GPIO_Init+0x13e>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	2bff      	cmp	r3, #255	; 0xff
 8001ccc:	d802      	bhi.n	8001cd4 <HAL_GPIO_Init+0x14c>
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	e002      	b.n	8001cda <HAL_GPIO_Init+0x152>
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	3b08      	subs	r3, #8
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	210f      	movs	r1, #15
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	401a      	ands	r2, r3
 8001cec:	6a39      	ldr	r1, [r7, #32]
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f000 80b1 	beq.w	8001e6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d08:	4b4d      	ldr	r3, [pc, #308]	; (8001e40 <HAL_GPIO_Init+0x2b8>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	4a4c      	ldr	r2, [pc, #304]	; (8001e40 <HAL_GPIO_Init+0x2b8>)
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	6193      	str	r3, [r2, #24]
 8001d14:	4b4a      	ldr	r3, [pc, #296]	; (8001e40 <HAL_GPIO_Init+0x2b8>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d20:	4a48      	ldr	r2, [pc, #288]	; (8001e44 <HAL_GPIO_Init+0x2bc>)
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	089b      	lsrs	r3, r3, #2
 8001d26:	3302      	adds	r3, #2
 8001d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d30:	f003 0303 	and.w	r3, r3, #3
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	220f      	movs	r2, #15
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	4013      	ands	r3, r2
 8001d42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a40      	ldr	r2, [pc, #256]	; (8001e48 <HAL_GPIO_Init+0x2c0>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d013      	beq.n	8001d74 <HAL_GPIO_Init+0x1ec>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a3f      	ldr	r2, [pc, #252]	; (8001e4c <HAL_GPIO_Init+0x2c4>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d00d      	beq.n	8001d70 <HAL_GPIO_Init+0x1e8>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a3e      	ldr	r2, [pc, #248]	; (8001e50 <HAL_GPIO_Init+0x2c8>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d007      	beq.n	8001d6c <HAL_GPIO_Init+0x1e4>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a3d      	ldr	r2, [pc, #244]	; (8001e54 <HAL_GPIO_Init+0x2cc>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d101      	bne.n	8001d68 <HAL_GPIO_Init+0x1e0>
 8001d64:	2303      	movs	r3, #3
 8001d66:	e006      	b.n	8001d76 <HAL_GPIO_Init+0x1ee>
 8001d68:	2304      	movs	r3, #4
 8001d6a:	e004      	b.n	8001d76 <HAL_GPIO_Init+0x1ee>
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	e002      	b.n	8001d76 <HAL_GPIO_Init+0x1ee>
 8001d70:	2301      	movs	r3, #1
 8001d72:	e000      	b.n	8001d76 <HAL_GPIO_Init+0x1ee>
 8001d74:	2300      	movs	r3, #0
 8001d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d78:	f002 0203 	and.w	r2, r2, #3
 8001d7c:	0092      	lsls	r2, r2, #2
 8001d7e:	4093      	lsls	r3, r2
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d86:	492f      	ldr	r1, [pc, #188]	; (8001e44 <HAL_GPIO_Init+0x2bc>)
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	089b      	lsrs	r3, r3, #2
 8001d8c:	3302      	adds	r3, #2
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d006      	beq.n	8001dae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001da0:	4b2d      	ldr	r3, [pc, #180]	; (8001e58 <HAL_GPIO_Init+0x2d0>)
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	492c      	ldr	r1, [pc, #176]	; (8001e58 <HAL_GPIO_Init+0x2d0>)
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	608b      	str	r3, [r1, #8]
 8001dac:	e006      	b.n	8001dbc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dae:	4b2a      	ldr	r3, [pc, #168]	; (8001e58 <HAL_GPIO_Init+0x2d0>)
 8001db0:	689a      	ldr	r2, [r3, #8]
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	43db      	mvns	r3, r3
 8001db6:	4928      	ldr	r1, [pc, #160]	; (8001e58 <HAL_GPIO_Init+0x2d0>)
 8001db8:	4013      	ands	r3, r2
 8001dba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d006      	beq.n	8001dd6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001dc8:	4b23      	ldr	r3, [pc, #140]	; (8001e58 <HAL_GPIO_Init+0x2d0>)
 8001dca:	68da      	ldr	r2, [r3, #12]
 8001dcc:	4922      	ldr	r1, [pc, #136]	; (8001e58 <HAL_GPIO_Init+0x2d0>)
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	60cb      	str	r3, [r1, #12]
 8001dd4:	e006      	b.n	8001de4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dd6:	4b20      	ldr	r3, [pc, #128]	; (8001e58 <HAL_GPIO_Init+0x2d0>)
 8001dd8:	68da      	ldr	r2, [r3, #12]
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	491e      	ldr	r1, [pc, #120]	; (8001e58 <HAL_GPIO_Init+0x2d0>)
 8001de0:	4013      	ands	r3, r2
 8001de2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d006      	beq.n	8001dfe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001df0:	4b19      	ldr	r3, [pc, #100]	; (8001e58 <HAL_GPIO_Init+0x2d0>)
 8001df2:	685a      	ldr	r2, [r3, #4]
 8001df4:	4918      	ldr	r1, [pc, #96]	; (8001e58 <HAL_GPIO_Init+0x2d0>)
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	604b      	str	r3, [r1, #4]
 8001dfc:	e006      	b.n	8001e0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dfe:	4b16      	ldr	r3, [pc, #88]	; (8001e58 <HAL_GPIO_Init+0x2d0>)
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	43db      	mvns	r3, r3
 8001e06:	4914      	ldr	r1, [pc, #80]	; (8001e58 <HAL_GPIO_Init+0x2d0>)
 8001e08:	4013      	ands	r3, r2
 8001e0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d021      	beq.n	8001e5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e18:	4b0f      	ldr	r3, [pc, #60]	; (8001e58 <HAL_GPIO_Init+0x2d0>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	490e      	ldr	r1, [pc, #56]	; (8001e58 <HAL_GPIO_Init+0x2d0>)
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	600b      	str	r3, [r1, #0]
 8001e24:	e021      	b.n	8001e6a <HAL_GPIO_Init+0x2e2>
 8001e26:	bf00      	nop
 8001e28:	10320000 	.word	0x10320000
 8001e2c:	10310000 	.word	0x10310000
 8001e30:	10220000 	.word	0x10220000
 8001e34:	10210000 	.word	0x10210000
 8001e38:	10120000 	.word	0x10120000
 8001e3c:	10110000 	.word	0x10110000
 8001e40:	40021000 	.word	0x40021000
 8001e44:	40010000 	.word	0x40010000
 8001e48:	40010800 	.word	0x40010800
 8001e4c:	40010c00 	.word	0x40010c00
 8001e50:	40011000 	.word	0x40011000
 8001e54:	40011400 	.word	0x40011400
 8001e58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <HAL_GPIO_Init+0x304>)
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	43db      	mvns	r3, r3
 8001e64:	4909      	ldr	r1, [pc, #36]	; (8001e8c <HAL_GPIO_Init+0x304>)
 8001e66:	4013      	ands	r3, r2
 8001e68:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	fa22 f303 	lsr.w	r3, r2, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f47f ae8e 	bne.w	8001b9c <HAL_GPIO_Init+0x14>
  }
}
 8001e80:	bf00      	nop
 8001e82:	bf00      	nop
 8001e84:	372c      	adds	r7, #44	; 0x2c
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr
 8001e8c:	40010400 	.word	0x40010400

08001e90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	807b      	strh	r3, [r7, #2]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ea0:	787b      	ldrb	r3, [r7, #1]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ea6:	887a      	ldrh	r2, [r7, #2]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001eac:	e003      	b.n	8001eb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001eae:	887b      	ldrh	r3, [r7, #2]
 8001eb0:	041a      	lsls	r2, r3, #16
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	611a      	str	r2, [r3, #16]
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e272      	b.n	80023b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 8087 	beq.w	8001fee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ee0:	4b92      	ldr	r3, [pc, #584]	; (800212c <HAL_RCC_OscConfig+0x26c>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 030c 	and.w	r3, r3, #12
 8001ee8:	2b04      	cmp	r3, #4
 8001eea:	d00c      	beq.n	8001f06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001eec:	4b8f      	ldr	r3, [pc, #572]	; (800212c <HAL_RCC_OscConfig+0x26c>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 030c 	and.w	r3, r3, #12
 8001ef4:	2b08      	cmp	r3, #8
 8001ef6:	d112      	bne.n	8001f1e <HAL_RCC_OscConfig+0x5e>
 8001ef8:	4b8c      	ldr	r3, [pc, #560]	; (800212c <HAL_RCC_OscConfig+0x26c>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f04:	d10b      	bne.n	8001f1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f06:	4b89      	ldr	r3, [pc, #548]	; (800212c <HAL_RCC_OscConfig+0x26c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d06c      	beq.n	8001fec <HAL_RCC_OscConfig+0x12c>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d168      	bne.n	8001fec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e24c      	b.n	80023b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f26:	d106      	bne.n	8001f36 <HAL_RCC_OscConfig+0x76>
 8001f28:	4b80      	ldr	r3, [pc, #512]	; (800212c <HAL_RCC_OscConfig+0x26c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a7f      	ldr	r2, [pc, #508]	; (800212c <HAL_RCC_OscConfig+0x26c>)
 8001f2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f32:	6013      	str	r3, [r2, #0]
 8001f34:	e02e      	b.n	8001f94 <HAL_RCC_OscConfig+0xd4>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d10c      	bne.n	8001f58 <HAL_RCC_OscConfig+0x98>
 8001f3e:	4b7b      	ldr	r3, [pc, #492]	; (800212c <HAL_RCC_OscConfig+0x26c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a7a      	ldr	r2, [pc, #488]	; (800212c <HAL_RCC_OscConfig+0x26c>)
 8001f44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f48:	6013      	str	r3, [r2, #0]
 8001f4a:	4b78      	ldr	r3, [pc, #480]	; (800212c <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a77      	ldr	r2, [pc, #476]	; (800212c <HAL_RCC_OscConfig+0x26c>)
 8001f50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	e01d      	b.n	8001f94 <HAL_RCC_OscConfig+0xd4>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f60:	d10c      	bne.n	8001f7c <HAL_RCC_OscConfig+0xbc>
 8001f62:	4b72      	ldr	r3, [pc, #456]	; (800212c <HAL_RCC_OscConfig+0x26c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a71      	ldr	r2, [pc, #452]	; (800212c <HAL_RCC_OscConfig+0x26c>)
 8001f68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	4b6f      	ldr	r3, [pc, #444]	; (800212c <HAL_RCC_OscConfig+0x26c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a6e      	ldr	r2, [pc, #440]	; (800212c <HAL_RCC_OscConfig+0x26c>)
 8001f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	e00b      	b.n	8001f94 <HAL_RCC_OscConfig+0xd4>
 8001f7c:	4b6b      	ldr	r3, [pc, #428]	; (800212c <HAL_RCC_OscConfig+0x26c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a6a      	ldr	r2, [pc, #424]	; (800212c <HAL_RCC_OscConfig+0x26c>)
 8001f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f86:	6013      	str	r3, [r2, #0]
 8001f88:	4b68      	ldr	r3, [pc, #416]	; (800212c <HAL_RCC_OscConfig+0x26c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a67      	ldr	r2, [pc, #412]	; (800212c <HAL_RCC_OscConfig+0x26c>)
 8001f8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d013      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9c:	f7fe fe0e 	bl	8000bbc <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fa4:	f7fe fe0a 	bl	8000bbc <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b64      	cmp	r3, #100	; 0x64
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e200      	b.n	80023b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb6:	4b5d      	ldr	r3, [pc, #372]	; (800212c <HAL_RCC_OscConfig+0x26c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d0f0      	beq.n	8001fa4 <HAL_RCC_OscConfig+0xe4>
 8001fc2:	e014      	b.n	8001fee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc4:	f7fe fdfa 	bl	8000bbc <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fcc:	f7fe fdf6 	bl	8000bbc <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b64      	cmp	r3, #100	; 0x64
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e1ec      	b.n	80023b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fde:	4b53      	ldr	r3, [pc, #332]	; (800212c <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1f0      	bne.n	8001fcc <HAL_RCC_OscConfig+0x10c>
 8001fea:	e000      	b.n	8001fee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d063      	beq.n	80020c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ffa:	4b4c      	ldr	r3, [pc, #304]	; (800212c <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 030c 	and.w	r3, r3, #12
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00b      	beq.n	800201e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002006:	4b49      	ldr	r3, [pc, #292]	; (800212c <HAL_RCC_OscConfig+0x26c>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 030c 	and.w	r3, r3, #12
 800200e:	2b08      	cmp	r3, #8
 8002010:	d11c      	bne.n	800204c <HAL_RCC_OscConfig+0x18c>
 8002012:	4b46      	ldr	r3, [pc, #280]	; (800212c <HAL_RCC_OscConfig+0x26c>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d116      	bne.n	800204c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800201e:	4b43      	ldr	r3, [pc, #268]	; (800212c <HAL_RCC_OscConfig+0x26c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d005      	beq.n	8002036 <HAL_RCC_OscConfig+0x176>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d001      	beq.n	8002036 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e1c0      	b.n	80023b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002036:	4b3d      	ldr	r3, [pc, #244]	; (800212c <HAL_RCC_OscConfig+0x26c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	4939      	ldr	r1, [pc, #228]	; (800212c <HAL_RCC_OscConfig+0x26c>)
 8002046:	4313      	orrs	r3, r2
 8002048:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800204a:	e03a      	b.n	80020c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d020      	beq.n	8002096 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002054:	4b36      	ldr	r3, [pc, #216]	; (8002130 <HAL_RCC_OscConfig+0x270>)
 8002056:	2201      	movs	r2, #1
 8002058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205a:	f7fe fdaf 	bl	8000bbc <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002060:	e008      	b.n	8002074 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002062:	f7fe fdab 	bl	8000bbc <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e1a1      	b.n	80023b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002074:	4b2d      	ldr	r3, [pc, #180]	; (800212c <HAL_RCC_OscConfig+0x26c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0f0      	beq.n	8002062 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002080:	4b2a      	ldr	r3, [pc, #168]	; (800212c <HAL_RCC_OscConfig+0x26c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	695b      	ldr	r3, [r3, #20]
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	4927      	ldr	r1, [pc, #156]	; (800212c <HAL_RCC_OscConfig+0x26c>)
 8002090:	4313      	orrs	r3, r2
 8002092:	600b      	str	r3, [r1, #0]
 8002094:	e015      	b.n	80020c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002096:	4b26      	ldr	r3, [pc, #152]	; (8002130 <HAL_RCC_OscConfig+0x270>)
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209c:	f7fe fd8e 	bl	8000bbc <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020a4:	f7fe fd8a 	bl	8000bbc <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e180      	b.n	80023b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020b6:	4b1d      	ldr	r3, [pc, #116]	; (800212c <HAL_RCC_OscConfig+0x26c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f0      	bne.n	80020a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d03a      	beq.n	8002144 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d019      	beq.n	800210a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020d6:	4b17      	ldr	r3, [pc, #92]	; (8002134 <HAL_RCC_OscConfig+0x274>)
 80020d8:	2201      	movs	r2, #1
 80020da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020dc:	f7fe fd6e 	bl	8000bbc <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020e4:	f7fe fd6a 	bl	8000bbc <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e160      	b.n	80023b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020f6:	4b0d      	ldr	r3, [pc, #52]	; (800212c <HAL_RCC_OscConfig+0x26c>)
 80020f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0f0      	beq.n	80020e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002102:	2001      	movs	r0, #1
 8002104:	f000 face 	bl	80026a4 <RCC_Delay>
 8002108:	e01c      	b.n	8002144 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800210a:	4b0a      	ldr	r3, [pc, #40]	; (8002134 <HAL_RCC_OscConfig+0x274>)
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002110:	f7fe fd54 	bl	8000bbc <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002116:	e00f      	b.n	8002138 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002118:	f7fe fd50 	bl	8000bbc <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d908      	bls.n	8002138 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e146      	b.n	80023b8 <HAL_RCC_OscConfig+0x4f8>
 800212a:	bf00      	nop
 800212c:	40021000 	.word	0x40021000
 8002130:	42420000 	.word	0x42420000
 8002134:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002138:	4b92      	ldr	r3, [pc, #584]	; (8002384 <HAL_RCC_OscConfig+0x4c4>)
 800213a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1e9      	bne.n	8002118 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 80a6 	beq.w	800229e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002152:	2300      	movs	r3, #0
 8002154:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002156:	4b8b      	ldr	r3, [pc, #556]	; (8002384 <HAL_RCC_OscConfig+0x4c4>)
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10d      	bne.n	800217e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002162:	4b88      	ldr	r3, [pc, #544]	; (8002384 <HAL_RCC_OscConfig+0x4c4>)
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	4a87      	ldr	r2, [pc, #540]	; (8002384 <HAL_RCC_OscConfig+0x4c4>)
 8002168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800216c:	61d3      	str	r3, [r2, #28]
 800216e:	4b85      	ldr	r3, [pc, #532]	; (8002384 <HAL_RCC_OscConfig+0x4c4>)
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002176:	60bb      	str	r3, [r7, #8]
 8002178:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800217a:	2301      	movs	r3, #1
 800217c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800217e:	4b82      	ldr	r3, [pc, #520]	; (8002388 <HAL_RCC_OscConfig+0x4c8>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002186:	2b00      	cmp	r3, #0
 8002188:	d118      	bne.n	80021bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800218a:	4b7f      	ldr	r3, [pc, #508]	; (8002388 <HAL_RCC_OscConfig+0x4c8>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a7e      	ldr	r2, [pc, #504]	; (8002388 <HAL_RCC_OscConfig+0x4c8>)
 8002190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002194:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002196:	f7fe fd11 	bl	8000bbc <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800219c:	e008      	b.n	80021b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800219e:	f7fe fd0d 	bl	8000bbc <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b64      	cmp	r3, #100	; 0x64
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e103      	b.n	80023b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b0:	4b75      	ldr	r3, [pc, #468]	; (8002388 <HAL_RCC_OscConfig+0x4c8>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d0f0      	beq.n	800219e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d106      	bne.n	80021d2 <HAL_RCC_OscConfig+0x312>
 80021c4:	4b6f      	ldr	r3, [pc, #444]	; (8002384 <HAL_RCC_OscConfig+0x4c4>)
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	4a6e      	ldr	r2, [pc, #440]	; (8002384 <HAL_RCC_OscConfig+0x4c4>)
 80021ca:	f043 0301 	orr.w	r3, r3, #1
 80021ce:	6213      	str	r3, [r2, #32]
 80021d0:	e02d      	b.n	800222e <HAL_RCC_OscConfig+0x36e>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10c      	bne.n	80021f4 <HAL_RCC_OscConfig+0x334>
 80021da:	4b6a      	ldr	r3, [pc, #424]	; (8002384 <HAL_RCC_OscConfig+0x4c4>)
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	4a69      	ldr	r2, [pc, #420]	; (8002384 <HAL_RCC_OscConfig+0x4c4>)
 80021e0:	f023 0301 	bic.w	r3, r3, #1
 80021e4:	6213      	str	r3, [r2, #32]
 80021e6:	4b67      	ldr	r3, [pc, #412]	; (8002384 <HAL_RCC_OscConfig+0x4c4>)
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	4a66      	ldr	r2, [pc, #408]	; (8002384 <HAL_RCC_OscConfig+0x4c4>)
 80021ec:	f023 0304 	bic.w	r3, r3, #4
 80021f0:	6213      	str	r3, [r2, #32]
 80021f2:	e01c      	b.n	800222e <HAL_RCC_OscConfig+0x36e>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	2b05      	cmp	r3, #5
 80021fa:	d10c      	bne.n	8002216 <HAL_RCC_OscConfig+0x356>
 80021fc:	4b61      	ldr	r3, [pc, #388]	; (8002384 <HAL_RCC_OscConfig+0x4c4>)
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	4a60      	ldr	r2, [pc, #384]	; (8002384 <HAL_RCC_OscConfig+0x4c4>)
 8002202:	f043 0304 	orr.w	r3, r3, #4
 8002206:	6213      	str	r3, [r2, #32]
 8002208:	4b5e      	ldr	r3, [pc, #376]	; (8002384 <HAL_RCC_OscConfig+0x4c4>)
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	4a5d      	ldr	r2, [pc, #372]	; (8002384 <HAL_RCC_OscConfig+0x4c4>)
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	6213      	str	r3, [r2, #32]
 8002214:	e00b      	b.n	800222e <HAL_RCC_OscConfig+0x36e>
 8002216:	4b5b      	ldr	r3, [pc, #364]	; (8002384 <HAL_RCC_OscConfig+0x4c4>)
 8002218:	6a1b      	ldr	r3, [r3, #32]
 800221a:	4a5a      	ldr	r2, [pc, #360]	; (8002384 <HAL_RCC_OscConfig+0x4c4>)
 800221c:	f023 0301 	bic.w	r3, r3, #1
 8002220:	6213      	str	r3, [r2, #32]
 8002222:	4b58      	ldr	r3, [pc, #352]	; (8002384 <HAL_RCC_OscConfig+0x4c4>)
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	4a57      	ldr	r2, [pc, #348]	; (8002384 <HAL_RCC_OscConfig+0x4c4>)
 8002228:	f023 0304 	bic.w	r3, r3, #4
 800222c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d015      	beq.n	8002262 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002236:	f7fe fcc1 	bl	8000bbc <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800223c:	e00a      	b.n	8002254 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223e:	f7fe fcbd 	bl	8000bbc <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	f241 3288 	movw	r2, #5000	; 0x1388
 800224c:	4293      	cmp	r3, r2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e0b1      	b.n	80023b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002254:	4b4b      	ldr	r3, [pc, #300]	; (8002384 <HAL_RCC_OscConfig+0x4c4>)
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0ee      	beq.n	800223e <HAL_RCC_OscConfig+0x37e>
 8002260:	e014      	b.n	800228c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002262:	f7fe fcab 	bl	8000bbc <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002268:	e00a      	b.n	8002280 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800226a:	f7fe fca7 	bl	8000bbc <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	f241 3288 	movw	r2, #5000	; 0x1388
 8002278:	4293      	cmp	r3, r2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e09b      	b.n	80023b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002280:	4b40      	ldr	r3, [pc, #256]	; (8002384 <HAL_RCC_OscConfig+0x4c4>)
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1ee      	bne.n	800226a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800228c:	7dfb      	ldrb	r3, [r7, #23]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d105      	bne.n	800229e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002292:	4b3c      	ldr	r3, [pc, #240]	; (8002384 <HAL_RCC_OscConfig+0x4c4>)
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	4a3b      	ldr	r2, [pc, #236]	; (8002384 <HAL_RCC_OscConfig+0x4c4>)
 8002298:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800229c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 8087 	beq.w	80023b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022a8:	4b36      	ldr	r3, [pc, #216]	; (8002384 <HAL_RCC_OscConfig+0x4c4>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 030c 	and.w	r3, r3, #12
 80022b0:	2b08      	cmp	r3, #8
 80022b2:	d061      	beq.n	8002378 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	69db      	ldr	r3, [r3, #28]
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d146      	bne.n	800234a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022bc:	4b33      	ldr	r3, [pc, #204]	; (800238c <HAL_RCC_OscConfig+0x4cc>)
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c2:	f7fe fc7b 	bl	8000bbc <HAL_GetTick>
 80022c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022c8:	e008      	b.n	80022dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ca:	f7fe fc77 	bl	8000bbc <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e06d      	b.n	80023b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022dc:	4b29      	ldr	r3, [pc, #164]	; (8002384 <HAL_RCC_OscConfig+0x4c4>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1f0      	bne.n	80022ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022f0:	d108      	bne.n	8002304 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022f2:	4b24      	ldr	r3, [pc, #144]	; (8002384 <HAL_RCC_OscConfig+0x4c4>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	4921      	ldr	r1, [pc, #132]	; (8002384 <HAL_RCC_OscConfig+0x4c4>)
 8002300:	4313      	orrs	r3, r2
 8002302:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002304:	4b1f      	ldr	r3, [pc, #124]	; (8002384 <HAL_RCC_OscConfig+0x4c4>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a19      	ldr	r1, [r3, #32]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002314:	430b      	orrs	r3, r1
 8002316:	491b      	ldr	r1, [pc, #108]	; (8002384 <HAL_RCC_OscConfig+0x4c4>)
 8002318:	4313      	orrs	r3, r2
 800231a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800231c:	4b1b      	ldr	r3, [pc, #108]	; (800238c <HAL_RCC_OscConfig+0x4cc>)
 800231e:	2201      	movs	r2, #1
 8002320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002322:	f7fe fc4b 	bl	8000bbc <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800232a:	f7fe fc47 	bl	8000bbc <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e03d      	b.n	80023b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800233c:	4b11      	ldr	r3, [pc, #68]	; (8002384 <HAL_RCC_OscConfig+0x4c4>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0f0      	beq.n	800232a <HAL_RCC_OscConfig+0x46a>
 8002348:	e035      	b.n	80023b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800234a:	4b10      	ldr	r3, [pc, #64]	; (800238c <HAL_RCC_OscConfig+0x4cc>)
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002350:	f7fe fc34 	bl	8000bbc <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002358:	f7fe fc30 	bl	8000bbc <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e026      	b.n	80023b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800236a:	4b06      	ldr	r3, [pc, #24]	; (8002384 <HAL_RCC_OscConfig+0x4c4>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1f0      	bne.n	8002358 <HAL_RCC_OscConfig+0x498>
 8002376:	e01e      	b.n	80023b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	69db      	ldr	r3, [r3, #28]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d107      	bne.n	8002390 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e019      	b.n	80023b8 <HAL_RCC_OscConfig+0x4f8>
 8002384:	40021000 	.word	0x40021000
 8002388:	40007000 	.word	0x40007000
 800238c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002390:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <HAL_RCC_OscConfig+0x500>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d106      	bne.n	80023b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d001      	beq.n	80023b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e000      	b.n	80023b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40021000 	.word	0x40021000

080023c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e0d0      	b.n	800257a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023d8:	4b6a      	ldr	r3, [pc, #424]	; (8002584 <HAL_RCC_ClockConfig+0x1c0>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d910      	bls.n	8002408 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e6:	4b67      	ldr	r3, [pc, #412]	; (8002584 <HAL_RCC_ClockConfig+0x1c0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f023 0207 	bic.w	r2, r3, #7
 80023ee:	4965      	ldr	r1, [pc, #404]	; (8002584 <HAL_RCC_ClockConfig+0x1c0>)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f6:	4b63      	ldr	r3, [pc, #396]	; (8002584 <HAL_RCC_ClockConfig+0x1c0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d001      	beq.n	8002408 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e0b8      	b.n	800257a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d020      	beq.n	8002456 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	2b00      	cmp	r3, #0
 800241e:	d005      	beq.n	800242c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002420:	4b59      	ldr	r3, [pc, #356]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	4a58      	ldr	r2, [pc, #352]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 8002426:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800242a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0308 	and.w	r3, r3, #8
 8002434:	2b00      	cmp	r3, #0
 8002436:	d005      	beq.n	8002444 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002438:	4b53      	ldr	r3, [pc, #332]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	4a52      	ldr	r2, [pc, #328]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 800243e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002442:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002444:	4b50      	ldr	r3, [pc, #320]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	494d      	ldr	r1, [pc, #308]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 8002452:	4313      	orrs	r3, r2
 8002454:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d040      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d107      	bne.n	800247a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246a:	4b47      	ldr	r3, [pc, #284]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d115      	bne.n	80024a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e07f      	b.n	800257a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b02      	cmp	r3, #2
 8002480:	d107      	bne.n	8002492 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002482:	4b41      	ldr	r3, [pc, #260]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d109      	bne.n	80024a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e073      	b.n	800257a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002492:	4b3d      	ldr	r3, [pc, #244]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e06b      	b.n	800257a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024a2:	4b39      	ldr	r3, [pc, #228]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f023 0203 	bic.w	r2, r3, #3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	4936      	ldr	r1, [pc, #216]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024b4:	f7fe fb82 	bl	8000bbc <HAL_GetTick>
 80024b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ba:	e00a      	b.n	80024d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024bc:	f7fe fb7e 	bl	8000bbc <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e053      	b.n	800257a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d2:	4b2d      	ldr	r3, [pc, #180]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f003 020c 	and.w	r2, r3, #12
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d1eb      	bne.n	80024bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024e4:	4b27      	ldr	r3, [pc, #156]	; (8002584 <HAL_RCC_ClockConfig+0x1c0>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d210      	bcs.n	8002514 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f2:	4b24      	ldr	r3, [pc, #144]	; (8002584 <HAL_RCC_ClockConfig+0x1c0>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f023 0207 	bic.w	r2, r3, #7
 80024fa:	4922      	ldr	r1, [pc, #136]	; (8002584 <HAL_RCC_ClockConfig+0x1c0>)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	4313      	orrs	r3, r2
 8002500:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002502:	4b20      	ldr	r3, [pc, #128]	; (8002584 <HAL_RCC_ClockConfig+0x1c0>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	429a      	cmp	r2, r3
 800250e:	d001      	beq.n	8002514 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e032      	b.n	800257a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b00      	cmp	r3, #0
 800251e:	d008      	beq.n	8002532 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002520:	4b19      	ldr	r3, [pc, #100]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	4916      	ldr	r1, [pc, #88]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 800252e:	4313      	orrs	r3, r2
 8002530:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0308 	and.w	r3, r3, #8
 800253a:	2b00      	cmp	r3, #0
 800253c:	d009      	beq.n	8002552 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800253e:	4b12      	ldr	r3, [pc, #72]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	490e      	ldr	r1, [pc, #56]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 800254e:	4313      	orrs	r3, r2
 8002550:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002552:	f000 f821 	bl	8002598 <HAL_RCC_GetSysClockFreq>
 8002556:	4602      	mov	r2, r0
 8002558:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	091b      	lsrs	r3, r3, #4
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	490a      	ldr	r1, [pc, #40]	; (800258c <HAL_RCC_ClockConfig+0x1c8>)
 8002564:	5ccb      	ldrb	r3, [r1, r3]
 8002566:	fa22 f303 	lsr.w	r3, r2, r3
 800256a:	4a09      	ldr	r2, [pc, #36]	; (8002590 <HAL_RCC_ClockConfig+0x1cc>)
 800256c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800256e:	4b09      	ldr	r3, [pc, #36]	; (8002594 <HAL_RCC_ClockConfig+0x1d0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f7fe fae0 	bl	8000b38 <HAL_InitTick>

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40022000 	.word	0x40022000
 8002588:	40021000 	.word	0x40021000
 800258c:	08004ad0 	.word	0x08004ad0
 8002590:	20000008 	.word	0x20000008
 8002594:	2000000c 	.word	0x2000000c

08002598 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002598:	b480      	push	{r7}
 800259a:	b087      	sub	sp, #28
 800259c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	2300      	movs	r3, #0
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	2300      	movs	r3, #0
 80025a8:	617b      	str	r3, [r7, #20]
 80025aa:	2300      	movs	r3, #0
 80025ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025ae:	2300      	movs	r3, #0
 80025b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025b2:	4b1e      	ldr	r3, [pc, #120]	; (800262c <HAL_RCC_GetSysClockFreq+0x94>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f003 030c 	and.w	r3, r3, #12
 80025be:	2b04      	cmp	r3, #4
 80025c0:	d002      	beq.n	80025c8 <HAL_RCC_GetSysClockFreq+0x30>
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d003      	beq.n	80025ce <HAL_RCC_GetSysClockFreq+0x36>
 80025c6:	e027      	b.n	8002618 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025c8:	4b19      	ldr	r3, [pc, #100]	; (8002630 <HAL_RCC_GetSysClockFreq+0x98>)
 80025ca:	613b      	str	r3, [r7, #16]
      break;
 80025cc:	e027      	b.n	800261e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	0c9b      	lsrs	r3, r3, #18
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	4a17      	ldr	r2, [pc, #92]	; (8002634 <HAL_RCC_GetSysClockFreq+0x9c>)
 80025d8:	5cd3      	ldrb	r3, [r2, r3]
 80025da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d010      	beq.n	8002608 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025e6:	4b11      	ldr	r3, [pc, #68]	; (800262c <HAL_RCC_GetSysClockFreq+0x94>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	0c5b      	lsrs	r3, r3, #17
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	4a11      	ldr	r2, [pc, #68]	; (8002638 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025f2:	5cd3      	ldrb	r3, [r2, r3]
 80025f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a0d      	ldr	r2, [pc, #52]	; (8002630 <HAL_RCC_GetSysClockFreq+0x98>)
 80025fa:	fb03 f202 	mul.w	r2, r3, r2
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	fbb2 f3f3 	udiv	r3, r2, r3
 8002604:	617b      	str	r3, [r7, #20]
 8002606:	e004      	b.n	8002612 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a0c      	ldr	r2, [pc, #48]	; (800263c <HAL_RCC_GetSysClockFreq+0xa4>)
 800260c:	fb02 f303 	mul.w	r3, r2, r3
 8002610:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	613b      	str	r3, [r7, #16]
      break;
 8002616:	e002      	b.n	800261e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002618:	4b05      	ldr	r3, [pc, #20]	; (8002630 <HAL_RCC_GetSysClockFreq+0x98>)
 800261a:	613b      	str	r3, [r7, #16]
      break;
 800261c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800261e:	693b      	ldr	r3, [r7, #16]
}
 8002620:	4618      	mov	r0, r3
 8002622:	371c      	adds	r7, #28
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	40021000 	.word	0x40021000
 8002630:	007a1200 	.word	0x007a1200
 8002634:	08004ae8 	.word	0x08004ae8
 8002638:	08004af8 	.word	0x08004af8
 800263c:	003d0900 	.word	0x003d0900

08002640 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002644:	4b02      	ldr	r3, [pc, #8]	; (8002650 <HAL_RCC_GetHCLKFreq+0x10>)
 8002646:	681b      	ldr	r3, [r3, #0]
}
 8002648:	4618      	mov	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr
 8002650:	20000008 	.word	0x20000008

08002654 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002658:	f7ff fff2 	bl	8002640 <HAL_RCC_GetHCLKFreq>
 800265c:	4602      	mov	r2, r0
 800265e:	4b05      	ldr	r3, [pc, #20]	; (8002674 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	0a1b      	lsrs	r3, r3, #8
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	4903      	ldr	r1, [pc, #12]	; (8002678 <HAL_RCC_GetPCLK1Freq+0x24>)
 800266a:	5ccb      	ldrb	r3, [r1, r3]
 800266c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002670:	4618      	mov	r0, r3
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40021000 	.word	0x40021000
 8002678:	08004ae0 	.word	0x08004ae0

0800267c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002680:	f7ff ffde 	bl	8002640 <HAL_RCC_GetHCLKFreq>
 8002684:	4602      	mov	r2, r0
 8002686:	4b05      	ldr	r3, [pc, #20]	; (800269c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	0adb      	lsrs	r3, r3, #11
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	4903      	ldr	r1, [pc, #12]	; (80026a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002692:	5ccb      	ldrb	r3, [r1, r3]
 8002694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002698:	4618      	mov	r0, r3
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40021000 	.word	0x40021000
 80026a0:	08004ae0 	.word	0x08004ae0

080026a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026ac:	4b0a      	ldr	r3, [pc, #40]	; (80026d8 <RCC_Delay+0x34>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a0a      	ldr	r2, [pc, #40]	; (80026dc <RCC_Delay+0x38>)
 80026b2:	fba2 2303 	umull	r2, r3, r2, r3
 80026b6:	0a5b      	lsrs	r3, r3, #9
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	fb02 f303 	mul.w	r3, r2, r3
 80026be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026c0:	bf00      	nop
  }
  while (Delay --);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	1e5a      	subs	r2, r3, #1
 80026c6:	60fa      	str	r2, [r7, #12]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1f9      	bne.n	80026c0 <RCC_Delay+0x1c>
}
 80026cc:	bf00      	nop
 80026ce:	bf00      	nop
 80026d0:	3714      	adds	r7, #20
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr
 80026d8:	20000008 	.word	0x20000008
 80026dc:	10624dd3 	.word	0x10624dd3

080026e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e041      	b.n	8002776 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d106      	bne.n	800270c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7fe f924 	bl	8000954 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2202      	movs	r2, #2
 8002710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3304      	adds	r3, #4
 800271c:	4619      	mov	r1, r3
 800271e:	4610      	mov	r0, r2
 8002720:	f000 fa74 	bl	8002c0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
	...

08002780 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b01      	cmp	r3, #1
 8002792:	d001      	beq.n	8002798 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e03a      	b.n	800280e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2202      	movs	r2, #2
 800279c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68da      	ldr	r2, [r3, #12]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0201 	orr.w	r2, r2, #1
 80027ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a18      	ldr	r2, [pc, #96]	; (8002818 <HAL_TIM_Base_Start_IT+0x98>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d00e      	beq.n	80027d8 <HAL_TIM_Base_Start_IT+0x58>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027c2:	d009      	beq.n	80027d8 <HAL_TIM_Base_Start_IT+0x58>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a14      	ldr	r2, [pc, #80]	; (800281c <HAL_TIM_Base_Start_IT+0x9c>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d004      	beq.n	80027d8 <HAL_TIM_Base_Start_IT+0x58>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a13      	ldr	r2, [pc, #76]	; (8002820 <HAL_TIM_Base_Start_IT+0xa0>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d111      	bne.n	80027fc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2b06      	cmp	r3, #6
 80027e8:	d010      	beq.n	800280c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f042 0201 	orr.w	r2, r2, #1
 80027f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027fa:	e007      	b.n	800280c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f042 0201 	orr.w	r2, r2, #1
 800280a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	bc80      	pop	{r7}
 8002816:	4770      	bx	lr
 8002818:	40012c00 	.word	0x40012c00
 800281c:	40000400 	.word	0x40000400
 8002820:	40000800 	.word	0x40000800

08002824 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b02      	cmp	r3, #2
 8002838:	d122      	bne.n	8002880 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b02      	cmp	r3, #2
 8002846:	d11b      	bne.n	8002880 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f06f 0202 	mvn.w	r2, #2
 8002850:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d003      	beq.n	800286e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 f9b4 	bl	8002bd4 <HAL_TIM_IC_CaptureCallback>
 800286c:	e005      	b.n	800287a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f9a7 	bl	8002bc2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 f9b6 	bl	8002be6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	f003 0304 	and.w	r3, r3, #4
 800288a:	2b04      	cmp	r3, #4
 800288c:	d122      	bne.n	80028d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b04      	cmp	r3, #4
 800289a:	d11b      	bne.n	80028d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f06f 0204 	mvn.w	r2, #4
 80028a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2202      	movs	r2, #2
 80028aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 f98a 	bl	8002bd4 <HAL_TIM_IC_CaptureCallback>
 80028c0:	e005      	b.n	80028ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 f97d 	bl	8002bc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 f98c 	bl	8002be6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	f003 0308 	and.w	r3, r3, #8
 80028de:	2b08      	cmp	r3, #8
 80028e0:	d122      	bne.n	8002928 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	f003 0308 	and.w	r3, r3, #8
 80028ec:	2b08      	cmp	r3, #8
 80028ee:	d11b      	bne.n	8002928 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f06f 0208 	mvn.w	r2, #8
 80028f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2204      	movs	r2, #4
 80028fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 f960 	bl	8002bd4 <HAL_TIM_IC_CaptureCallback>
 8002914:	e005      	b.n	8002922 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f953 	bl	8002bc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 f962 	bl	8002be6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	f003 0310 	and.w	r3, r3, #16
 8002932:	2b10      	cmp	r3, #16
 8002934:	d122      	bne.n	800297c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	f003 0310 	and.w	r3, r3, #16
 8002940:	2b10      	cmp	r3, #16
 8002942:	d11b      	bne.n	800297c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f06f 0210 	mvn.w	r2, #16
 800294c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2208      	movs	r2, #8
 8002952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 f936 	bl	8002bd4 <HAL_TIM_IC_CaptureCallback>
 8002968:	e005      	b.n	8002976 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f929 	bl	8002bc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 f938 	bl	8002be6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b01      	cmp	r3, #1
 8002988:	d10e      	bne.n	80029a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	2b01      	cmp	r3, #1
 8002996:	d107      	bne.n	80029a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f06f 0201 	mvn.w	r2, #1
 80029a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7fd fe06 	bl	80005b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b2:	2b80      	cmp	r3, #128	; 0x80
 80029b4:	d10e      	bne.n	80029d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c0:	2b80      	cmp	r3, #128	; 0x80
 80029c2:	d107      	bne.n	80029d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 fa7b 	bl	8002eca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029de:	2b40      	cmp	r3, #64	; 0x40
 80029e0:	d10e      	bne.n	8002a00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ec:	2b40      	cmp	r3, #64	; 0x40
 80029ee:	d107      	bne.n	8002a00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f8fc 	bl	8002bf8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	f003 0320 	and.w	r3, r3, #32
 8002a0a:	2b20      	cmp	r3, #32
 8002a0c:	d10e      	bne.n	8002a2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	f003 0320 	and.w	r3, r3, #32
 8002a18:	2b20      	cmp	r3, #32
 8002a1a:	d107      	bne.n	8002a2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f06f 0220 	mvn.w	r2, #32
 8002a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 fa46 	bl	8002eb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a2c:	bf00      	nop
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d101      	bne.n	8002a50 <HAL_TIM_ConfigClockSource+0x1c>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e0b4      	b.n	8002bba <HAL_TIM_ConfigClockSource+0x186>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a88:	d03e      	beq.n	8002b08 <HAL_TIM_ConfigClockSource+0xd4>
 8002a8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a8e:	f200 8087 	bhi.w	8002ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8002a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a96:	f000 8086 	beq.w	8002ba6 <HAL_TIM_ConfigClockSource+0x172>
 8002a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a9e:	d87f      	bhi.n	8002ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8002aa0:	2b70      	cmp	r3, #112	; 0x70
 8002aa2:	d01a      	beq.n	8002ada <HAL_TIM_ConfigClockSource+0xa6>
 8002aa4:	2b70      	cmp	r3, #112	; 0x70
 8002aa6:	d87b      	bhi.n	8002ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8002aa8:	2b60      	cmp	r3, #96	; 0x60
 8002aaa:	d050      	beq.n	8002b4e <HAL_TIM_ConfigClockSource+0x11a>
 8002aac:	2b60      	cmp	r3, #96	; 0x60
 8002aae:	d877      	bhi.n	8002ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ab0:	2b50      	cmp	r3, #80	; 0x50
 8002ab2:	d03c      	beq.n	8002b2e <HAL_TIM_ConfigClockSource+0xfa>
 8002ab4:	2b50      	cmp	r3, #80	; 0x50
 8002ab6:	d873      	bhi.n	8002ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ab8:	2b40      	cmp	r3, #64	; 0x40
 8002aba:	d058      	beq.n	8002b6e <HAL_TIM_ConfigClockSource+0x13a>
 8002abc:	2b40      	cmp	r3, #64	; 0x40
 8002abe:	d86f      	bhi.n	8002ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ac0:	2b30      	cmp	r3, #48	; 0x30
 8002ac2:	d064      	beq.n	8002b8e <HAL_TIM_ConfigClockSource+0x15a>
 8002ac4:	2b30      	cmp	r3, #48	; 0x30
 8002ac6:	d86b      	bhi.n	8002ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ac8:	2b20      	cmp	r3, #32
 8002aca:	d060      	beq.n	8002b8e <HAL_TIM_ConfigClockSource+0x15a>
 8002acc:	2b20      	cmp	r3, #32
 8002ace:	d867      	bhi.n	8002ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d05c      	beq.n	8002b8e <HAL_TIM_ConfigClockSource+0x15a>
 8002ad4:	2b10      	cmp	r3, #16
 8002ad6:	d05a      	beq.n	8002b8e <HAL_TIM_ConfigClockSource+0x15a>
 8002ad8:	e062      	b.n	8002ba0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002aea:	f000 f968 	bl	8002dbe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002afc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	609a      	str	r2, [r3, #8]
      break;
 8002b06:	e04f      	b.n	8002ba8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b18:	f000 f951 	bl	8002dbe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	689a      	ldr	r2, [r3, #8]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b2a:	609a      	str	r2, [r3, #8]
      break;
 8002b2c:	e03c      	b.n	8002ba8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	f000 f8c8 	bl	8002cd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2150      	movs	r1, #80	; 0x50
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 f91f 	bl	8002d8a <TIM_ITRx_SetConfig>
      break;
 8002b4c:	e02c      	b.n	8002ba8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	f000 f8e6 	bl	8002d2c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2160      	movs	r1, #96	; 0x60
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 f90f 	bl	8002d8a <TIM_ITRx_SetConfig>
      break;
 8002b6c:	e01c      	b.n	8002ba8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	f000 f8a8 	bl	8002cd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2140      	movs	r1, #64	; 0x40
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 f8ff 	bl	8002d8a <TIM_ITRx_SetConfig>
      break;
 8002b8c:	e00c      	b.n	8002ba8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4619      	mov	r1, r3
 8002b98:	4610      	mov	r0, r2
 8002b9a:	f000 f8f6 	bl	8002d8a <TIM_ITRx_SetConfig>
      break;
 8002b9e:	e003      	b.n	8002ba8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ba4:	e000      	b.n	8002ba8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ba6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b083      	sub	sp, #12
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bca:	bf00      	nop
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bc80      	pop	{r7}
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bc80      	pop	{r7}
 8002be4:	4770      	bx	lr

08002be6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bc80      	pop	{r7}
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bc80      	pop	{r7}
 8002c08:	4770      	bx	lr
	...

08002c0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a29      	ldr	r2, [pc, #164]	; (8002cc4 <TIM_Base_SetConfig+0xb8>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d00b      	beq.n	8002c3c <TIM_Base_SetConfig+0x30>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c2a:	d007      	beq.n	8002c3c <TIM_Base_SetConfig+0x30>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a26      	ldr	r2, [pc, #152]	; (8002cc8 <TIM_Base_SetConfig+0xbc>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d003      	beq.n	8002c3c <TIM_Base_SetConfig+0x30>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a25      	ldr	r2, [pc, #148]	; (8002ccc <TIM_Base_SetConfig+0xc0>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d108      	bne.n	8002c4e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a1c      	ldr	r2, [pc, #112]	; (8002cc4 <TIM_Base_SetConfig+0xb8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d00b      	beq.n	8002c6e <TIM_Base_SetConfig+0x62>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c5c:	d007      	beq.n	8002c6e <TIM_Base_SetConfig+0x62>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a19      	ldr	r2, [pc, #100]	; (8002cc8 <TIM_Base_SetConfig+0xbc>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d003      	beq.n	8002c6e <TIM_Base_SetConfig+0x62>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a18      	ldr	r2, [pc, #96]	; (8002ccc <TIM_Base_SetConfig+0xc0>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d108      	bne.n	8002c80 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a07      	ldr	r2, [pc, #28]	; (8002cc4 <TIM_Base_SetConfig+0xb8>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d103      	bne.n	8002cb4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	691a      	ldr	r2, [r3, #16]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	615a      	str	r2, [r3, #20]
}
 8002cba:	bf00      	nop
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr
 8002cc4:	40012c00 	.word	0x40012c00
 8002cc8:	40000400 	.word	0x40000400
 8002ccc:	40000800 	.word	0x40000800

08002cd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b087      	sub	sp, #28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	f023 0201 	bic.w	r2, r3, #1
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	011b      	lsls	r3, r3, #4
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f023 030a 	bic.w	r3, r3, #10
 8002d0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	621a      	str	r2, [r3, #32]
}
 8002d22:	bf00      	nop
 8002d24:	371c      	adds	r7, #28
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr

08002d2c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b087      	sub	sp, #28
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	f023 0210 	bic.w	r2, r3, #16
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	031b      	lsls	r3, r3, #12
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d68:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	011b      	lsls	r3, r3, #4
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	621a      	str	r2, [r3, #32]
}
 8002d80:	bf00      	nop
 8002d82:	371c      	adds	r7, #28
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bc80      	pop	{r7}
 8002d88:	4770      	bx	lr

08002d8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b085      	sub	sp, #20
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002da0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	f043 0307 	orr.w	r3, r3, #7
 8002dac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	609a      	str	r2, [r3, #8]
}
 8002db4:	bf00      	nop
 8002db6:	3714      	adds	r7, #20
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bc80      	pop	{r7}
 8002dbc:	4770      	bx	lr

08002dbe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b087      	sub	sp, #28
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	60f8      	str	r0, [r7, #12]
 8002dc6:	60b9      	str	r1, [r7, #8]
 8002dc8:	607a      	str	r2, [r7, #4]
 8002dca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dd8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	021a      	lsls	r2, r3, #8
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	431a      	orrs	r2, r3
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	609a      	str	r2, [r3, #8]
}
 8002df2:	bf00      	nop
 8002df4:	371c      	adds	r7, #28
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bc80      	pop	{r7}
 8002dfa:	4770      	bx	lr

08002dfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d101      	bne.n	8002e14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e10:	2302      	movs	r3, #2
 8002e12:	e046      	b.n	8002ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2202      	movs	r2, #2
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a16      	ldr	r2, [pc, #88]	; (8002eac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d00e      	beq.n	8002e76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e60:	d009      	beq.n	8002e76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a12      	ldr	r2, [pc, #72]	; (8002eb0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d004      	beq.n	8002e76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a10      	ldr	r2, [pc, #64]	; (8002eb4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d10c      	bne.n	8002e90 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr
 8002eac:	40012c00 	.word	0x40012c00
 8002eb0:	40000400 	.word	0x40000400
 8002eb4:	40000800 	.word	0x40000800

08002eb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bc80      	pop	{r7}
 8002ec8:	4770      	bx	lr

08002eca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bc80      	pop	{r7}
 8002eda:	4770      	bx	lr

08002edc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e042      	b.n	8002f74 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d106      	bne.n	8002f08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7fd fd76 	bl	80009f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2224      	movs	r2, #36	; 0x24
 8002f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68da      	ldr	r2, [r3, #12]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 fd71 	bl	8003a08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	691a      	ldr	r2, [r3, #16]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	695a      	ldr	r2, [r3, #20]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68da      	ldr	r2, [r3, #12]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2220      	movs	r2, #32
 8002f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08a      	sub	sp, #40	; 0x28
 8002f80:	af02      	add	r7, sp, #8
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	603b      	str	r3, [r7, #0]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b20      	cmp	r3, #32
 8002f9a:	d16d      	bne.n	8003078 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d002      	beq.n	8002fa8 <HAL_UART_Transmit+0x2c>
 8002fa2:	88fb      	ldrh	r3, [r7, #6]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d101      	bne.n	8002fac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e066      	b.n	800307a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2221      	movs	r2, #33	; 0x21
 8002fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fba:	f7fd fdff 	bl	8000bbc <HAL_GetTick>
 8002fbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	88fa      	ldrh	r2, [r7, #6]
 8002fc4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	88fa      	ldrh	r2, [r7, #6]
 8002fca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fd4:	d108      	bne.n	8002fe8 <HAL_UART_Transmit+0x6c>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d104      	bne.n	8002fe8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	61bb      	str	r3, [r7, #24]
 8002fe6:	e003      	b.n	8002ff0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fec:	2300      	movs	r3, #0
 8002fee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ff0:	e02a      	b.n	8003048 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	2180      	movs	r1, #128	; 0x80
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 faf9 	bl	80035f4 <UART_WaitOnFlagUntilTimeout>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e036      	b.n	800307a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10b      	bne.n	800302a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	881b      	ldrh	r3, [r3, #0]
 8003016:	461a      	mov	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003020:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	3302      	adds	r3, #2
 8003026:	61bb      	str	r3, [r7, #24]
 8003028:	e007      	b.n	800303a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	781a      	ldrb	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	3301      	adds	r3, #1
 8003038:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800303e:	b29b      	uxth	r3, r3
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800304c:	b29b      	uxth	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1cf      	bne.n	8002ff2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	2200      	movs	r2, #0
 800305a:	2140      	movs	r1, #64	; 0x40
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f000 fac9 	bl	80035f4 <UART_WaitOnFlagUntilTimeout>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e006      	b.n	800307a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2220      	movs	r2, #32
 8003070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003074:	2300      	movs	r3, #0
 8003076:	e000      	b.n	800307a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003078:	2302      	movs	r3, #2
  }
}
 800307a:	4618      	mov	r0, r3
 800307c:	3720      	adds	r7, #32
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
	...

08003084 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b0ba      	sub	sp, #232	; 0xe8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80030aa:	2300      	movs	r3, #0
 80030ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80030c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10f      	bne.n	80030ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ce:	f003 0320 	and.w	r3, r3, #32
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d009      	beq.n	80030ea <HAL_UART_IRQHandler+0x66>
 80030d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030da:	f003 0320 	and.w	r3, r3, #32
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 fbd1 	bl	800388a <UART_Receive_IT>
      return;
 80030e8:	e25b      	b.n	80035a2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80030ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 80de 	beq.w	80032b0 <HAL_UART_IRQHandler+0x22c>
 80030f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d106      	bne.n	800310e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003104:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 80d1 	beq.w	80032b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800310e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00b      	beq.n	8003132 <HAL_UART_IRQHandler+0xae>
 800311a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800311e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003122:	2b00      	cmp	r3, #0
 8003124:	d005      	beq.n	8003132 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312a:	f043 0201 	orr.w	r2, r3, #1
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003136:	f003 0304 	and.w	r3, r3, #4
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00b      	beq.n	8003156 <HAL_UART_IRQHandler+0xd2>
 800313e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d005      	beq.n	8003156 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314e:	f043 0202 	orr.w	r2, r3, #2
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00b      	beq.n	800317a <HAL_UART_IRQHandler+0xf6>
 8003162:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d005      	beq.n	800317a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003172:	f043 0204 	orr.w	r2, r3, #4
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800317a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b00      	cmp	r3, #0
 8003184:	d011      	beq.n	80031aa <HAL_UART_IRQHandler+0x126>
 8003186:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800318a:	f003 0320 	and.w	r3, r3, #32
 800318e:	2b00      	cmp	r3, #0
 8003190:	d105      	bne.n	800319e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003192:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d005      	beq.n	80031aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a2:	f043 0208 	orr.w	r2, r3, #8
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 81f2 	beq.w	8003598 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031b8:	f003 0320 	and.w	r3, r3, #32
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d008      	beq.n	80031d2 <HAL_UART_IRQHandler+0x14e>
 80031c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031c4:	f003 0320 	and.w	r3, r3, #32
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d002      	beq.n	80031d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 fb5c 	bl	800388a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031dc:	2b00      	cmp	r3, #0
 80031de:	bf14      	ite	ne
 80031e0:	2301      	movne	r3, #1
 80031e2:	2300      	moveq	r3, #0
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d103      	bne.n	80031fe <HAL_UART_IRQHandler+0x17a>
 80031f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d04f      	beq.n	800329e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 fa66 	bl	80036d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320e:	2b00      	cmp	r3, #0
 8003210:	d041      	beq.n	8003296 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	3314      	adds	r3, #20
 8003218:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003220:	e853 3f00 	ldrex	r3, [r3]
 8003224:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003228:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800322c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003230:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	3314      	adds	r3, #20
 800323a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800323e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003242:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003246:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800324a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800324e:	e841 2300 	strex	r3, r2, [r1]
 8003252:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003256:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1d9      	bne.n	8003212 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003262:	2b00      	cmp	r3, #0
 8003264:	d013      	beq.n	800328e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800326a:	4a7e      	ldr	r2, [pc, #504]	; (8003464 <HAL_UART_IRQHandler+0x3e0>)
 800326c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003272:	4618      	mov	r0, r3
 8003274:	f7fe fc10 	bl	8001a98 <HAL_DMA_Abort_IT>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d016      	beq.n	80032ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003288:	4610      	mov	r0, r2
 800328a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800328c:	e00e      	b.n	80032ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f99c 	bl	80035cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003294:	e00a      	b.n	80032ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f998 	bl	80035cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800329c:	e006      	b.n	80032ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f994 	bl	80035cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80032aa:	e175      	b.n	8003598 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ac:	bf00      	nop
    return;
 80032ae:	e173      	b.n	8003598 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	f040 814f 	bne.w	8003558 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80032ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032be:	f003 0310 	and.w	r3, r3, #16
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 8148 	beq.w	8003558 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80032c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032cc:	f003 0310 	and.w	r3, r3, #16
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f000 8141 	beq.w	8003558 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032d6:	2300      	movs	r3, #0
 80032d8:	60bb      	str	r3, [r7, #8]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	60bb      	str	r3, [r7, #8]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	60bb      	str	r3, [r7, #8]
 80032ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 80b6 	beq.w	8003468 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003308:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 8145 	beq.w	800359c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003316:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800331a:	429a      	cmp	r2, r3
 800331c:	f080 813e 	bcs.w	800359c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003326:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	2b20      	cmp	r3, #32
 8003330:	f000 8088 	beq.w	8003444 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	330c      	adds	r3, #12
 800333a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800333e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003342:	e853 3f00 	ldrex	r3, [r3]
 8003346:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800334a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800334e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003352:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	330c      	adds	r3, #12
 800335c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003360:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003364:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003368:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800336c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003370:	e841 2300 	strex	r3, r2, [r1]
 8003374:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003378:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1d9      	bne.n	8003334 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	3314      	adds	r3, #20
 8003386:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003388:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800338a:	e853 3f00 	ldrex	r3, [r3]
 800338e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003390:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003392:	f023 0301 	bic.w	r3, r3, #1
 8003396:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	3314      	adds	r3, #20
 80033a0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80033a4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80033a8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033aa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80033ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80033b0:	e841 2300 	strex	r3, r2, [r1]
 80033b4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80033b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1e1      	bne.n	8003380 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	3314      	adds	r3, #20
 80033c2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033c6:	e853 3f00 	ldrex	r3, [r3]
 80033ca:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80033cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	3314      	adds	r3, #20
 80033dc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80033e0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80033e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80033e6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80033e8:	e841 2300 	strex	r3, r2, [r1]
 80033ec:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80033ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1e3      	bne.n	80033bc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2220      	movs	r2, #32
 80033f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	330c      	adds	r3, #12
 8003408:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800340a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800340c:	e853 3f00 	ldrex	r3, [r3]
 8003410:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003412:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003414:	f023 0310 	bic.w	r3, r3, #16
 8003418:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	330c      	adds	r3, #12
 8003422:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003426:	65ba      	str	r2, [r7, #88]	; 0x58
 8003428:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800342a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800342c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800342e:	e841 2300 	strex	r3, r2, [r1]
 8003432:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1e3      	bne.n	8003402 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343e:	4618      	mov	r0, r3
 8003440:	f7fe faef 	bl	8001a22 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2202      	movs	r2, #2
 8003448:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003452:	b29b      	uxth	r3, r3
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	b29b      	uxth	r3, r3
 8003458:	4619      	mov	r1, r3
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f8bf 	bl	80035de <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003460:	e09c      	b.n	800359c <HAL_UART_IRQHandler+0x518>
 8003462:	bf00      	nop
 8003464:	08003795 	.word	0x08003795
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003470:	b29b      	uxth	r3, r3
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800347c:	b29b      	uxth	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 808e 	beq.w	80035a0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003484:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 8089 	beq.w	80035a0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	330c      	adds	r3, #12
 8003494:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003498:	e853 3f00 	ldrex	r3, [r3]
 800349c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800349e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	330c      	adds	r3, #12
 80034ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80034b2:	647a      	str	r2, [r7, #68]	; 0x44
 80034b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034ba:	e841 2300 	strex	r3, r2, [r1]
 80034be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80034c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1e3      	bne.n	800348e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	3314      	adds	r3, #20
 80034cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	e853 3f00 	ldrex	r3, [r3]
 80034d4:	623b      	str	r3, [r7, #32]
   return(result);
 80034d6:	6a3b      	ldr	r3, [r7, #32]
 80034d8:	f023 0301 	bic.w	r3, r3, #1
 80034dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	3314      	adds	r3, #20
 80034e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80034ea:	633a      	str	r2, [r7, #48]	; 0x30
 80034ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034f2:	e841 2300 	strex	r3, r2, [r1]
 80034f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80034f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1e3      	bne.n	80034c6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2220      	movs	r2, #32
 8003502:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	330c      	adds	r3, #12
 8003512:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	e853 3f00 	ldrex	r3, [r3]
 800351a:	60fb      	str	r3, [r7, #12]
   return(result);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f023 0310 	bic.w	r3, r3, #16
 8003522:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	330c      	adds	r3, #12
 800352c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003530:	61fa      	str	r2, [r7, #28]
 8003532:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003534:	69b9      	ldr	r1, [r7, #24]
 8003536:	69fa      	ldr	r2, [r7, #28]
 8003538:	e841 2300 	strex	r3, r2, [r1]
 800353c:	617b      	str	r3, [r7, #20]
   return(result);
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1e3      	bne.n	800350c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2202      	movs	r2, #2
 8003548:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800354a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800354e:	4619      	mov	r1, r3
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f844 	bl	80035de <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003556:	e023      	b.n	80035a0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800355c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003560:	2b00      	cmp	r3, #0
 8003562:	d009      	beq.n	8003578 <HAL_UART_IRQHandler+0x4f4>
 8003564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356c:	2b00      	cmp	r3, #0
 800356e:	d003      	beq.n	8003578 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f923 	bl	80037bc <UART_Transmit_IT>
    return;
 8003576:	e014      	b.n	80035a2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800357c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00e      	beq.n	80035a2 <HAL_UART_IRQHandler+0x51e>
 8003584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358c:	2b00      	cmp	r3, #0
 800358e:	d008      	beq.n	80035a2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f962 	bl	800385a <UART_EndTransmit_IT>
    return;
 8003596:	e004      	b.n	80035a2 <HAL_UART_IRQHandler+0x51e>
    return;
 8003598:	bf00      	nop
 800359a:	e002      	b.n	80035a2 <HAL_UART_IRQHandler+0x51e>
      return;
 800359c:	bf00      	nop
 800359e:	e000      	b.n	80035a2 <HAL_UART_IRQHandler+0x51e>
      return;
 80035a0:	bf00      	nop
  }
}
 80035a2:	37e8      	adds	r7, #232	; 0xe8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bc80      	pop	{r7}
 80035b8:	4770      	bx	lr

080035ba <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bc80      	pop	{r7}
 80035ca:	4770      	bx	lr

080035cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	bc80      	pop	{r7}
 80035dc:	4770      	bx	lr

080035de <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035de:	b480      	push	{r7}
 80035e0:	b083      	sub	sp, #12
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
 80035e6:	460b      	mov	r3, r1
 80035e8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bc80      	pop	{r7}
 80035f2:	4770      	bx	lr

080035f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b090      	sub	sp, #64	; 0x40
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	603b      	str	r3, [r7, #0]
 8003600:	4613      	mov	r3, r2
 8003602:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003604:	e050      	b.n	80036a8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003606:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360c:	d04c      	beq.n	80036a8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800360e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003610:	2b00      	cmp	r3, #0
 8003612:	d007      	beq.n	8003624 <UART_WaitOnFlagUntilTimeout+0x30>
 8003614:	f7fd fad2 	bl	8000bbc <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003620:	429a      	cmp	r2, r3
 8003622:	d241      	bcs.n	80036a8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	330c      	adds	r3, #12
 800362a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362e:	e853 3f00 	ldrex	r3, [r3]
 8003632:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003636:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800363a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	330c      	adds	r3, #12
 8003642:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003644:	637a      	str	r2, [r7, #52]	; 0x34
 8003646:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003648:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800364a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800364c:	e841 2300 	strex	r3, r2, [r1]
 8003650:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1e5      	bne.n	8003624 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	3314      	adds	r3, #20
 800365e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	e853 3f00 	ldrex	r3, [r3]
 8003666:	613b      	str	r3, [r7, #16]
   return(result);
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	f023 0301 	bic.w	r3, r3, #1
 800366e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	3314      	adds	r3, #20
 8003676:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003678:	623a      	str	r2, [r7, #32]
 800367a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367c:	69f9      	ldr	r1, [r7, #28]
 800367e:	6a3a      	ldr	r2, [r7, #32]
 8003680:	e841 2300 	strex	r3, r2, [r1]
 8003684:	61bb      	str	r3, [r7, #24]
   return(result);
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1e5      	bne.n	8003658 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2220      	movs	r2, #32
 8003690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2220      	movs	r2, #32
 8003698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e00f      	b.n	80036c8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	4013      	ands	r3, r2
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	bf0c      	ite	eq
 80036b8:	2301      	moveq	r3, #1
 80036ba:	2300      	movne	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	461a      	mov	r2, r3
 80036c0:	79fb      	ldrb	r3, [r7, #7]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d09f      	beq.n	8003606 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3740      	adds	r7, #64	; 0x40
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b095      	sub	sp, #84	; 0x54
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	330c      	adds	r3, #12
 80036de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036e2:	e853 3f00 	ldrex	r3, [r3]
 80036e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80036e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	330c      	adds	r3, #12
 80036f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036f8:	643a      	str	r2, [r7, #64]	; 0x40
 80036fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80036fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003700:	e841 2300 	strex	r3, r2, [r1]
 8003704:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1e5      	bne.n	80036d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	3314      	adds	r3, #20
 8003712:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003714:	6a3b      	ldr	r3, [r7, #32]
 8003716:	e853 3f00 	ldrex	r3, [r3]
 800371a:	61fb      	str	r3, [r7, #28]
   return(result);
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	f023 0301 	bic.w	r3, r3, #1
 8003722:	64bb      	str	r3, [r7, #72]	; 0x48
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	3314      	adds	r3, #20
 800372a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800372c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800372e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003730:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003732:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003734:	e841 2300 	strex	r3, r2, [r1]
 8003738:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1e5      	bne.n	800370c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003744:	2b01      	cmp	r3, #1
 8003746:	d119      	bne.n	800377c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	330c      	adds	r3, #12
 800374e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	e853 3f00 	ldrex	r3, [r3]
 8003756:	60bb      	str	r3, [r7, #8]
   return(result);
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	f023 0310 	bic.w	r3, r3, #16
 800375e:	647b      	str	r3, [r7, #68]	; 0x44
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	330c      	adds	r3, #12
 8003766:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003768:	61ba      	str	r2, [r7, #24]
 800376a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376c:	6979      	ldr	r1, [r7, #20]
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	e841 2300 	strex	r3, r2, [r1]
 8003774:	613b      	str	r3, [r7, #16]
   return(result);
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1e5      	bne.n	8003748 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2220      	movs	r2, #32
 8003780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	631a      	str	r2, [r3, #48]	; 0x30
}
 800378a:	bf00      	nop
 800378c:	3754      	adds	r7, #84	; 0x54
 800378e:	46bd      	mov	sp, r7
 8003790:	bc80      	pop	{r7}
 8003792:	4770      	bx	lr

08003794 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f7ff ff0c 	bl	80035cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037b4:	bf00      	nop
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b21      	cmp	r3, #33	; 0x21
 80037ce:	d13e      	bne.n	800384e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d8:	d114      	bne.n	8003804 <UART_Transmit_IT+0x48>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d110      	bne.n	8003804 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	881b      	ldrh	r3, [r3, #0]
 80037ec:	461a      	mov	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037f6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	1c9a      	adds	r2, r3, #2
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	621a      	str	r2, [r3, #32]
 8003802:	e008      	b.n	8003816 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a1b      	ldr	r3, [r3, #32]
 8003808:	1c59      	adds	r1, r3, #1
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	6211      	str	r1, [r2, #32]
 800380e:	781a      	ldrb	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800381a:	b29b      	uxth	r3, r3
 800381c:	3b01      	subs	r3, #1
 800381e:	b29b      	uxth	r3, r3
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	4619      	mov	r1, r3
 8003824:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10f      	bne.n	800384a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68da      	ldr	r2, [r3, #12]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003838:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68da      	ldr	r2, [r3, #12]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003848:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800384a:	2300      	movs	r3, #0
 800384c:	e000      	b.n	8003850 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800384e:	2302      	movs	r3, #2
  }
}
 8003850:	4618      	mov	r0, r3
 8003852:	3714      	adds	r7, #20
 8003854:	46bd      	mov	sp, r7
 8003856:	bc80      	pop	{r7}
 8003858:	4770      	bx	lr

0800385a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b082      	sub	sp, #8
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003870:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2220      	movs	r2, #32
 8003876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7ff fe94 	bl	80035a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b08c      	sub	sp, #48	; 0x30
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b22      	cmp	r3, #34	; 0x22
 800389c:	f040 80ae 	bne.w	80039fc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038a8:	d117      	bne.n	80038da <UART_Receive_IT+0x50>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d113      	bne.n	80038da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80038b2:	2300      	movs	r3, #0
 80038b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d2:	1c9a      	adds	r2, r3, #2
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	629a      	str	r2, [r3, #40]	; 0x28
 80038d8:	e026      	b.n	8003928 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80038e0:	2300      	movs	r3, #0
 80038e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ec:	d007      	beq.n	80038fe <UART_Receive_IT+0x74>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10a      	bne.n	800390c <UART_Receive_IT+0x82>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d106      	bne.n	800390c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	b2da      	uxtb	r2, r3
 8003906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003908:	701a      	strb	r2, [r3, #0]
 800390a:	e008      	b.n	800391e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	b2db      	uxtb	r3, r3
 8003914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003918:	b2da      	uxtb	r2, r3
 800391a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800391c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800392c:	b29b      	uxth	r3, r3
 800392e:	3b01      	subs	r3, #1
 8003930:	b29b      	uxth	r3, r3
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	4619      	mov	r1, r3
 8003936:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003938:	2b00      	cmp	r3, #0
 800393a:	d15d      	bne.n	80039f8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68da      	ldr	r2, [r3, #12]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0220 	bic.w	r2, r2, #32
 800394a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68da      	ldr	r2, [r3, #12]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800395a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	695a      	ldr	r2, [r3, #20]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 0201 	bic.w	r2, r2, #1
 800396a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2220      	movs	r2, #32
 8003970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	2b01      	cmp	r3, #1
 8003980:	d135      	bne.n	80039ee <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	330c      	adds	r3, #12
 800398e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	e853 3f00 	ldrex	r3, [r3]
 8003996:	613b      	str	r3, [r7, #16]
   return(result);
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	f023 0310 	bic.w	r3, r3, #16
 800399e:	627b      	str	r3, [r7, #36]	; 0x24
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	330c      	adds	r3, #12
 80039a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039a8:	623a      	str	r2, [r7, #32]
 80039aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ac:	69f9      	ldr	r1, [r7, #28]
 80039ae:	6a3a      	ldr	r2, [r7, #32]
 80039b0:	e841 2300 	strex	r3, r2, [r1]
 80039b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1e5      	bne.n	8003988 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0310 	and.w	r3, r3, #16
 80039c6:	2b10      	cmp	r3, #16
 80039c8:	d10a      	bne.n	80039e0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039ca:	2300      	movs	r3, #0
 80039cc:	60fb      	str	r3, [r7, #12]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	60fb      	str	r3, [r7, #12]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80039e4:	4619      	mov	r1, r3
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7ff fdf9 	bl	80035de <HAL_UARTEx_RxEventCallback>
 80039ec:	e002      	b.n	80039f4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f7ff fde3 	bl	80035ba <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80039f4:	2300      	movs	r3, #0
 80039f6:	e002      	b.n	80039fe <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80039f8:	2300      	movs	r3, #0
 80039fa:	e000      	b.n	80039fe <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80039fc:	2302      	movs	r3, #2
  }
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3730      	adds	r7, #48	; 0x30
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
	...

08003a08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689a      	ldr	r2, [r3, #8]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003a42:	f023 030c 	bic.w	r3, r3, #12
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6812      	ldr	r2, [r2, #0]
 8003a4a:	68b9      	ldr	r1, [r7, #8]
 8003a4c:	430b      	orrs	r3, r1
 8003a4e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	699a      	ldr	r2, [r3, #24]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a2c      	ldr	r2, [pc, #176]	; (8003b1c <UART_SetConfig+0x114>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d103      	bne.n	8003a78 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a70:	f7fe fe04 	bl	800267c <HAL_RCC_GetPCLK2Freq>
 8003a74:	60f8      	str	r0, [r7, #12]
 8003a76:	e002      	b.n	8003a7e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a78:	f7fe fdec 	bl	8002654 <HAL_RCC_GetPCLK1Freq>
 8003a7c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	4613      	mov	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	009a      	lsls	r2, r3, #2
 8003a88:	441a      	add	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a94:	4a22      	ldr	r2, [pc, #136]	; (8003b20 <UART_SetConfig+0x118>)
 8003a96:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9a:	095b      	lsrs	r3, r3, #5
 8003a9c:	0119      	lsls	r1, r3, #4
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4413      	add	r3, r2
 8003aa6:	009a      	lsls	r2, r3, #2
 8003aa8:	441a      	add	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ab4:	4b1a      	ldr	r3, [pc, #104]	; (8003b20 <UART_SetConfig+0x118>)
 8003ab6:	fba3 0302 	umull	r0, r3, r3, r2
 8003aba:	095b      	lsrs	r3, r3, #5
 8003abc:	2064      	movs	r0, #100	; 0x64
 8003abe:	fb00 f303 	mul.w	r3, r0, r3
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	3332      	adds	r3, #50	; 0x32
 8003ac8:	4a15      	ldr	r2, [pc, #84]	; (8003b20 <UART_SetConfig+0x118>)
 8003aca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ace:	095b      	lsrs	r3, r3, #5
 8003ad0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ad4:	4419      	add	r1, r3
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	009a      	lsls	r2, r3, #2
 8003ae0:	441a      	add	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003aec:	4b0c      	ldr	r3, [pc, #48]	; (8003b20 <UART_SetConfig+0x118>)
 8003aee:	fba3 0302 	umull	r0, r3, r3, r2
 8003af2:	095b      	lsrs	r3, r3, #5
 8003af4:	2064      	movs	r0, #100	; 0x64
 8003af6:	fb00 f303 	mul.w	r3, r0, r3
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	011b      	lsls	r3, r3, #4
 8003afe:	3332      	adds	r3, #50	; 0x32
 8003b00:	4a07      	ldr	r2, [pc, #28]	; (8003b20 <UART_SetConfig+0x118>)
 8003b02:	fba2 2303 	umull	r2, r3, r2, r3
 8003b06:	095b      	lsrs	r3, r3, #5
 8003b08:	f003 020f 	and.w	r2, r3, #15
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	440a      	add	r2, r1
 8003b12:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003b14:	bf00      	nop
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40013800 	.word	0x40013800
 8003b20:	51eb851f 	.word	0x51eb851f

08003b24 <std>:
 8003b24:	2300      	movs	r3, #0
 8003b26:	b510      	push	{r4, lr}
 8003b28:	4604      	mov	r4, r0
 8003b2a:	e9c0 3300 	strd	r3, r3, [r0]
 8003b2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b32:	6083      	str	r3, [r0, #8]
 8003b34:	8181      	strh	r1, [r0, #12]
 8003b36:	6643      	str	r3, [r0, #100]	; 0x64
 8003b38:	81c2      	strh	r2, [r0, #14]
 8003b3a:	6183      	str	r3, [r0, #24]
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	2208      	movs	r2, #8
 8003b40:	305c      	adds	r0, #92	; 0x5c
 8003b42:	f000 f9e5 	bl	8003f10 <memset>
 8003b46:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <std+0x38>)
 8003b48:	6224      	str	r4, [r4, #32]
 8003b4a:	6263      	str	r3, [r4, #36]	; 0x24
 8003b4c:	4b04      	ldr	r3, [pc, #16]	; (8003b60 <std+0x3c>)
 8003b4e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b50:	4b04      	ldr	r3, [pc, #16]	; (8003b64 <std+0x40>)
 8003b52:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b54:	4b04      	ldr	r3, [pc, #16]	; (8003b68 <std+0x44>)
 8003b56:	6323      	str	r3, [r4, #48]	; 0x30
 8003b58:	bd10      	pop	{r4, pc}
 8003b5a:	bf00      	nop
 8003b5c:	08003d61 	.word	0x08003d61
 8003b60:	08003d83 	.word	0x08003d83
 8003b64:	08003dbb 	.word	0x08003dbb
 8003b68:	08003ddf 	.word	0x08003ddf

08003b6c <stdio_exit_handler>:
 8003b6c:	4a02      	ldr	r2, [pc, #8]	; (8003b78 <stdio_exit_handler+0xc>)
 8003b6e:	4903      	ldr	r1, [pc, #12]	; (8003b7c <stdio_exit_handler+0x10>)
 8003b70:	4803      	ldr	r0, [pc, #12]	; (8003b80 <stdio_exit_handler+0x14>)
 8003b72:	f000 b869 	b.w	8003c48 <_fwalk_sglue>
 8003b76:	bf00      	nop
 8003b78:	20000014 	.word	0x20000014
 8003b7c:	0800489d 	.word	0x0800489d
 8003b80:	20000020 	.word	0x20000020

08003b84 <cleanup_stdio>:
 8003b84:	6841      	ldr	r1, [r0, #4]
 8003b86:	4b0c      	ldr	r3, [pc, #48]	; (8003bb8 <cleanup_stdio+0x34>)
 8003b88:	b510      	push	{r4, lr}
 8003b8a:	4299      	cmp	r1, r3
 8003b8c:	4604      	mov	r4, r0
 8003b8e:	d001      	beq.n	8003b94 <cleanup_stdio+0x10>
 8003b90:	f000 fe84 	bl	800489c <_fflush_r>
 8003b94:	68a1      	ldr	r1, [r4, #8]
 8003b96:	4b09      	ldr	r3, [pc, #36]	; (8003bbc <cleanup_stdio+0x38>)
 8003b98:	4299      	cmp	r1, r3
 8003b9a:	d002      	beq.n	8003ba2 <cleanup_stdio+0x1e>
 8003b9c:	4620      	mov	r0, r4
 8003b9e:	f000 fe7d 	bl	800489c <_fflush_r>
 8003ba2:	68e1      	ldr	r1, [r4, #12]
 8003ba4:	4b06      	ldr	r3, [pc, #24]	; (8003bc0 <cleanup_stdio+0x3c>)
 8003ba6:	4299      	cmp	r1, r3
 8003ba8:	d004      	beq.n	8003bb4 <cleanup_stdio+0x30>
 8003baa:	4620      	mov	r0, r4
 8003bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bb0:	f000 be74 	b.w	800489c <_fflush_r>
 8003bb4:	bd10      	pop	{r4, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20000174 	.word	0x20000174
 8003bbc:	200001dc 	.word	0x200001dc
 8003bc0:	20000244 	.word	0x20000244

08003bc4 <global_stdio_init.part.0>:
 8003bc4:	b510      	push	{r4, lr}
 8003bc6:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <global_stdio_init.part.0+0x30>)
 8003bc8:	4c0b      	ldr	r4, [pc, #44]	; (8003bf8 <global_stdio_init.part.0+0x34>)
 8003bca:	4a0c      	ldr	r2, [pc, #48]	; (8003bfc <global_stdio_init.part.0+0x38>)
 8003bcc:	4620      	mov	r0, r4
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	2104      	movs	r1, #4
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f7ff ffa6 	bl	8003b24 <std>
 8003bd8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003bdc:	2201      	movs	r2, #1
 8003bde:	2109      	movs	r1, #9
 8003be0:	f7ff ffa0 	bl	8003b24 <std>
 8003be4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003be8:	2202      	movs	r2, #2
 8003bea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bee:	2112      	movs	r1, #18
 8003bf0:	f7ff bf98 	b.w	8003b24 <std>
 8003bf4:	200002ac 	.word	0x200002ac
 8003bf8:	20000174 	.word	0x20000174
 8003bfc:	08003b6d 	.word	0x08003b6d

08003c00 <__sfp_lock_acquire>:
 8003c00:	4801      	ldr	r0, [pc, #4]	; (8003c08 <__sfp_lock_acquire+0x8>)
 8003c02:	f000 b9fd 	b.w	8004000 <__retarget_lock_acquire_recursive>
 8003c06:	bf00      	nop
 8003c08:	200002b5 	.word	0x200002b5

08003c0c <__sfp_lock_release>:
 8003c0c:	4801      	ldr	r0, [pc, #4]	; (8003c14 <__sfp_lock_release+0x8>)
 8003c0e:	f000 b9f8 	b.w	8004002 <__retarget_lock_release_recursive>
 8003c12:	bf00      	nop
 8003c14:	200002b5 	.word	0x200002b5

08003c18 <__sinit>:
 8003c18:	b510      	push	{r4, lr}
 8003c1a:	4604      	mov	r4, r0
 8003c1c:	f7ff fff0 	bl	8003c00 <__sfp_lock_acquire>
 8003c20:	6a23      	ldr	r3, [r4, #32]
 8003c22:	b11b      	cbz	r3, 8003c2c <__sinit+0x14>
 8003c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c28:	f7ff bff0 	b.w	8003c0c <__sfp_lock_release>
 8003c2c:	4b04      	ldr	r3, [pc, #16]	; (8003c40 <__sinit+0x28>)
 8003c2e:	6223      	str	r3, [r4, #32]
 8003c30:	4b04      	ldr	r3, [pc, #16]	; (8003c44 <__sinit+0x2c>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1f5      	bne.n	8003c24 <__sinit+0xc>
 8003c38:	f7ff ffc4 	bl	8003bc4 <global_stdio_init.part.0>
 8003c3c:	e7f2      	b.n	8003c24 <__sinit+0xc>
 8003c3e:	bf00      	nop
 8003c40:	08003b85 	.word	0x08003b85
 8003c44:	200002ac 	.word	0x200002ac

08003c48 <_fwalk_sglue>:
 8003c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c4c:	4607      	mov	r7, r0
 8003c4e:	4688      	mov	r8, r1
 8003c50:	4614      	mov	r4, r2
 8003c52:	2600      	movs	r6, #0
 8003c54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003c58:	f1b9 0901 	subs.w	r9, r9, #1
 8003c5c:	d505      	bpl.n	8003c6a <_fwalk_sglue+0x22>
 8003c5e:	6824      	ldr	r4, [r4, #0]
 8003c60:	2c00      	cmp	r4, #0
 8003c62:	d1f7      	bne.n	8003c54 <_fwalk_sglue+0xc>
 8003c64:	4630      	mov	r0, r6
 8003c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c6a:	89ab      	ldrh	r3, [r5, #12]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d907      	bls.n	8003c80 <_fwalk_sglue+0x38>
 8003c70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c74:	3301      	adds	r3, #1
 8003c76:	d003      	beq.n	8003c80 <_fwalk_sglue+0x38>
 8003c78:	4629      	mov	r1, r5
 8003c7a:	4638      	mov	r0, r7
 8003c7c:	47c0      	blx	r8
 8003c7e:	4306      	orrs	r6, r0
 8003c80:	3568      	adds	r5, #104	; 0x68
 8003c82:	e7e9      	b.n	8003c58 <_fwalk_sglue+0x10>

08003c84 <iprintf>:
 8003c84:	b40f      	push	{r0, r1, r2, r3}
 8003c86:	b507      	push	{r0, r1, r2, lr}
 8003c88:	4906      	ldr	r1, [pc, #24]	; (8003ca4 <iprintf+0x20>)
 8003c8a:	ab04      	add	r3, sp, #16
 8003c8c:	6808      	ldr	r0, [r1, #0]
 8003c8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c92:	6881      	ldr	r1, [r0, #8]
 8003c94:	9301      	str	r3, [sp, #4]
 8003c96:	f000 fad1 	bl	800423c <_vfiprintf_r>
 8003c9a:	b003      	add	sp, #12
 8003c9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ca0:	b004      	add	sp, #16
 8003ca2:	4770      	bx	lr
 8003ca4:	2000006c 	.word	0x2000006c

08003ca8 <_puts_r>:
 8003ca8:	6a03      	ldr	r3, [r0, #32]
 8003caa:	b570      	push	{r4, r5, r6, lr}
 8003cac:	4605      	mov	r5, r0
 8003cae:	460e      	mov	r6, r1
 8003cb0:	6884      	ldr	r4, [r0, #8]
 8003cb2:	b90b      	cbnz	r3, 8003cb8 <_puts_r+0x10>
 8003cb4:	f7ff ffb0 	bl	8003c18 <__sinit>
 8003cb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cba:	07db      	lsls	r3, r3, #31
 8003cbc:	d405      	bmi.n	8003cca <_puts_r+0x22>
 8003cbe:	89a3      	ldrh	r3, [r4, #12]
 8003cc0:	0598      	lsls	r0, r3, #22
 8003cc2:	d402      	bmi.n	8003cca <_puts_r+0x22>
 8003cc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cc6:	f000 f99b 	bl	8004000 <__retarget_lock_acquire_recursive>
 8003cca:	89a3      	ldrh	r3, [r4, #12]
 8003ccc:	0719      	lsls	r1, r3, #28
 8003cce:	d513      	bpl.n	8003cf8 <_puts_r+0x50>
 8003cd0:	6923      	ldr	r3, [r4, #16]
 8003cd2:	b18b      	cbz	r3, 8003cf8 <_puts_r+0x50>
 8003cd4:	3e01      	subs	r6, #1
 8003cd6:	68a3      	ldr	r3, [r4, #8]
 8003cd8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	60a3      	str	r3, [r4, #8]
 8003ce0:	b9e9      	cbnz	r1, 8003d1e <_puts_r+0x76>
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	da2e      	bge.n	8003d44 <_puts_r+0x9c>
 8003ce6:	4622      	mov	r2, r4
 8003ce8:	210a      	movs	r1, #10
 8003cea:	4628      	mov	r0, r5
 8003cec:	f000 f87b 	bl	8003de6 <__swbuf_r>
 8003cf0:	3001      	adds	r0, #1
 8003cf2:	d007      	beq.n	8003d04 <_puts_r+0x5c>
 8003cf4:	250a      	movs	r5, #10
 8003cf6:	e007      	b.n	8003d08 <_puts_r+0x60>
 8003cf8:	4621      	mov	r1, r4
 8003cfa:	4628      	mov	r0, r5
 8003cfc:	f000 f8b0 	bl	8003e60 <__swsetup_r>
 8003d00:	2800      	cmp	r0, #0
 8003d02:	d0e7      	beq.n	8003cd4 <_puts_r+0x2c>
 8003d04:	f04f 35ff 	mov.w	r5, #4294967295
 8003d08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d0a:	07da      	lsls	r2, r3, #31
 8003d0c:	d405      	bmi.n	8003d1a <_puts_r+0x72>
 8003d0e:	89a3      	ldrh	r3, [r4, #12]
 8003d10:	059b      	lsls	r3, r3, #22
 8003d12:	d402      	bmi.n	8003d1a <_puts_r+0x72>
 8003d14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d16:	f000 f974 	bl	8004002 <__retarget_lock_release_recursive>
 8003d1a:	4628      	mov	r0, r5
 8003d1c:	bd70      	pop	{r4, r5, r6, pc}
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	da04      	bge.n	8003d2c <_puts_r+0x84>
 8003d22:	69a2      	ldr	r2, [r4, #24]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	dc06      	bgt.n	8003d36 <_puts_r+0x8e>
 8003d28:	290a      	cmp	r1, #10
 8003d2a:	d004      	beq.n	8003d36 <_puts_r+0x8e>
 8003d2c:	6823      	ldr	r3, [r4, #0]
 8003d2e:	1c5a      	adds	r2, r3, #1
 8003d30:	6022      	str	r2, [r4, #0]
 8003d32:	7019      	strb	r1, [r3, #0]
 8003d34:	e7cf      	b.n	8003cd6 <_puts_r+0x2e>
 8003d36:	4622      	mov	r2, r4
 8003d38:	4628      	mov	r0, r5
 8003d3a:	f000 f854 	bl	8003de6 <__swbuf_r>
 8003d3e:	3001      	adds	r0, #1
 8003d40:	d1c9      	bne.n	8003cd6 <_puts_r+0x2e>
 8003d42:	e7df      	b.n	8003d04 <_puts_r+0x5c>
 8003d44:	250a      	movs	r5, #10
 8003d46:	6823      	ldr	r3, [r4, #0]
 8003d48:	1c5a      	adds	r2, r3, #1
 8003d4a:	6022      	str	r2, [r4, #0]
 8003d4c:	701d      	strb	r5, [r3, #0]
 8003d4e:	e7db      	b.n	8003d08 <_puts_r+0x60>

08003d50 <puts>:
 8003d50:	4b02      	ldr	r3, [pc, #8]	; (8003d5c <puts+0xc>)
 8003d52:	4601      	mov	r1, r0
 8003d54:	6818      	ldr	r0, [r3, #0]
 8003d56:	f7ff bfa7 	b.w	8003ca8 <_puts_r>
 8003d5a:	bf00      	nop
 8003d5c:	2000006c 	.word	0x2000006c

08003d60 <__sread>:
 8003d60:	b510      	push	{r4, lr}
 8003d62:	460c      	mov	r4, r1
 8003d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d68:	f000 f8fc 	bl	8003f64 <_read_r>
 8003d6c:	2800      	cmp	r0, #0
 8003d6e:	bfab      	itete	ge
 8003d70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003d72:	89a3      	ldrhlt	r3, [r4, #12]
 8003d74:	181b      	addge	r3, r3, r0
 8003d76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003d7a:	bfac      	ite	ge
 8003d7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003d7e:	81a3      	strhlt	r3, [r4, #12]
 8003d80:	bd10      	pop	{r4, pc}

08003d82 <__swrite>:
 8003d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d86:	461f      	mov	r7, r3
 8003d88:	898b      	ldrh	r3, [r1, #12]
 8003d8a:	4605      	mov	r5, r0
 8003d8c:	05db      	lsls	r3, r3, #23
 8003d8e:	460c      	mov	r4, r1
 8003d90:	4616      	mov	r6, r2
 8003d92:	d505      	bpl.n	8003da0 <__swrite+0x1e>
 8003d94:	2302      	movs	r3, #2
 8003d96:	2200      	movs	r2, #0
 8003d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d9c:	f000 f8d0 	bl	8003f40 <_lseek_r>
 8003da0:	89a3      	ldrh	r3, [r4, #12]
 8003da2:	4632      	mov	r2, r6
 8003da4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003da8:	81a3      	strh	r3, [r4, #12]
 8003daa:	4628      	mov	r0, r5
 8003dac:	463b      	mov	r3, r7
 8003dae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003db2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003db6:	f000 b8e7 	b.w	8003f88 <_write_r>

08003dba <__sseek>:
 8003dba:	b510      	push	{r4, lr}
 8003dbc:	460c      	mov	r4, r1
 8003dbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dc2:	f000 f8bd 	bl	8003f40 <_lseek_r>
 8003dc6:	1c43      	adds	r3, r0, #1
 8003dc8:	89a3      	ldrh	r3, [r4, #12]
 8003dca:	bf15      	itete	ne
 8003dcc:	6560      	strne	r0, [r4, #84]	; 0x54
 8003dce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003dd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003dd6:	81a3      	strheq	r3, [r4, #12]
 8003dd8:	bf18      	it	ne
 8003dda:	81a3      	strhne	r3, [r4, #12]
 8003ddc:	bd10      	pop	{r4, pc}

08003dde <__sclose>:
 8003dde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003de2:	f000 b89d 	b.w	8003f20 <_close_r>

08003de6 <__swbuf_r>:
 8003de6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003de8:	460e      	mov	r6, r1
 8003dea:	4614      	mov	r4, r2
 8003dec:	4605      	mov	r5, r0
 8003dee:	b118      	cbz	r0, 8003df8 <__swbuf_r+0x12>
 8003df0:	6a03      	ldr	r3, [r0, #32]
 8003df2:	b90b      	cbnz	r3, 8003df8 <__swbuf_r+0x12>
 8003df4:	f7ff ff10 	bl	8003c18 <__sinit>
 8003df8:	69a3      	ldr	r3, [r4, #24]
 8003dfa:	60a3      	str	r3, [r4, #8]
 8003dfc:	89a3      	ldrh	r3, [r4, #12]
 8003dfe:	071a      	lsls	r2, r3, #28
 8003e00:	d525      	bpl.n	8003e4e <__swbuf_r+0x68>
 8003e02:	6923      	ldr	r3, [r4, #16]
 8003e04:	b31b      	cbz	r3, 8003e4e <__swbuf_r+0x68>
 8003e06:	6823      	ldr	r3, [r4, #0]
 8003e08:	6922      	ldr	r2, [r4, #16]
 8003e0a:	b2f6      	uxtb	r6, r6
 8003e0c:	1a98      	subs	r0, r3, r2
 8003e0e:	6963      	ldr	r3, [r4, #20]
 8003e10:	4637      	mov	r7, r6
 8003e12:	4283      	cmp	r3, r0
 8003e14:	dc04      	bgt.n	8003e20 <__swbuf_r+0x3a>
 8003e16:	4621      	mov	r1, r4
 8003e18:	4628      	mov	r0, r5
 8003e1a:	f000 fd3f 	bl	800489c <_fflush_r>
 8003e1e:	b9e0      	cbnz	r0, 8003e5a <__swbuf_r+0x74>
 8003e20:	68a3      	ldr	r3, [r4, #8]
 8003e22:	3b01      	subs	r3, #1
 8003e24:	60a3      	str	r3, [r4, #8]
 8003e26:	6823      	ldr	r3, [r4, #0]
 8003e28:	1c5a      	adds	r2, r3, #1
 8003e2a:	6022      	str	r2, [r4, #0]
 8003e2c:	701e      	strb	r6, [r3, #0]
 8003e2e:	6962      	ldr	r2, [r4, #20]
 8003e30:	1c43      	adds	r3, r0, #1
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d004      	beq.n	8003e40 <__swbuf_r+0x5a>
 8003e36:	89a3      	ldrh	r3, [r4, #12]
 8003e38:	07db      	lsls	r3, r3, #31
 8003e3a:	d506      	bpl.n	8003e4a <__swbuf_r+0x64>
 8003e3c:	2e0a      	cmp	r6, #10
 8003e3e:	d104      	bne.n	8003e4a <__swbuf_r+0x64>
 8003e40:	4621      	mov	r1, r4
 8003e42:	4628      	mov	r0, r5
 8003e44:	f000 fd2a 	bl	800489c <_fflush_r>
 8003e48:	b938      	cbnz	r0, 8003e5a <__swbuf_r+0x74>
 8003e4a:	4638      	mov	r0, r7
 8003e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e4e:	4621      	mov	r1, r4
 8003e50:	4628      	mov	r0, r5
 8003e52:	f000 f805 	bl	8003e60 <__swsetup_r>
 8003e56:	2800      	cmp	r0, #0
 8003e58:	d0d5      	beq.n	8003e06 <__swbuf_r+0x20>
 8003e5a:	f04f 37ff 	mov.w	r7, #4294967295
 8003e5e:	e7f4      	b.n	8003e4a <__swbuf_r+0x64>

08003e60 <__swsetup_r>:
 8003e60:	b538      	push	{r3, r4, r5, lr}
 8003e62:	4b2a      	ldr	r3, [pc, #168]	; (8003f0c <__swsetup_r+0xac>)
 8003e64:	4605      	mov	r5, r0
 8003e66:	6818      	ldr	r0, [r3, #0]
 8003e68:	460c      	mov	r4, r1
 8003e6a:	b118      	cbz	r0, 8003e74 <__swsetup_r+0x14>
 8003e6c:	6a03      	ldr	r3, [r0, #32]
 8003e6e:	b90b      	cbnz	r3, 8003e74 <__swsetup_r+0x14>
 8003e70:	f7ff fed2 	bl	8003c18 <__sinit>
 8003e74:	89a3      	ldrh	r3, [r4, #12]
 8003e76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e7a:	0718      	lsls	r0, r3, #28
 8003e7c:	d422      	bmi.n	8003ec4 <__swsetup_r+0x64>
 8003e7e:	06d9      	lsls	r1, r3, #27
 8003e80:	d407      	bmi.n	8003e92 <__swsetup_r+0x32>
 8003e82:	2309      	movs	r3, #9
 8003e84:	602b      	str	r3, [r5, #0]
 8003e86:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e8e:	81a3      	strh	r3, [r4, #12]
 8003e90:	e034      	b.n	8003efc <__swsetup_r+0x9c>
 8003e92:	0758      	lsls	r0, r3, #29
 8003e94:	d512      	bpl.n	8003ebc <__swsetup_r+0x5c>
 8003e96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e98:	b141      	cbz	r1, 8003eac <__swsetup_r+0x4c>
 8003e9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e9e:	4299      	cmp	r1, r3
 8003ea0:	d002      	beq.n	8003ea8 <__swsetup_r+0x48>
 8003ea2:	4628      	mov	r0, r5
 8003ea4:	f000 f8ae 	bl	8004004 <_free_r>
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	6363      	str	r3, [r4, #52]	; 0x34
 8003eac:	89a3      	ldrh	r3, [r4, #12]
 8003eae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003eb2:	81a3      	strh	r3, [r4, #12]
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	6063      	str	r3, [r4, #4]
 8003eb8:	6923      	ldr	r3, [r4, #16]
 8003eba:	6023      	str	r3, [r4, #0]
 8003ebc:	89a3      	ldrh	r3, [r4, #12]
 8003ebe:	f043 0308 	orr.w	r3, r3, #8
 8003ec2:	81a3      	strh	r3, [r4, #12]
 8003ec4:	6923      	ldr	r3, [r4, #16]
 8003ec6:	b94b      	cbnz	r3, 8003edc <__swsetup_r+0x7c>
 8003ec8:	89a3      	ldrh	r3, [r4, #12]
 8003eca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003ece:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ed2:	d003      	beq.n	8003edc <__swsetup_r+0x7c>
 8003ed4:	4621      	mov	r1, r4
 8003ed6:	4628      	mov	r0, r5
 8003ed8:	f000 fd2d 	bl	8004936 <__smakebuf_r>
 8003edc:	89a0      	ldrh	r0, [r4, #12]
 8003ede:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ee2:	f010 0301 	ands.w	r3, r0, #1
 8003ee6:	d00a      	beq.n	8003efe <__swsetup_r+0x9e>
 8003ee8:	2300      	movs	r3, #0
 8003eea:	60a3      	str	r3, [r4, #8]
 8003eec:	6963      	ldr	r3, [r4, #20]
 8003eee:	425b      	negs	r3, r3
 8003ef0:	61a3      	str	r3, [r4, #24]
 8003ef2:	6923      	ldr	r3, [r4, #16]
 8003ef4:	b943      	cbnz	r3, 8003f08 <__swsetup_r+0xa8>
 8003ef6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003efa:	d1c4      	bne.n	8003e86 <__swsetup_r+0x26>
 8003efc:	bd38      	pop	{r3, r4, r5, pc}
 8003efe:	0781      	lsls	r1, r0, #30
 8003f00:	bf58      	it	pl
 8003f02:	6963      	ldrpl	r3, [r4, #20]
 8003f04:	60a3      	str	r3, [r4, #8]
 8003f06:	e7f4      	b.n	8003ef2 <__swsetup_r+0x92>
 8003f08:	2000      	movs	r0, #0
 8003f0a:	e7f7      	b.n	8003efc <__swsetup_r+0x9c>
 8003f0c:	2000006c 	.word	0x2000006c

08003f10 <memset>:
 8003f10:	4603      	mov	r3, r0
 8003f12:	4402      	add	r2, r0
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d100      	bne.n	8003f1a <memset+0xa>
 8003f18:	4770      	bx	lr
 8003f1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003f1e:	e7f9      	b.n	8003f14 <memset+0x4>

08003f20 <_close_r>:
 8003f20:	b538      	push	{r3, r4, r5, lr}
 8003f22:	2300      	movs	r3, #0
 8003f24:	4d05      	ldr	r5, [pc, #20]	; (8003f3c <_close_r+0x1c>)
 8003f26:	4604      	mov	r4, r0
 8003f28:	4608      	mov	r0, r1
 8003f2a:	602b      	str	r3, [r5, #0]
 8003f2c:	f7fc fc57 	bl	80007de <_close>
 8003f30:	1c43      	adds	r3, r0, #1
 8003f32:	d102      	bne.n	8003f3a <_close_r+0x1a>
 8003f34:	682b      	ldr	r3, [r5, #0]
 8003f36:	b103      	cbz	r3, 8003f3a <_close_r+0x1a>
 8003f38:	6023      	str	r3, [r4, #0]
 8003f3a:	bd38      	pop	{r3, r4, r5, pc}
 8003f3c:	200002b0 	.word	0x200002b0

08003f40 <_lseek_r>:
 8003f40:	b538      	push	{r3, r4, r5, lr}
 8003f42:	4604      	mov	r4, r0
 8003f44:	4608      	mov	r0, r1
 8003f46:	4611      	mov	r1, r2
 8003f48:	2200      	movs	r2, #0
 8003f4a:	4d05      	ldr	r5, [pc, #20]	; (8003f60 <_lseek_r+0x20>)
 8003f4c:	602a      	str	r2, [r5, #0]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	f7fc fc69 	bl	8000826 <_lseek>
 8003f54:	1c43      	adds	r3, r0, #1
 8003f56:	d102      	bne.n	8003f5e <_lseek_r+0x1e>
 8003f58:	682b      	ldr	r3, [r5, #0]
 8003f5a:	b103      	cbz	r3, 8003f5e <_lseek_r+0x1e>
 8003f5c:	6023      	str	r3, [r4, #0]
 8003f5e:	bd38      	pop	{r3, r4, r5, pc}
 8003f60:	200002b0 	.word	0x200002b0

08003f64 <_read_r>:
 8003f64:	b538      	push	{r3, r4, r5, lr}
 8003f66:	4604      	mov	r4, r0
 8003f68:	4608      	mov	r0, r1
 8003f6a:	4611      	mov	r1, r2
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	4d05      	ldr	r5, [pc, #20]	; (8003f84 <_read_r+0x20>)
 8003f70:	602a      	str	r2, [r5, #0]
 8003f72:	461a      	mov	r2, r3
 8003f74:	f7fc fc16 	bl	80007a4 <_read>
 8003f78:	1c43      	adds	r3, r0, #1
 8003f7a:	d102      	bne.n	8003f82 <_read_r+0x1e>
 8003f7c:	682b      	ldr	r3, [r5, #0]
 8003f7e:	b103      	cbz	r3, 8003f82 <_read_r+0x1e>
 8003f80:	6023      	str	r3, [r4, #0]
 8003f82:	bd38      	pop	{r3, r4, r5, pc}
 8003f84:	200002b0 	.word	0x200002b0

08003f88 <_write_r>:
 8003f88:	b538      	push	{r3, r4, r5, lr}
 8003f8a:	4604      	mov	r4, r0
 8003f8c:	4608      	mov	r0, r1
 8003f8e:	4611      	mov	r1, r2
 8003f90:	2200      	movs	r2, #0
 8003f92:	4d05      	ldr	r5, [pc, #20]	; (8003fa8 <_write_r+0x20>)
 8003f94:	602a      	str	r2, [r5, #0]
 8003f96:	461a      	mov	r2, r3
 8003f98:	f7fc fd7e 	bl	8000a98 <_write>
 8003f9c:	1c43      	adds	r3, r0, #1
 8003f9e:	d102      	bne.n	8003fa6 <_write_r+0x1e>
 8003fa0:	682b      	ldr	r3, [r5, #0]
 8003fa2:	b103      	cbz	r3, 8003fa6 <_write_r+0x1e>
 8003fa4:	6023      	str	r3, [r4, #0]
 8003fa6:	bd38      	pop	{r3, r4, r5, pc}
 8003fa8:	200002b0 	.word	0x200002b0

08003fac <__errno>:
 8003fac:	4b01      	ldr	r3, [pc, #4]	; (8003fb4 <__errno+0x8>)
 8003fae:	6818      	ldr	r0, [r3, #0]
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	2000006c 	.word	0x2000006c

08003fb8 <__libc_init_array>:
 8003fb8:	b570      	push	{r4, r5, r6, lr}
 8003fba:	2600      	movs	r6, #0
 8003fbc:	4d0c      	ldr	r5, [pc, #48]	; (8003ff0 <__libc_init_array+0x38>)
 8003fbe:	4c0d      	ldr	r4, [pc, #52]	; (8003ff4 <__libc_init_array+0x3c>)
 8003fc0:	1b64      	subs	r4, r4, r5
 8003fc2:	10a4      	asrs	r4, r4, #2
 8003fc4:	42a6      	cmp	r6, r4
 8003fc6:	d109      	bne.n	8003fdc <__libc_init_array+0x24>
 8003fc8:	f000 fd32 	bl	8004a30 <_init>
 8003fcc:	2600      	movs	r6, #0
 8003fce:	4d0a      	ldr	r5, [pc, #40]	; (8003ff8 <__libc_init_array+0x40>)
 8003fd0:	4c0a      	ldr	r4, [pc, #40]	; (8003ffc <__libc_init_array+0x44>)
 8003fd2:	1b64      	subs	r4, r4, r5
 8003fd4:	10a4      	asrs	r4, r4, #2
 8003fd6:	42a6      	cmp	r6, r4
 8003fd8:	d105      	bne.n	8003fe6 <__libc_init_array+0x2e>
 8003fda:	bd70      	pop	{r4, r5, r6, pc}
 8003fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fe0:	4798      	blx	r3
 8003fe2:	3601      	adds	r6, #1
 8003fe4:	e7ee      	b.n	8003fc4 <__libc_init_array+0xc>
 8003fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fea:	4798      	blx	r3
 8003fec:	3601      	adds	r6, #1
 8003fee:	e7f2      	b.n	8003fd6 <__libc_init_array+0x1e>
 8003ff0:	08004b30 	.word	0x08004b30
 8003ff4:	08004b30 	.word	0x08004b30
 8003ff8:	08004b30 	.word	0x08004b30
 8003ffc:	08004b34 	.word	0x08004b34

08004000 <__retarget_lock_acquire_recursive>:
 8004000:	4770      	bx	lr

08004002 <__retarget_lock_release_recursive>:
 8004002:	4770      	bx	lr

08004004 <_free_r>:
 8004004:	b538      	push	{r3, r4, r5, lr}
 8004006:	4605      	mov	r5, r0
 8004008:	2900      	cmp	r1, #0
 800400a:	d040      	beq.n	800408e <_free_r+0x8a>
 800400c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004010:	1f0c      	subs	r4, r1, #4
 8004012:	2b00      	cmp	r3, #0
 8004014:	bfb8      	it	lt
 8004016:	18e4      	addlt	r4, r4, r3
 8004018:	f000 f8dc 	bl	80041d4 <__malloc_lock>
 800401c:	4a1c      	ldr	r2, [pc, #112]	; (8004090 <_free_r+0x8c>)
 800401e:	6813      	ldr	r3, [r2, #0]
 8004020:	b933      	cbnz	r3, 8004030 <_free_r+0x2c>
 8004022:	6063      	str	r3, [r4, #4]
 8004024:	6014      	str	r4, [r2, #0]
 8004026:	4628      	mov	r0, r5
 8004028:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800402c:	f000 b8d8 	b.w	80041e0 <__malloc_unlock>
 8004030:	42a3      	cmp	r3, r4
 8004032:	d908      	bls.n	8004046 <_free_r+0x42>
 8004034:	6820      	ldr	r0, [r4, #0]
 8004036:	1821      	adds	r1, r4, r0
 8004038:	428b      	cmp	r3, r1
 800403a:	bf01      	itttt	eq
 800403c:	6819      	ldreq	r1, [r3, #0]
 800403e:	685b      	ldreq	r3, [r3, #4]
 8004040:	1809      	addeq	r1, r1, r0
 8004042:	6021      	streq	r1, [r4, #0]
 8004044:	e7ed      	b.n	8004022 <_free_r+0x1e>
 8004046:	461a      	mov	r2, r3
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	b10b      	cbz	r3, 8004050 <_free_r+0x4c>
 800404c:	42a3      	cmp	r3, r4
 800404e:	d9fa      	bls.n	8004046 <_free_r+0x42>
 8004050:	6811      	ldr	r1, [r2, #0]
 8004052:	1850      	adds	r0, r2, r1
 8004054:	42a0      	cmp	r0, r4
 8004056:	d10b      	bne.n	8004070 <_free_r+0x6c>
 8004058:	6820      	ldr	r0, [r4, #0]
 800405a:	4401      	add	r1, r0
 800405c:	1850      	adds	r0, r2, r1
 800405e:	4283      	cmp	r3, r0
 8004060:	6011      	str	r1, [r2, #0]
 8004062:	d1e0      	bne.n	8004026 <_free_r+0x22>
 8004064:	6818      	ldr	r0, [r3, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	4408      	add	r0, r1
 800406a:	6010      	str	r0, [r2, #0]
 800406c:	6053      	str	r3, [r2, #4]
 800406e:	e7da      	b.n	8004026 <_free_r+0x22>
 8004070:	d902      	bls.n	8004078 <_free_r+0x74>
 8004072:	230c      	movs	r3, #12
 8004074:	602b      	str	r3, [r5, #0]
 8004076:	e7d6      	b.n	8004026 <_free_r+0x22>
 8004078:	6820      	ldr	r0, [r4, #0]
 800407a:	1821      	adds	r1, r4, r0
 800407c:	428b      	cmp	r3, r1
 800407e:	bf01      	itttt	eq
 8004080:	6819      	ldreq	r1, [r3, #0]
 8004082:	685b      	ldreq	r3, [r3, #4]
 8004084:	1809      	addeq	r1, r1, r0
 8004086:	6021      	streq	r1, [r4, #0]
 8004088:	6063      	str	r3, [r4, #4]
 800408a:	6054      	str	r4, [r2, #4]
 800408c:	e7cb      	b.n	8004026 <_free_r+0x22>
 800408e:	bd38      	pop	{r3, r4, r5, pc}
 8004090:	200002b8 	.word	0x200002b8

08004094 <sbrk_aligned>:
 8004094:	b570      	push	{r4, r5, r6, lr}
 8004096:	4e0e      	ldr	r6, [pc, #56]	; (80040d0 <sbrk_aligned+0x3c>)
 8004098:	460c      	mov	r4, r1
 800409a:	6831      	ldr	r1, [r6, #0]
 800409c:	4605      	mov	r5, r0
 800409e:	b911      	cbnz	r1, 80040a6 <sbrk_aligned+0x12>
 80040a0:	f000 fca8 	bl	80049f4 <_sbrk_r>
 80040a4:	6030      	str	r0, [r6, #0]
 80040a6:	4621      	mov	r1, r4
 80040a8:	4628      	mov	r0, r5
 80040aa:	f000 fca3 	bl	80049f4 <_sbrk_r>
 80040ae:	1c43      	adds	r3, r0, #1
 80040b0:	d00a      	beq.n	80040c8 <sbrk_aligned+0x34>
 80040b2:	1cc4      	adds	r4, r0, #3
 80040b4:	f024 0403 	bic.w	r4, r4, #3
 80040b8:	42a0      	cmp	r0, r4
 80040ba:	d007      	beq.n	80040cc <sbrk_aligned+0x38>
 80040bc:	1a21      	subs	r1, r4, r0
 80040be:	4628      	mov	r0, r5
 80040c0:	f000 fc98 	bl	80049f4 <_sbrk_r>
 80040c4:	3001      	adds	r0, #1
 80040c6:	d101      	bne.n	80040cc <sbrk_aligned+0x38>
 80040c8:	f04f 34ff 	mov.w	r4, #4294967295
 80040cc:	4620      	mov	r0, r4
 80040ce:	bd70      	pop	{r4, r5, r6, pc}
 80040d0:	200002bc 	.word	0x200002bc

080040d4 <_malloc_r>:
 80040d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040d8:	1ccd      	adds	r5, r1, #3
 80040da:	f025 0503 	bic.w	r5, r5, #3
 80040de:	3508      	adds	r5, #8
 80040e0:	2d0c      	cmp	r5, #12
 80040e2:	bf38      	it	cc
 80040e4:	250c      	movcc	r5, #12
 80040e6:	2d00      	cmp	r5, #0
 80040e8:	4607      	mov	r7, r0
 80040ea:	db01      	blt.n	80040f0 <_malloc_r+0x1c>
 80040ec:	42a9      	cmp	r1, r5
 80040ee:	d905      	bls.n	80040fc <_malloc_r+0x28>
 80040f0:	230c      	movs	r3, #12
 80040f2:	2600      	movs	r6, #0
 80040f4:	603b      	str	r3, [r7, #0]
 80040f6:	4630      	mov	r0, r6
 80040f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80041d0 <_malloc_r+0xfc>
 8004100:	f000 f868 	bl	80041d4 <__malloc_lock>
 8004104:	f8d8 3000 	ldr.w	r3, [r8]
 8004108:	461c      	mov	r4, r3
 800410a:	bb5c      	cbnz	r4, 8004164 <_malloc_r+0x90>
 800410c:	4629      	mov	r1, r5
 800410e:	4638      	mov	r0, r7
 8004110:	f7ff ffc0 	bl	8004094 <sbrk_aligned>
 8004114:	1c43      	adds	r3, r0, #1
 8004116:	4604      	mov	r4, r0
 8004118:	d155      	bne.n	80041c6 <_malloc_r+0xf2>
 800411a:	f8d8 4000 	ldr.w	r4, [r8]
 800411e:	4626      	mov	r6, r4
 8004120:	2e00      	cmp	r6, #0
 8004122:	d145      	bne.n	80041b0 <_malloc_r+0xdc>
 8004124:	2c00      	cmp	r4, #0
 8004126:	d048      	beq.n	80041ba <_malloc_r+0xe6>
 8004128:	6823      	ldr	r3, [r4, #0]
 800412a:	4631      	mov	r1, r6
 800412c:	4638      	mov	r0, r7
 800412e:	eb04 0903 	add.w	r9, r4, r3
 8004132:	f000 fc5f 	bl	80049f4 <_sbrk_r>
 8004136:	4581      	cmp	r9, r0
 8004138:	d13f      	bne.n	80041ba <_malloc_r+0xe6>
 800413a:	6821      	ldr	r1, [r4, #0]
 800413c:	4638      	mov	r0, r7
 800413e:	1a6d      	subs	r5, r5, r1
 8004140:	4629      	mov	r1, r5
 8004142:	f7ff ffa7 	bl	8004094 <sbrk_aligned>
 8004146:	3001      	adds	r0, #1
 8004148:	d037      	beq.n	80041ba <_malloc_r+0xe6>
 800414a:	6823      	ldr	r3, [r4, #0]
 800414c:	442b      	add	r3, r5
 800414e:	6023      	str	r3, [r4, #0]
 8004150:	f8d8 3000 	ldr.w	r3, [r8]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d038      	beq.n	80041ca <_malloc_r+0xf6>
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	42a2      	cmp	r2, r4
 800415c:	d12b      	bne.n	80041b6 <_malloc_r+0xe2>
 800415e:	2200      	movs	r2, #0
 8004160:	605a      	str	r2, [r3, #4]
 8004162:	e00f      	b.n	8004184 <_malloc_r+0xb0>
 8004164:	6822      	ldr	r2, [r4, #0]
 8004166:	1b52      	subs	r2, r2, r5
 8004168:	d41f      	bmi.n	80041aa <_malloc_r+0xd6>
 800416a:	2a0b      	cmp	r2, #11
 800416c:	d917      	bls.n	800419e <_malloc_r+0xca>
 800416e:	1961      	adds	r1, r4, r5
 8004170:	42a3      	cmp	r3, r4
 8004172:	6025      	str	r5, [r4, #0]
 8004174:	bf18      	it	ne
 8004176:	6059      	strne	r1, [r3, #4]
 8004178:	6863      	ldr	r3, [r4, #4]
 800417a:	bf08      	it	eq
 800417c:	f8c8 1000 	streq.w	r1, [r8]
 8004180:	5162      	str	r2, [r4, r5]
 8004182:	604b      	str	r3, [r1, #4]
 8004184:	4638      	mov	r0, r7
 8004186:	f104 060b 	add.w	r6, r4, #11
 800418a:	f000 f829 	bl	80041e0 <__malloc_unlock>
 800418e:	f026 0607 	bic.w	r6, r6, #7
 8004192:	1d23      	adds	r3, r4, #4
 8004194:	1af2      	subs	r2, r6, r3
 8004196:	d0ae      	beq.n	80040f6 <_malloc_r+0x22>
 8004198:	1b9b      	subs	r3, r3, r6
 800419a:	50a3      	str	r3, [r4, r2]
 800419c:	e7ab      	b.n	80040f6 <_malloc_r+0x22>
 800419e:	42a3      	cmp	r3, r4
 80041a0:	6862      	ldr	r2, [r4, #4]
 80041a2:	d1dd      	bne.n	8004160 <_malloc_r+0x8c>
 80041a4:	f8c8 2000 	str.w	r2, [r8]
 80041a8:	e7ec      	b.n	8004184 <_malloc_r+0xb0>
 80041aa:	4623      	mov	r3, r4
 80041ac:	6864      	ldr	r4, [r4, #4]
 80041ae:	e7ac      	b.n	800410a <_malloc_r+0x36>
 80041b0:	4634      	mov	r4, r6
 80041b2:	6876      	ldr	r6, [r6, #4]
 80041b4:	e7b4      	b.n	8004120 <_malloc_r+0x4c>
 80041b6:	4613      	mov	r3, r2
 80041b8:	e7cc      	b.n	8004154 <_malloc_r+0x80>
 80041ba:	230c      	movs	r3, #12
 80041bc:	4638      	mov	r0, r7
 80041be:	603b      	str	r3, [r7, #0]
 80041c0:	f000 f80e 	bl	80041e0 <__malloc_unlock>
 80041c4:	e797      	b.n	80040f6 <_malloc_r+0x22>
 80041c6:	6025      	str	r5, [r4, #0]
 80041c8:	e7dc      	b.n	8004184 <_malloc_r+0xb0>
 80041ca:	605b      	str	r3, [r3, #4]
 80041cc:	deff      	udf	#255	; 0xff
 80041ce:	bf00      	nop
 80041d0:	200002b8 	.word	0x200002b8

080041d4 <__malloc_lock>:
 80041d4:	4801      	ldr	r0, [pc, #4]	; (80041dc <__malloc_lock+0x8>)
 80041d6:	f7ff bf13 	b.w	8004000 <__retarget_lock_acquire_recursive>
 80041da:	bf00      	nop
 80041dc:	200002b4 	.word	0x200002b4

080041e0 <__malloc_unlock>:
 80041e0:	4801      	ldr	r0, [pc, #4]	; (80041e8 <__malloc_unlock+0x8>)
 80041e2:	f7ff bf0e 	b.w	8004002 <__retarget_lock_release_recursive>
 80041e6:	bf00      	nop
 80041e8:	200002b4 	.word	0x200002b4

080041ec <__sfputc_r>:
 80041ec:	6893      	ldr	r3, [r2, #8]
 80041ee:	b410      	push	{r4}
 80041f0:	3b01      	subs	r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	6093      	str	r3, [r2, #8]
 80041f6:	da07      	bge.n	8004208 <__sfputc_r+0x1c>
 80041f8:	6994      	ldr	r4, [r2, #24]
 80041fa:	42a3      	cmp	r3, r4
 80041fc:	db01      	blt.n	8004202 <__sfputc_r+0x16>
 80041fe:	290a      	cmp	r1, #10
 8004200:	d102      	bne.n	8004208 <__sfputc_r+0x1c>
 8004202:	bc10      	pop	{r4}
 8004204:	f7ff bdef 	b.w	8003de6 <__swbuf_r>
 8004208:	6813      	ldr	r3, [r2, #0]
 800420a:	1c58      	adds	r0, r3, #1
 800420c:	6010      	str	r0, [r2, #0]
 800420e:	7019      	strb	r1, [r3, #0]
 8004210:	4608      	mov	r0, r1
 8004212:	bc10      	pop	{r4}
 8004214:	4770      	bx	lr

08004216 <__sfputs_r>:
 8004216:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004218:	4606      	mov	r6, r0
 800421a:	460f      	mov	r7, r1
 800421c:	4614      	mov	r4, r2
 800421e:	18d5      	adds	r5, r2, r3
 8004220:	42ac      	cmp	r4, r5
 8004222:	d101      	bne.n	8004228 <__sfputs_r+0x12>
 8004224:	2000      	movs	r0, #0
 8004226:	e007      	b.n	8004238 <__sfputs_r+0x22>
 8004228:	463a      	mov	r2, r7
 800422a:	4630      	mov	r0, r6
 800422c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004230:	f7ff ffdc 	bl	80041ec <__sfputc_r>
 8004234:	1c43      	adds	r3, r0, #1
 8004236:	d1f3      	bne.n	8004220 <__sfputs_r+0xa>
 8004238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800423c <_vfiprintf_r>:
 800423c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004240:	460d      	mov	r5, r1
 8004242:	4614      	mov	r4, r2
 8004244:	4698      	mov	r8, r3
 8004246:	4606      	mov	r6, r0
 8004248:	b09d      	sub	sp, #116	; 0x74
 800424a:	b118      	cbz	r0, 8004254 <_vfiprintf_r+0x18>
 800424c:	6a03      	ldr	r3, [r0, #32]
 800424e:	b90b      	cbnz	r3, 8004254 <_vfiprintf_r+0x18>
 8004250:	f7ff fce2 	bl	8003c18 <__sinit>
 8004254:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004256:	07d9      	lsls	r1, r3, #31
 8004258:	d405      	bmi.n	8004266 <_vfiprintf_r+0x2a>
 800425a:	89ab      	ldrh	r3, [r5, #12]
 800425c:	059a      	lsls	r2, r3, #22
 800425e:	d402      	bmi.n	8004266 <_vfiprintf_r+0x2a>
 8004260:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004262:	f7ff fecd 	bl	8004000 <__retarget_lock_acquire_recursive>
 8004266:	89ab      	ldrh	r3, [r5, #12]
 8004268:	071b      	lsls	r3, r3, #28
 800426a:	d501      	bpl.n	8004270 <_vfiprintf_r+0x34>
 800426c:	692b      	ldr	r3, [r5, #16]
 800426e:	b99b      	cbnz	r3, 8004298 <_vfiprintf_r+0x5c>
 8004270:	4629      	mov	r1, r5
 8004272:	4630      	mov	r0, r6
 8004274:	f7ff fdf4 	bl	8003e60 <__swsetup_r>
 8004278:	b170      	cbz	r0, 8004298 <_vfiprintf_r+0x5c>
 800427a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800427c:	07dc      	lsls	r4, r3, #31
 800427e:	d504      	bpl.n	800428a <_vfiprintf_r+0x4e>
 8004280:	f04f 30ff 	mov.w	r0, #4294967295
 8004284:	b01d      	add	sp, #116	; 0x74
 8004286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800428a:	89ab      	ldrh	r3, [r5, #12]
 800428c:	0598      	lsls	r0, r3, #22
 800428e:	d4f7      	bmi.n	8004280 <_vfiprintf_r+0x44>
 8004290:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004292:	f7ff feb6 	bl	8004002 <__retarget_lock_release_recursive>
 8004296:	e7f3      	b.n	8004280 <_vfiprintf_r+0x44>
 8004298:	2300      	movs	r3, #0
 800429a:	9309      	str	r3, [sp, #36]	; 0x24
 800429c:	2320      	movs	r3, #32
 800429e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042a2:	2330      	movs	r3, #48	; 0x30
 80042a4:	f04f 0901 	mov.w	r9, #1
 80042a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80042ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800445c <_vfiprintf_r+0x220>
 80042b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042b4:	4623      	mov	r3, r4
 80042b6:	469a      	mov	sl, r3
 80042b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042bc:	b10a      	cbz	r2, 80042c2 <_vfiprintf_r+0x86>
 80042be:	2a25      	cmp	r2, #37	; 0x25
 80042c0:	d1f9      	bne.n	80042b6 <_vfiprintf_r+0x7a>
 80042c2:	ebba 0b04 	subs.w	fp, sl, r4
 80042c6:	d00b      	beq.n	80042e0 <_vfiprintf_r+0xa4>
 80042c8:	465b      	mov	r3, fp
 80042ca:	4622      	mov	r2, r4
 80042cc:	4629      	mov	r1, r5
 80042ce:	4630      	mov	r0, r6
 80042d0:	f7ff ffa1 	bl	8004216 <__sfputs_r>
 80042d4:	3001      	adds	r0, #1
 80042d6:	f000 80a9 	beq.w	800442c <_vfiprintf_r+0x1f0>
 80042da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042dc:	445a      	add	r2, fp
 80042de:	9209      	str	r2, [sp, #36]	; 0x24
 80042e0:	f89a 3000 	ldrb.w	r3, [sl]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 80a1 	beq.w	800442c <_vfiprintf_r+0x1f0>
 80042ea:	2300      	movs	r3, #0
 80042ec:	f04f 32ff 	mov.w	r2, #4294967295
 80042f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042f4:	f10a 0a01 	add.w	sl, sl, #1
 80042f8:	9304      	str	r3, [sp, #16]
 80042fa:	9307      	str	r3, [sp, #28]
 80042fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004300:	931a      	str	r3, [sp, #104]	; 0x68
 8004302:	4654      	mov	r4, sl
 8004304:	2205      	movs	r2, #5
 8004306:	f814 1b01 	ldrb.w	r1, [r4], #1
 800430a:	4854      	ldr	r0, [pc, #336]	; (800445c <_vfiprintf_r+0x220>)
 800430c:	f000 fb82 	bl	8004a14 <memchr>
 8004310:	9a04      	ldr	r2, [sp, #16]
 8004312:	b9d8      	cbnz	r0, 800434c <_vfiprintf_r+0x110>
 8004314:	06d1      	lsls	r1, r2, #27
 8004316:	bf44      	itt	mi
 8004318:	2320      	movmi	r3, #32
 800431a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800431e:	0713      	lsls	r3, r2, #28
 8004320:	bf44      	itt	mi
 8004322:	232b      	movmi	r3, #43	; 0x2b
 8004324:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004328:	f89a 3000 	ldrb.w	r3, [sl]
 800432c:	2b2a      	cmp	r3, #42	; 0x2a
 800432e:	d015      	beq.n	800435c <_vfiprintf_r+0x120>
 8004330:	4654      	mov	r4, sl
 8004332:	2000      	movs	r0, #0
 8004334:	f04f 0c0a 	mov.w	ip, #10
 8004338:	9a07      	ldr	r2, [sp, #28]
 800433a:	4621      	mov	r1, r4
 800433c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004340:	3b30      	subs	r3, #48	; 0x30
 8004342:	2b09      	cmp	r3, #9
 8004344:	d94d      	bls.n	80043e2 <_vfiprintf_r+0x1a6>
 8004346:	b1b0      	cbz	r0, 8004376 <_vfiprintf_r+0x13a>
 8004348:	9207      	str	r2, [sp, #28]
 800434a:	e014      	b.n	8004376 <_vfiprintf_r+0x13a>
 800434c:	eba0 0308 	sub.w	r3, r0, r8
 8004350:	fa09 f303 	lsl.w	r3, r9, r3
 8004354:	4313      	orrs	r3, r2
 8004356:	46a2      	mov	sl, r4
 8004358:	9304      	str	r3, [sp, #16]
 800435a:	e7d2      	b.n	8004302 <_vfiprintf_r+0xc6>
 800435c:	9b03      	ldr	r3, [sp, #12]
 800435e:	1d19      	adds	r1, r3, #4
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	9103      	str	r1, [sp, #12]
 8004364:	2b00      	cmp	r3, #0
 8004366:	bfbb      	ittet	lt
 8004368:	425b      	neglt	r3, r3
 800436a:	f042 0202 	orrlt.w	r2, r2, #2
 800436e:	9307      	strge	r3, [sp, #28]
 8004370:	9307      	strlt	r3, [sp, #28]
 8004372:	bfb8      	it	lt
 8004374:	9204      	strlt	r2, [sp, #16]
 8004376:	7823      	ldrb	r3, [r4, #0]
 8004378:	2b2e      	cmp	r3, #46	; 0x2e
 800437a:	d10c      	bne.n	8004396 <_vfiprintf_r+0x15a>
 800437c:	7863      	ldrb	r3, [r4, #1]
 800437e:	2b2a      	cmp	r3, #42	; 0x2a
 8004380:	d134      	bne.n	80043ec <_vfiprintf_r+0x1b0>
 8004382:	9b03      	ldr	r3, [sp, #12]
 8004384:	3402      	adds	r4, #2
 8004386:	1d1a      	adds	r2, r3, #4
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	9203      	str	r2, [sp, #12]
 800438c:	2b00      	cmp	r3, #0
 800438e:	bfb8      	it	lt
 8004390:	f04f 33ff 	movlt.w	r3, #4294967295
 8004394:	9305      	str	r3, [sp, #20]
 8004396:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004460 <_vfiprintf_r+0x224>
 800439a:	2203      	movs	r2, #3
 800439c:	4650      	mov	r0, sl
 800439e:	7821      	ldrb	r1, [r4, #0]
 80043a0:	f000 fb38 	bl	8004a14 <memchr>
 80043a4:	b138      	cbz	r0, 80043b6 <_vfiprintf_r+0x17a>
 80043a6:	2240      	movs	r2, #64	; 0x40
 80043a8:	9b04      	ldr	r3, [sp, #16]
 80043aa:	eba0 000a 	sub.w	r0, r0, sl
 80043ae:	4082      	lsls	r2, r0
 80043b0:	4313      	orrs	r3, r2
 80043b2:	3401      	adds	r4, #1
 80043b4:	9304      	str	r3, [sp, #16]
 80043b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043ba:	2206      	movs	r2, #6
 80043bc:	4829      	ldr	r0, [pc, #164]	; (8004464 <_vfiprintf_r+0x228>)
 80043be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043c2:	f000 fb27 	bl	8004a14 <memchr>
 80043c6:	2800      	cmp	r0, #0
 80043c8:	d03f      	beq.n	800444a <_vfiprintf_r+0x20e>
 80043ca:	4b27      	ldr	r3, [pc, #156]	; (8004468 <_vfiprintf_r+0x22c>)
 80043cc:	bb1b      	cbnz	r3, 8004416 <_vfiprintf_r+0x1da>
 80043ce:	9b03      	ldr	r3, [sp, #12]
 80043d0:	3307      	adds	r3, #7
 80043d2:	f023 0307 	bic.w	r3, r3, #7
 80043d6:	3308      	adds	r3, #8
 80043d8:	9303      	str	r3, [sp, #12]
 80043da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043dc:	443b      	add	r3, r7
 80043de:	9309      	str	r3, [sp, #36]	; 0x24
 80043e0:	e768      	b.n	80042b4 <_vfiprintf_r+0x78>
 80043e2:	460c      	mov	r4, r1
 80043e4:	2001      	movs	r0, #1
 80043e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80043ea:	e7a6      	b.n	800433a <_vfiprintf_r+0xfe>
 80043ec:	2300      	movs	r3, #0
 80043ee:	f04f 0c0a 	mov.w	ip, #10
 80043f2:	4619      	mov	r1, r3
 80043f4:	3401      	adds	r4, #1
 80043f6:	9305      	str	r3, [sp, #20]
 80043f8:	4620      	mov	r0, r4
 80043fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043fe:	3a30      	subs	r2, #48	; 0x30
 8004400:	2a09      	cmp	r2, #9
 8004402:	d903      	bls.n	800440c <_vfiprintf_r+0x1d0>
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0c6      	beq.n	8004396 <_vfiprintf_r+0x15a>
 8004408:	9105      	str	r1, [sp, #20]
 800440a:	e7c4      	b.n	8004396 <_vfiprintf_r+0x15a>
 800440c:	4604      	mov	r4, r0
 800440e:	2301      	movs	r3, #1
 8004410:	fb0c 2101 	mla	r1, ip, r1, r2
 8004414:	e7f0      	b.n	80043f8 <_vfiprintf_r+0x1bc>
 8004416:	ab03      	add	r3, sp, #12
 8004418:	9300      	str	r3, [sp, #0]
 800441a:	462a      	mov	r2, r5
 800441c:	4630      	mov	r0, r6
 800441e:	4b13      	ldr	r3, [pc, #76]	; (800446c <_vfiprintf_r+0x230>)
 8004420:	a904      	add	r1, sp, #16
 8004422:	f3af 8000 	nop.w
 8004426:	4607      	mov	r7, r0
 8004428:	1c78      	adds	r0, r7, #1
 800442a:	d1d6      	bne.n	80043da <_vfiprintf_r+0x19e>
 800442c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800442e:	07d9      	lsls	r1, r3, #31
 8004430:	d405      	bmi.n	800443e <_vfiprintf_r+0x202>
 8004432:	89ab      	ldrh	r3, [r5, #12]
 8004434:	059a      	lsls	r2, r3, #22
 8004436:	d402      	bmi.n	800443e <_vfiprintf_r+0x202>
 8004438:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800443a:	f7ff fde2 	bl	8004002 <__retarget_lock_release_recursive>
 800443e:	89ab      	ldrh	r3, [r5, #12]
 8004440:	065b      	lsls	r3, r3, #25
 8004442:	f53f af1d 	bmi.w	8004280 <_vfiprintf_r+0x44>
 8004446:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004448:	e71c      	b.n	8004284 <_vfiprintf_r+0x48>
 800444a:	ab03      	add	r3, sp, #12
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	462a      	mov	r2, r5
 8004450:	4630      	mov	r0, r6
 8004452:	4b06      	ldr	r3, [pc, #24]	; (800446c <_vfiprintf_r+0x230>)
 8004454:	a904      	add	r1, sp, #16
 8004456:	f000 f87d 	bl	8004554 <_printf_i>
 800445a:	e7e4      	b.n	8004426 <_vfiprintf_r+0x1ea>
 800445c:	08004afa 	.word	0x08004afa
 8004460:	08004b00 	.word	0x08004b00
 8004464:	08004b04 	.word	0x08004b04
 8004468:	00000000 	.word	0x00000000
 800446c:	08004217 	.word	0x08004217

08004470 <_printf_common>:
 8004470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004474:	4616      	mov	r6, r2
 8004476:	4699      	mov	r9, r3
 8004478:	688a      	ldr	r2, [r1, #8]
 800447a:	690b      	ldr	r3, [r1, #16]
 800447c:	4607      	mov	r7, r0
 800447e:	4293      	cmp	r3, r2
 8004480:	bfb8      	it	lt
 8004482:	4613      	movlt	r3, r2
 8004484:	6033      	str	r3, [r6, #0]
 8004486:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800448a:	460c      	mov	r4, r1
 800448c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004490:	b10a      	cbz	r2, 8004496 <_printf_common+0x26>
 8004492:	3301      	adds	r3, #1
 8004494:	6033      	str	r3, [r6, #0]
 8004496:	6823      	ldr	r3, [r4, #0]
 8004498:	0699      	lsls	r1, r3, #26
 800449a:	bf42      	ittt	mi
 800449c:	6833      	ldrmi	r3, [r6, #0]
 800449e:	3302      	addmi	r3, #2
 80044a0:	6033      	strmi	r3, [r6, #0]
 80044a2:	6825      	ldr	r5, [r4, #0]
 80044a4:	f015 0506 	ands.w	r5, r5, #6
 80044a8:	d106      	bne.n	80044b8 <_printf_common+0x48>
 80044aa:	f104 0a19 	add.w	sl, r4, #25
 80044ae:	68e3      	ldr	r3, [r4, #12]
 80044b0:	6832      	ldr	r2, [r6, #0]
 80044b2:	1a9b      	subs	r3, r3, r2
 80044b4:	42ab      	cmp	r3, r5
 80044b6:	dc2b      	bgt.n	8004510 <_printf_common+0xa0>
 80044b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044bc:	1e13      	subs	r3, r2, #0
 80044be:	6822      	ldr	r2, [r4, #0]
 80044c0:	bf18      	it	ne
 80044c2:	2301      	movne	r3, #1
 80044c4:	0692      	lsls	r2, r2, #26
 80044c6:	d430      	bmi.n	800452a <_printf_common+0xba>
 80044c8:	4649      	mov	r1, r9
 80044ca:	4638      	mov	r0, r7
 80044cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044d0:	47c0      	blx	r8
 80044d2:	3001      	adds	r0, #1
 80044d4:	d023      	beq.n	800451e <_printf_common+0xae>
 80044d6:	6823      	ldr	r3, [r4, #0]
 80044d8:	6922      	ldr	r2, [r4, #16]
 80044da:	f003 0306 	and.w	r3, r3, #6
 80044de:	2b04      	cmp	r3, #4
 80044e0:	bf14      	ite	ne
 80044e2:	2500      	movne	r5, #0
 80044e4:	6833      	ldreq	r3, [r6, #0]
 80044e6:	f04f 0600 	mov.w	r6, #0
 80044ea:	bf08      	it	eq
 80044ec:	68e5      	ldreq	r5, [r4, #12]
 80044ee:	f104 041a 	add.w	r4, r4, #26
 80044f2:	bf08      	it	eq
 80044f4:	1aed      	subeq	r5, r5, r3
 80044f6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80044fa:	bf08      	it	eq
 80044fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004500:	4293      	cmp	r3, r2
 8004502:	bfc4      	itt	gt
 8004504:	1a9b      	subgt	r3, r3, r2
 8004506:	18ed      	addgt	r5, r5, r3
 8004508:	42b5      	cmp	r5, r6
 800450a:	d11a      	bne.n	8004542 <_printf_common+0xd2>
 800450c:	2000      	movs	r0, #0
 800450e:	e008      	b.n	8004522 <_printf_common+0xb2>
 8004510:	2301      	movs	r3, #1
 8004512:	4652      	mov	r2, sl
 8004514:	4649      	mov	r1, r9
 8004516:	4638      	mov	r0, r7
 8004518:	47c0      	blx	r8
 800451a:	3001      	adds	r0, #1
 800451c:	d103      	bne.n	8004526 <_printf_common+0xb6>
 800451e:	f04f 30ff 	mov.w	r0, #4294967295
 8004522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004526:	3501      	adds	r5, #1
 8004528:	e7c1      	b.n	80044ae <_printf_common+0x3e>
 800452a:	2030      	movs	r0, #48	; 0x30
 800452c:	18e1      	adds	r1, r4, r3
 800452e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004532:	1c5a      	adds	r2, r3, #1
 8004534:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004538:	4422      	add	r2, r4
 800453a:	3302      	adds	r3, #2
 800453c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004540:	e7c2      	b.n	80044c8 <_printf_common+0x58>
 8004542:	2301      	movs	r3, #1
 8004544:	4622      	mov	r2, r4
 8004546:	4649      	mov	r1, r9
 8004548:	4638      	mov	r0, r7
 800454a:	47c0      	blx	r8
 800454c:	3001      	adds	r0, #1
 800454e:	d0e6      	beq.n	800451e <_printf_common+0xae>
 8004550:	3601      	adds	r6, #1
 8004552:	e7d9      	b.n	8004508 <_printf_common+0x98>

08004554 <_printf_i>:
 8004554:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004558:	7e0f      	ldrb	r7, [r1, #24]
 800455a:	4691      	mov	r9, r2
 800455c:	2f78      	cmp	r7, #120	; 0x78
 800455e:	4680      	mov	r8, r0
 8004560:	460c      	mov	r4, r1
 8004562:	469a      	mov	sl, r3
 8004564:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004566:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800456a:	d807      	bhi.n	800457c <_printf_i+0x28>
 800456c:	2f62      	cmp	r7, #98	; 0x62
 800456e:	d80a      	bhi.n	8004586 <_printf_i+0x32>
 8004570:	2f00      	cmp	r7, #0
 8004572:	f000 80d5 	beq.w	8004720 <_printf_i+0x1cc>
 8004576:	2f58      	cmp	r7, #88	; 0x58
 8004578:	f000 80c1 	beq.w	80046fe <_printf_i+0x1aa>
 800457c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004580:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004584:	e03a      	b.n	80045fc <_printf_i+0xa8>
 8004586:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800458a:	2b15      	cmp	r3, #21
 800458c:	d8f6      	bhi.n	800457c <_printf_i+0x28>
 800458e:	a101      	add	r1, pc, #4	; (adr r1, 8004594 <_printf_i+0x40>)
 8004590:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004594:	080045ed 	.word	0x080045ed
 8004598:	08004601 	.word	0x08004601
 800459c:	0800457d 	.word	0x0800457d
 80045a0:	0800457d 	.word	0x0800457d
 80045a4:	0800457d 	.word	0x0800457d
 80045a8:	0800457d 	.word	0x0800457d
 80045ac:	08004601 	.word	0x08004601
 80045b0:	0800457d 	.word	0x0800457d
 80045b4:	0800457d 	.word	0x0800457d
 80045b8:	0800457d 	.word	0x0800457d
 80045bc:	0800457d 	.word	0x0800457d
 80045c0:	08004707 	.word	0x08004707
 80045c4:	0800462d 	.word	0x0800462d
 80045c8:	080046c1 	.word	0x080046c1
 80045cc:	0800457d 	.word	0x0800457d
 80045d0:	0800457d 	.word	0x0800457d
 80045d4:	08004729 	.word	0x08004729
 80045d8:	0800457d 	.word	0x0800457d
 80045dc:	0800462d 	.word	0x0800462d
 80045e0:	0800457d 	.word	0x0800457d
 80045e4:	0800457d 	.word	0x0800457d
 80045e8:	080046c9 	.word	0x080046c9
 80045ec:	682b      	ldr	r3, [r5, #0]
 80045ee:	1d1a      	adds	r2, r3, #4
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	602a      	str	r2, [r5, #0]
 80045f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045fc:	2301      	movs	r3, #1
 80045fe:	e0a0      	b.n	8004742 <_printf_i+0x1ee>
 8004600:	6820      	ldr	r0, [r4, #0]
 8004602:	682b      	ldr	r3, [r5, #0]
 8004604:	0607      	lsls	r7, r0, #24
 8004606:	f103 0104 	add.w	r1, r3, #4
 800460a:	6029      	str	r1, [r5, #0]
 800460c:	d501      	bpl.n	8004612 <_printf_i+0xbe>
 800460e:	681e      	ldr	r6, [r3, #0]
 8004610:	e003      	b.n	800461a <_printf_i+0xc6>
 8004612:	0646      	lsls	r6, r0, #25
 8004614:	d5fb      	bpl.n	800460e <_printf_i+0xba>
 8004616:	f9b3 6000 	ldrsh.w	r6, [r3]
 800461a:	2e00      	cmp	r6, #0
 800461c:	da03      	bge.n	8004626 <_printf_i+0xd2>
 800461e:	232d      	movs	r3, #45	; 0x2d
 8004620:	4276      	negs	r6, r6
 8004622:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004626:	230a      	movs	r3, #10
 8004628:	4859      	ldr	r0, [pc, #356]	; (8004790 <_printf_i+0x23c>)
 800462a:	e012      	b.n	8004652 <_printf_i+0xfe>
 800462c:	682b      	ldr	r3, [r5, #0]
 800462e:	6820      	ldr	r0, [r4, #0]
 8004630:	1d19      	adds	r1, r3, #4
 8004632:	6029      	str	r1, [r5, #0]
 8004634:	0605      	lsls	r5, r0, #24
 8004636:	d501      	bpl.n	800463c <_printf_i+0xe8>
 8004638:	681e      	ldr	r6, [r3, #0]
 800463a:	e002      	b.n	8004642 <_printf_i+0xee>
 800463c:	0641      	lsls	r1, r0, #25
 800463e:	d5fb      	bpl.n	8004638 <_printf_i+0xe4>
 8004640:	881e      	ldrh	r6, [r3, #0]
 8004642:	2f6f      	cmp	r7, #111	; 0x6f
 8004644:	bf0c      	ite	eq
 8004646:	2308      	moveq	r3, #8
 8004648:	230a      	movne	r3, #10
 800464a:	4851      	ldr	r0, [pc, #324]	; (8004790 <_printf_i+0x23c>)
 800464c:	2100      	movs	r1, #0
 800464e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004652:	6865      	ldr	r5, [r4, #4]
 8004654:	2d00      	cmp	r5, #0
 8004656:	bfa8      	it	ge
 8004658:	6821      	ldrge	r1, [r4, #0]
 800465a:	60a5      	str	r5, [r4, #8]
 800465c:	bfa4      	itt	ge
 800465e:	f021 0104 	bicge.w	r1, r1, #4
 8004662:	6021      	strge	r1, [r4, #0]
 8004664:	b90e      	cbnz	r6, 800466a <_printf_i+0x116>
 8004666:	2d00      	cmp	r5, #0
 8004668:	d04b      	beq.n	8004702 <_printf_i+0x1ae>
 800466a:	4615      	mov	r5, r2
 800466c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004670:	fb03 6711 	mls	r7, r3, r1, r6
 8004674:	5dc7      	ldrb	r7, [r0, r7]
 8004676:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800467a:	4637      	mov	r7, r6
 800467c:	42bb      	cmp	r3, r7
 800467e:	460e      	mov	r6, r1
 8004680:	d9f4      	bls.n	800466c <_printf_i+0x118>
 8004682:	2b08      	cmp	r3, #8
 8004684:	d10b      	bne.n	800469e <_printf_i+0x14a>
 8004686:	6823      	ldr	r3, [r4, #0]
 8004688:	07de      	lsls	r6, r3, #31
 800468a:	d508      	bpl.n	800469e <_printf_i+0x14a>
 800468c:	6923      	ldr	r3, [r4, #16]
 800468e:	6861      	ldr	r1, [r4, #4]
 8004690:	4299      	cmp	r1, r3
 8004692:	bfde      	ittt	le
 8004694:	2330      	movle	r3, #48	; 0x30
 8004696:	f805 3c01 	strble.w	r3, [r5, #-1]
 800469a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800469e:	1b52      	subs	r2, r2, r5
 80046a0:	6122      	str	r2, [r4, #16]
 80046a2:	464b      	mov	r3, r9
 80046a4:	4621      	mov	r1, r4
 80046a6:	4640      	mov	r0, r8
 80046a8:	f8cd a000 	str.w	sl, [sp]
 80046ac:	aa03      	add	r2, sp, #12
 80046ae:	f7ff fedf 	bl	8004470 <_printf_common>
 80046b2:	3001      	adds	r0, #1
 80046b4:	d14a      	bne.n	800474c <_printf_i+0x1f8>
 80046b6:	f04f 30ff 	mov.w	r0, #4294967295
 80046ba:	b004      	add	sp, #16
 80046bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046c0:	6823      	ldr	r3, [r4, #0]
 80046c2:	f043 0320 	orr.w	r3, r3, #32
 80046c6:	6023      	str	r3, [r4, #0]
 80046c8:	2778      	movs	r7, #120	; 0x78
 80046ca:	4832      	ldr	r0, [pc, #200]	; (8004794 <_printf_i+0x240>)
 80046cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80046d0:	6823      	ldr	r3, [r4, #0]
 80046d2:	6829      	ldr	r1, [r5, #0]
 80046d4:	061f      	lsls	r7, r3, #24
 80046d6:	f851 6b04 	ldr.w	r6, [r1], #4
 80046da:	d402      	bmi.n	80046e2 <_printf_i+0x18e>
 80046dc:	065f      	lsls	r7, r3, #25
 80046de:	bf48      	it	mi
 80046e0:	b2b6      	uxthmi	r6, r6
 80046e2:	07df      	lsls	r7, r3, #31
 80046e4:	bf48      	it	mi
 80046e6:	f043 0320 	orrmi.w	r3, r3, #32
 80046ea:	6029      	str	r1, [r5, #0]
 80046ec:	bf48      	it	mi
 80046ee:	6023      	strmi	r3, [r4, #0]
 80046f0:	b91e      	cbnz	r6, 80046fa <_printf_i+0x1a6>
 80046f2:	6823      	ldr	r3, [r4, #0]
 80046f4:	f023 0320 	bic.w	r3, r3, #32
 80046f8:	6023      	str	r3, [r4, #0]
 80046fa:	2310      	movs	r3, #16
 80046fc:	e7a6      	b.n	800464c <_printf_i+0xf8>
 80046fe:	4824      	ldr	r0, [pc, #144]	; (8004790 <_printf_i+0x23c>)
 8004700:	e7e4      	b.n	80046cc <_printf_i+0x178>
 8004702:	4615      	mov	r5, r2
 8004704:	e7bd      	b.n	8004682 <_printf_i+0x12e>
 8004706:	682b      	ldr	r3, [r5, #0]
 8004708:	6826      	ldr	r6, [r4, #0]
 800470a:	1d18      	adds	r0, r3, #4
 800470c:	6961      	ldr	r1, [r4, #20]
 800470e:	6028      	str	r0, [r5, #0]
 8004710:	0635      	lsls	r5, r6, #24
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	d501      	bpl.n	800471a <_printf_i+0x1c6>
 8004716:	6019      	str	r1, [r3, #0]
 8004718:	e002      	b.n	8004720 <_printf_i+0x1cc>
 800471a:	0670      	lsls	r0, r6, #25
 800471c:	d5fb      	bpl.n	8004716 <_printf_i+0x1c2>
 800471e:	8019      	strh	r1, [r3, #0]
 8004720:	2300      	movs	r3, #0
 8004722:	4615      	mov	r5, r2
 8004724:	6123      	str	r3, [r4, #16]
 8004726:	e7bc      	b.n	80046a2 <_printf_i+0x14e>
 8004728:	682b      	ldr	r3, [r5, #0]
 800472a:	2100      	movs	r1, #0
 800472c:	1d1a      	adds	r2, r3, #4
 800472e:	602a      	str	r2, [r5, #0]
 8004730:	681d      	ldr	r5, [r3, #0]
 8004732:	6862      	ldr	r2, [r4, #4]
 8004734:	4628      	mov	r0, r5
 8004736:	f000 f96d 	bl	8004a14 <memchr>
 800473a:	b108      	cbz	r0, 8004740 <_printf_i+0x1ec>
 800473c:	1b40      	subs	r0, r0, r5
 800473e:	6060      	str	r0, [r4, #4]
 8004740:	6863      	ldr	r3, [r4, #4]
 8004742:	6123      	str	r3, [r4, #16]
 8004744:	2300      	movs	r3, #0
 8004746:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800474a:	e7aa      	b.n	80046a2 <_printf_i+0x14e>
 800474c:	462a      	mov	r2, r5
 800474e:	4649      	mov	r1, r9
 8004750:	4640      	mov	r0, r8
 8004752:	6923      	ldr	r3, [r4, #16]
 8004754:	47d0      	blx	sl
 8004756:	3001      	adds	r0, #1
 8004758:	d0ad      	beq.n	80046b6 <_printf_i+0x162>
 800475a:	6823      	ldr	r3, [r4, #0]
 800475c:	079b      	lsls	r3, r3, #30
 800475e:	d413      	bmi.n	8004788 <_printf_i+0x234>
 8004760:	68e0      	ldr	r0, [r4, #12]
 8004762:	9b03      	ldr	r3, [sp, #12]
 8004764:	4298      	cmp	r0, r3
 8004766:	bfb8      	it	lt
 8004768:	4618      	movlt	r0, r3
 800476a:	e7a6      	b.n	80046ba <_printf_i+0x166>
 800476c:	2301      	movs	r3, #1
 800476e:	4632      	mov	r2, r6
 8004770:	4649      	mov	r1, r9
 8004772:	4640      	mov	r0, r8
 8004774:	47d0      	blx	sl
 8004776:	3001      	adds	r0, #1
 8004778:	d09d      	beq.n	80046b6 <_printf_i+0x162>
 800477a:	3501      	adds	r5, #1
 800477c:	68e3      	ldr	r3, [r4, #12]
 800477e:	9903      	ldr	r1, [sp, #12]
 8004780:	1a5b      	subs	r3, r3, r1
 8004782:	42ab      	cmp	r3, r5
 8004784:	dcf2      	bgt.n	800476c <_printf_i+0x218>
 8004786:	e7eb      	b.n	8004760 <_printf_i+0x20c>
 8004788:	2500      	movs	r5, #0
 800478a:	f104 0619 	add.w	r6, r4, #25
 800478e:	e7f5      	b.n	800477c <_printf_i+0x228>
 8004790:	08004b0b 	.word	0x08004b0b
 8004794:	08004b1c 	.word	0x08004b1c

08004798 <__sflush_r>:
 8004798:	898a      	ldrh	r2, [r1, #12]
 800479a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479c:	4605      	mov	r5, r0
 800479e:	0710      	lsls	r0, r2, #28
 80047a0:	460c      	mov	r4, r1
 80047a2:	d457      	bmi.n	8004854 <__sflush_r+0xbc>
 80047a4:	684b      	ldr	r3, [r1, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	dc04      	bgt.n	80047b4 <__sflush_r+0x1c>
 80047aa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	dc01      	bgt.n	80047b4 <__sflush_r+0x1c>
 80047b0:	2000      	movs	r0, #0
 80047b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047b6:	2e00      	cmp	r6, #0
 80047b8:	d0fa      	beq.n	80047b0 <__sflush_r+0x18>
 80047ba:	2300      	movs	r3, #0
 80047bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80047c0:	682f      	ldr	r7, [r5, #0]
 80047c2:	6a21      	ldr	r1, [r4, #32]
 80047c4:	602b      	str	r3, [r5, #0]
 80047c6:	d032      	beq.n	800482e <__sflush_r+0x96>
 80047c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80047ca:	89a3      	ldrh	r3, [r4, #12]
 80047cc:	075a      	lsls	r2, r3, #29
 80047ce:	d505      	bpl.n	80047dc <__sflush_r+0x44>
 80047d0:	6863      	ldr	r3, [r4, #4]
 80047d2:	1ac0      	subs	r0, r0, r3
 80047d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80047d6:	b10b      	cbz	r3, 80047dc <__sflush_r+0x44>
 80047d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047da:	1ac0      	subs	r0, r0, r3
 80047dc:	2300      	movs	r3, #0
 80047de:	4602      	mov	r2, r0
 80047e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047e2:	4628      	mov	r0, r5
 80047e4:	6a21      	ldr	r1, [r4, #32]
 80047e6:	47b0      	blx	r6
 80047e8:	1c43      	adds	r3, r0, #1
 80047ea:	89a3      	ldrh	r3, [r4, #12]
 80047ec:	d106      	bne.n	80047fc <__sflush_r+0x64>
 80047ee:	6829      	ldr	r1, [r5, #0]
 80047f0:	291d      	cmp	r1, #29
 80047f2:	d82b      	bhi.n	800484c <__sflush_r+0xb4>
 80047f4:	4a28      	ldr	r2, [pc, #160]	; (8004898 <__sflush_r+0x100>)
 80047f6:	410a      	asrs	r2, r1
 80047f8:	07d6      	lsls	r6, r2, #31
 80047fa:	d427      	bmi.n	800484c <__sflush_r+0xb4>
 80047fc:	2200      	movs	r2, #0
 80047fe:	6062      	str	r2, [r4, #4]
 8004800:	6922      	ldr	r2, [r4, #16]
 8004802:	04d9      	lsls	r1, r3, #19
 8004804:	6022      	str	r2, [r4, #0]
 8004806:	d504      	bpl.n	8004812 <__sflush_r+0x7a>
 8004808:	1c42      	adds	r2, r0, #1
 800480a:	d101      	bne.n	8004810 <__sflush_r+0x78>
 800480c:	682b      	ldr	r3, [r5, #0]
 800480e:	b903      	cbnz	r3, 8004812 <__sflush_r+0x7a>
 8004810:	6560      	str	r0, [r4, #84]	; 0x54
 8004812:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004814:	602f      	str	r7, [r5, #0]
 8004816:	2900      	cmp	r1, #0
 8004818:	d0ca      	beq.n	80047b0 <__sflush_r+0x18>
 800481a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800481e:	4299      	cmp	r1, r3
 8004820:	d002      	beq.n	8004828 <__sflush_r+0x90>
 8004822:	4628      	mov	r0, r5
 8004824:	f7ff fbee 	bl	8004004 <_free_r>
 8004828:	2000      	movs	r0, #0
 800482a:	6360      	str	r0, [r4, #52]	; 0x34
 800482c:	e7c1      	b.n	80047b2 <__sflush_r+0x1a>
 800482e:	2301      	movs	r3, #1
 8004830:	4628      	mov	r0, r5
 8004832:	47b0      	blx	r6
 8004834:	1c41      	adds	r1, r0, #1
 8004836:	d1c8      	bne.n	80047ca <__sflush_r+0x32>
 8004838:	682b      	ldr	r3, [r5, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d0c5      	beq.n	80047ca <__sflush_r+0x32>
 800483e:	2b1d      	cmp	r3, #29
 8004840:	d001      	beq.n	8004846 <__sflush_r+0xae>
 8004842:	2b16      	cmp	r3, #22
 8004844:	d101      	bne.n	800484a <__sflush_r+0xb2>
 8004846:	602f      	str	r7, [r5, #0]
 8004848:	e7b2      	b.n	80047b0 <__sflush_r+0x18>
 800484a:	89a3      	ldrh	r3, [r4, #12]
 800484c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004850:	81a3      	strh	r3, [r4, #12]
 8004852:	e7ae      	b.n	80047b2 <__sflush_r+0x1a>
 8004854:	690f      	ldr	r7, [r1, #16]
 8004856:	2f00      	cmp	r7, #0
 8004858:	d0aa      	beq.n	80047b0 <__sflush_r+0x18>
 800485a:	0793      	lsls	r3, r2, #30
 800485c:	bf18      	it	ne
 800485e:	2300      	movne	r3, #0
 8004860:	680e      	ldr	r6, [r1, #0]
 8004862:	bf08      	it	eq
 8004864:	694b      	ldreq	r3, [r1, #20]
 8004866:	1bf6      	subs	r6, r6, r7
 8004868:	600f      	str	r7, [r1, #0]
 800486a:	608b      	str	r3, [r1, #8]
 800486c:	2e00      	cmp	r6, #0
 800486e:	dd9f      	ble.n	80047b0 <__sflush_r+0x18>
 8004870:	4633      	mov	r3, r6
 8004872:	463a      	mov	r2, r7
 8004874:	4628      	mov	r0, r5
 8004876:	6a21      	ldr	r1, [r4, #32]
 8004878:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800487c:	47e0      	blx	ip
 800487e:	2800      	cmp	r0, #0
 8004880:	dc06      	bgt.n	8004890 <__sflush_r+0xf8>
 8004882:	89a3      	ldrh	r3, [r4, #12]
 8004884:	f04f 30ff 	mov.w	r0, #4294967295
 8004888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800488c:	81a3      	strh	r3, [r4, #12]
 800488e:	e790      	b.n	80047b2 <__sflush_r+0x1a>
 8004890:	4407      	add	r7, r0
 8004892:	1a36      	subs	r6, r6, r0
 8004894:	e7ea      	b.n	800486c <__sflush_r+0xd4>
 8004896:	bf00      	nop
 8004898:	dfbffffe 	.word	0xdfbffffe

0800489c <_fflush_r>:
 800489c:	b538      	push	{r3, r4, r5, lr}
 800489e:	690b      	ldr	r3, [r1, #16]
 80048a0:	4605      	mov	r5, r0
 80048a2:	460c      	mov	r4, r1
 80048a4:	b913      	cbnz	r3, 80048ac <_fflush_r+0x10>
 80048a6:	2500      	movs	r5, #0
 80048a8:	4628      	mov	r0, r5
 80048aa:	bd38      	pop	{r3, r4, r5, pc}
 80048ac:	b118      	cbz	r0, 80048b6 <_fflush_r+0x1a>
 80048ae:	6a03      	ldr	r3, [r0, #32]
 80048b0:	b90b      	cbnz	r3, 80048b6 <_fflush_r+0x1a>
 80048b2:	f7ff f9b1 	bl	8003c18 <__sinit>
 80048b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d0f3      	beq.n	80048a6 <_fflush_r+0xa>
 80048be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80048c0:	07d0      	lsls	r0, r2, #31
 80048c2:	d404      	bmi.n	80048ce <_fflush_r+0x32>
 80048c4:	0599      	lsls	r1, r3, #22
 80048c6:	d402      	bmi.n	80048ce <_fflush_r+0x32>
 80048c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048ca:	f7ff fb99 	bl	8004000 <__retarget_lock_acquire_recursive>
 80048ce:	4628      	mov	r0, r5
 80048d0:	4621      	mov	r1, r4
 80048d2:	f7ff ff61 	bl	8004798 <__sflush_r>
 80048d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048d8:	4605      	mov	r5, r0
 80048da:	07da      	lsls	r2, r3, #31
 80048dc:	d4e4      	bmi.n	80048a8 <_fflush_r+0xc>
 80048de:	89a3      	ldrh	r3, [r4, #12]
 80048e0:	059b      	lsls	r3, r3, #22
 80048e2:	d4e1      	bmi.n	80048a8 <_fflush_r+0xc>
 80048e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048e6:	f7ff fb8c 	bl	8004002 <__retarget_lock_release_recursive>
 80048ea:	e7dd      	b.n	80048a8 <_fflush_r+0xc>

080048ec <__swhatbuf_r>:
 80048ec:	b570      	push	{r4, r5, r6, lr}
 80048ee:	460c      	mov	r4, r1
 80048f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048f4:	4615      	mov	r5, r2
 80048f6:	2900      	cmp	r1, #0
 80048f8:	461e      	mov	r6, r3
 80048fa:	b096      	sub	sp, #88	; 0x58
 80048fc:	da0c      	bge.n	8004918 <__swhatbuf_r+0x2c>
 80048fe:	89a3      	ldrh	r3, [r4, #12]
 8004900:	2100      	movs	r1, #0
 8004902:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004906:	bf0c      	ite	eq
 8004908:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800490c:	2340      	movne	r3, #64	; 0x40
 800490e:	2000      	movs	r0, #0
 8004910:	6031      	str	r1, [r6, #0]
 8004912:	602b      	str	r3, [r5, #0]
 8004914:	b016      	add	sp, #88	; 0x58
 8004916:	bd70      	pop	{r4, r5, r6, pc}
 8004918:	466a      	mov	r2, sp
 800491a:	f000 f849 	bl	80049b0 <_fstat_r>
 800491e:	2800      	cmp	r0, #0
 8004920:	dbed      	blt.n	80048fe <__swhatbuf_r+0x12>
 8004922:	9901      	ldr	r1, [sp, #4]
 8004924:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004928:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800492c:	4259      	negs	r1, r3
 800492e:	4159      	adcs	r1, r3
 8004930:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004934:	e7eb      	b.n	800490e <__swhatbuf_r+0x22>

08004936 <__smakebuf_r>:
 8004936:	898b      	ldrh	r3, [r1, #12]
 8004938:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800493a:	079d      	lsls	r5, r3, #30
 800493c:	4606      	mov	r6, r0
 800493e:	460c      	mov	r4, r1
 8004940:	d507      	bpl.n	8004952 <__smakebuf_r+0x1c>
 8004942:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004946:	6023      	str	r3, [r4, #0]
 8004948:	6123      	str	r3, [r4, #16]
 800494a:	2301      	movs	r3, #1
 800494c:	6163      	str	r3, [r4, #20]
 800494e:	b002      	add	sp, #8
 8004950:	bd70      	pop	{r4, r5, r6, pc}
 8004952:	466a      	mov	r2, sp
 8004954:	ab01      	add	r3, sp, #4
 8004956:	f7ff ffc9 	bl	80048ec <__swhatbuf_r>
 800495a:	9900      	ldr	r1, [sp, #0]
 800495c:	4605      	mov	r5, r0
 800495e:	4630      	mov	r0, r6
 8004960:	f7ff fbb8 	bl	80040d4 <_malloc_r>
 8004964:	b948      	cbnz	r0, 800497a <__smakebuf_r+0x44>
 8004966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800496a:	059a      	lsls	r2, r3, #22
 800496c:	d4ef      	bmi.n	800494e <__smakebuf_r+0x18>
 800496e:	f023 0303 	bic.w	r3, r3, #3
 8004972:	f043 0302 	orr.w	r3, r3, #2
 8004976:	81a3      	strh	r3, [r4, #12]
 8004978:	e7e3      	b.n	8004942 <__smakebuf_r+0xc>
 800497a:	89a3      	ldrh	r3, [r4, #12]
 800497c:	6020      	str	r0, [r4, #0]
 800497e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004982:	81a3      	strh	r3, [r4, #12]
 8004984:	9b00      	ldr	r3, [sp, #0]
 8004986:	6120      	str	r0, [r4, #16]
 8004988:	6163      	str	r3, [r4, #20]
 800498a:	9b01      	ldr	r3, [sp, #4]
 800498c:	b15b      	cbz	r3, 80049a6 <__smakebuf_r+0x70>
 800498e:	4630      	mov	r0, r6
 8004990:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004994:	f000 f81e 	bl	80049d4 <_isatty_r>
 8004998:	b128      	cbz	r0, 80049a6 <__smakebuf_r+0x70>
 800499a:	89a3      	ldrh	r3, [r4, #12]
 800499c:	f023 0303 	bic.w	r3, r3, #3
 80049a0:	f043 0301 	orr.w	r3, r3, #1
 80049a4:	81a3      	strh	r3, [r4, #12]
 80049a6:	89a3      	ldrh	r3, [r4, #12]
 80049a8:	431d      	orrs	r5, r3
 80049aa:	81a5      	strh	r5, [r4, #12]
 80049ac:	e7cf      	b.n	800494e <__smakebuf_r+0x18>
	...

080049b0 <_fstat_r>:
 80049b0:	b538      	push	{r3, r4, r5, lr}
 80049b2:	2300      	movs	r3, #0
 80049b4:	4d06      	ldr	r5, [pc, #24]	; (80049d0 <_fstat_r+0x20>)
 80049b6:	4604      	mov	r4, r0
 80049b8:	4608      	mov	r0, r1
 80049ba:	4611      	mov	r1, r2
 80049bc:	602b      	str	r3, [r5, #0]
 80049be:	f7fb ff19 	bl	80007f4 <_fstat>
 80049c2:	1c43      	adds	r3, r0, #1
 80049c4:	d102      	bne.n	80049cc <_fstat_r+0x1c>
 80049c6:	682b      	ldr	r3, [r5, #0]
 80049c8:	b103      	cbz	r3, 80049cc <_fstat_r+0x1c>
 80049ca:	6023      	str	r3, [r4, #0]
 80049cc:	bd38      	pop	{r3, r4, r5, pc}
 80049ce:	bf00      	nop
 80049d0:	200002b0 	.word	0x200002b0

080049d4 <_isatty_r>:
 80049d4:	b538      	push	{r3, r4, r5, lr}
 80049d6:	2300      	movs	r3, #0
 80049d8:	4d05      	ldr	r5, [pc, #20]	; (80049f0 <_isatty_r+0x1c>)
 80049da:	4604      	mov	r4, r0
 80049dc:	4608      	mov	r0, r1
 80049de:	602b      	str	r3, [r5, #0]
 80049e0:	f7fb ff17 	bl	8000812 <_isatty>
 80049e4:	1c43      	adds	r3, r0, #1
 80049e6:	d102      	bne.n	80049ee <_isatty_r+0x1a>
 80049e8:	682b      	ldr	r3, [r5, #0]
 80049ea:	b103      	cbz	r3, 80049ee <_isatty_r+0x1a>
 80049ec:	6023      	str	r3, [r4, #0]
 80049ee:	bd38      	pop	{r3, r4, r5, pc}
 80049f0:	200002b0 	.word	0x200002b0

080049f4 <_sbrk_r>:
 80049f4:	b538      	push	{r3, r4, r5, lr}
 80049f6:	2300      	movs	r3, #0
 80049f8:	4d05      	ldr	r5, [pc, #20]	; (8004a10 <_sbrk_r+0x1c>)
 80049fa:	4604      	mov	r4, r0
 80049fc:	4608      	mov	r0, r1
 80049fe:	602b      	str	r3, [r5, #0]
 8004a00:	f7fb ff1e 	bl	8000840 <_sbrk>
 8004a04:	1c43      	adds	r3, r0, #1
 8004a06:	d102      	bne.n	8004a0e <_sbrk_r+0x1a>
 8004a08:	682b      	ldr	r3, [r5, #0]
 8004a0a:	b103      	cbz	r3, 8004a0e <_sbrk_r+0x1a>
 8004a0c:	6023      	str	r3, [r4, #0]
 8004a0e:	bd38      	pop	{r3, r4, r5, pc}
 8004a10:	200002b0 	.word	0x200002b0

08004a14 <memchr>:
 8004a14:	4603      	mov	r3, r0
 8004a16:	b510      	push	{r4, lr}
 8004a18:	b2c9      	uxtb	r1, r1
 8004a1a:	4402      	add	r2, r0
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	4618      	mov	r0, r3
 8004a20:	d101      	bne.n	8004a26 <memchr+0x12>
 8004a22:	2000      	movs	r0, #0
 8004a24:	e003      	b.n	8004a2e <memchr+0x1a>
 8004a26:	7804      	ldrb	r4, [r0, #0]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	428c      	cmp	r4, r1
 8004a2c:	d1f6      	bne.n	8004a1c <memchr+0x8>
 8004a2e:	bd10      	pop	{r4, pc}

08004a30 <_init>:
 8004a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a32:	bf00      	nop
 8004a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a36:	bc08      	pop	{r3}
 8004a38:	469e      	mov	lr, r3
 8004a3a:	4770      	bx	lr

08004a3c <_fini>:
 8004a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a3e:	bf00      	nop
 8004a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a42:	bc08      	pop	{r3}
 8004a44:	469e      	mov	lr, r3
 8004a46:	4770      	bx	lr
